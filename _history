{"entries":[{"timestamp":1750198807306,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":210,"diffs":[[1," "]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":0,"length1":48,"diffs":[[1,""]]},{"start1":1,"length1":199,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":181,"length1":116,"diffs":[[1,"        \"main.py\"\n"]]},{"start1":238,"length1":41,"diffs":[[1,"    \"languageRestriction\": \"python-only\",\n    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"tilemap.g.jres","value":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}"},{"type":"added","filename":"tilemap.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myTiles {\n    //% fixedInstance jres blockIdentity=images._tile\n    export const tile1 = image.ofBuffer(hex``);\n    //% fixedInstance jres blockIdentity=images._tile\n    export const tile2 = image.ofBuffer(hex``);\n    //% fixedInstance jres blockIdentity=images._tile\n    export const transparency16 = image.ofBuffer(hex``);\n\n    helpers._registerFactory(\"tilemap\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"world\":\n            case \"world1\":return tiles.createTilemap(hex``, img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`, [myTiles.transparency16,myTiles.tile1,myTiles.tile2], TileScale.Sixteen);\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"tile\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"germanTile\":\n            case \"tile1\":return tile1;\n            case \"franceTile\":\n            case \"tile2\":return tile2;\n            case \"transparency16\":return transparency16;\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"},{"type":"added","filename":"images.g.jres","value":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}"},{"type":"added","filename":"images.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myImages {\n\n    helpers._registerFactory(\"image\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"image1\":\n            case \"city\":return img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n3 3 3 3 3 3 3 3 3 3 . . . . . . \n3 3 3 3 3 3 3 3 3 3 3 3 . . . . \n3 3 3 3 3 3 3 3 3 3 3 3 3 . . . \n3 3 3 3 3 3 3 3 3 3 3 3 3 3 . . \n. . 3 3 3 3 3 3 3 3 3 3 3 3 . . \n. . . . . 3 3 3 3 3 3 3 3 3 . . \n. . . . . . . . . . . 3 3 3 . . \n3 3 3 3 . . . . . . . 3 3 3 . . \n3 3 3 3 3 . . . . . . 3 3 3 . . \n3 3 3 3 3 3 . . . . . 3 3 3 . . \n. 3 3 3 3 3 3 3 3 3 3 3 3 3 . . \n. . 3 3 3 3 3 3 3 3 3 3 3 3 . . \n. . . . 3 3 3 3 3 3 3 3 3 . . . \n. . . . . . . . 3 3 3 3 3 . . . \n`;\n            case \"image2\":\n            case \"crosshair\":return img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . 1 1 . . . . . . . \n. . . . . . 1 1 1 1 . . . . . . \n. . . . . . 1 1 1 1 . . . . . . \n. . . . . . . 1 1 . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`;\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"animation\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"song\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]},{"timestamp":1750199405839,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":210,"length1":694,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":227,"length1":557,"diffs":[[1,"class country(self, )"]]}]}]},{"timestamp":1750199897247,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":802,"length1":105,"diffs":[[1,"germany = new countryType(\"France\", 100000, 2, [], [], tiles.getTilesByType(assets.tile`franceTile`))\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":678,"length1":151,"diffs":[[1,"germany = countryType(\"France\", 100000, 2, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))"]]}]}]},{"timestamp":1750200485889,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":367,"length1":21,"diffs":[[1,""]]},{"start1":907,"length1":600,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":825,"length1":458,"diffs":[[1,"    "]]}]}]},{"timestamp":1750201034776,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1236,"length1":49,"diffs":[[1,"        country.eco += len(country.tiles) / 100"]]}]}]},{"timestamp":1750201710132,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1285,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1750201714560,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":570,"length1":247,"diffs":[[1,""]]},{"start1":1285,"length1":87,"diffs":[[1,"dd"]]}]}]},{"timestamp":1750202203749,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":227,"length1":247,"diffs":[[1,""]]},{"start1":246,"length1":173,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, tradePartners: List[countryType], enemies: List[countryType], tiles: List[tiles.Location] = []):\n"]]},{"start1":468,"length1":33,"diffs":[[1,""]]},{"start1":570,"length1":0,"diffs":[[1,"class aiStrategy:\n    def __init__(self, name: str, agressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.agressiveness = agressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\n"]]},{"start1":1032,"length1":50,"diffs":[[1,""]]},{"start1":1553,"length1":194,"diffs":[[1,"    for\n"]]},{"start1":1562,"length1":63,"diffs":[[1,"def diplomacy(country: countryType, strategy: aiStrategy)"]]}]}]},{"timestamp":1750202742592,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1853,"length1":37,"diffs":[[1,"def diplomacy(country: countryType, strategy: aiStrategy):\n"]]}]}]},{"timestamp":1750203310010,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":210,"length1":355,"diffs":[[1,""]]},{"start1":279,"length1":25,"diffs":[[1,""]]},{"start1":388,"length1":164,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, tradePartners: countryType[], enemies: countryType[], tiles: tiles.Location[] = []) {\n"]]},{"start1":601,"length1":33,"diffs":[[1,""]]},{"start1":928,"length1":34,"diffs":[[1,""]]},{"start1":1528,"length1":303,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":245,"length1":89,"diffs":[[1,"    def __init__(self, name: str, agressiveness: int, peacefulness: int, trading: int):\n"]]},{"start1":358,"length1":44,"diffs":[[1,"        self.agressiveness = agressiveness\n"]]},{"start1":1688,"length1":58,"diffs":[[1,"        country.strategy.agressiveness = randint(1, 100)\n"]]},{"start1":1853,"length1":44,"diffs":[[1,""]]},{"start1":1890,"length1":186,"diffs":[[1,"    "]]}]}]},{"timestamp":1750203905779,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":246,"length1":27,"diffs":[[1,"    agressiveness: number\n"]]},{"start1":317,"length1":95,"diffs":[[1,"    constructor(name: string, agressiveness: number, peacefulness: number, trading: number) {\n"]]},{"start1":436,"length1":45,"diffs":[[1,"        this.agressiveness = agressiveness\n"]]},{"start1":2061,"length1":58,"diffs":[[1,"        country.strategy.agressiveness = randint(1, 100)\n"]]},{"start1":2234,"length1":210,"diffs":[[1,"function diplomacy(country: countryType) {\n    let choice = []\n"]]},{"start1":2300,"length1":395,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":359,"length1":45,"diffs":[[1,"        self.aggressiveness = agressiveness\n"]]},{"start1":1856,"length1":210,"diffs":[[1,"def declareWar(country: countryType):\n    \n"]]},{"start1":1900,"length1":188,"diffs":[[1,"def diplomacy(country: countryType):\n    choice = 1 if country.strategy.aggressiveness > 75 else 2 if country.strategy.peacefulness > 75 else 3\n"]]},{"start1":2060,"length1":51,"diffs":[[1,"        \"war\": 1,\n"]]},{"start1":2123,"length1":78,"diffs":[[1,""]]}]}]},{"timestamp":1750204566805,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":2394,"length1":48,"diffs":[[1,"        choices[choice]()\n"]]}]}]},{"timestamp":1750204580324,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2239,"length1":0,"diffs":[[1,"function declareWar(country: countryType, enemy: countryType) {\n    game.showLongText(country + \" declares war on \" + enemy, DialogLayout.Bottom)\n    country.enemies.push(enemy)\n    enemy.enemies.push(country)\n}\n\n"]]},{"start1":2523,"length1":0,"diffs":[[1,"    let choice = country.strategy.aggressiveness > 75 ? \"war\" : (country.strategy.peacefulness > 75 ? \"peace\" : \"trade\")\n"]]},{"start1":2664,"length1":28,"diffs":[[1,"        \"war\" : declareWar(country, targetCountry),\n        \"peace\" : 2,\n        \"trade\" : 3,\n"]]},{"start1":2769,"length1":43,"diffs":[[1,"    if (choices.indexOf(choice) >= 0) {\n        choices[choice]\n    }\n    \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2133,"length1":0,"diffs":[[1,"    choice = \"war\" if country.strategy.aggressiveness > 75 else \"peace\" if country.strategy.peacefulness > 75 else \"trade\"\n"]]},{"start1":2272,"length1":27,"diffs":[[1,"        \"war\": declareWar(country, targetCountry),\n        \"peace\": 2,\n        \"trade\": 3\n"]]},{"start1":2368,"length1":39,"diffs":[[1,"    if choice in choices:\n        choices[choice](country, targetCountry)\n    else:\n        print()\n"]]}]}]},{"timestamp":1750205118805,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2358,"length1":64,"diffs":[[1,""]]},{"start1":2369,"length1":153,"diffs":[[1,"    let choice = \"war\"\n    choices[choice]\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2068,"length1":60,"diffs":[[1,""]]},{"start1":2149,"length1":88,"diffs":[[1,"        \"war\": declareWar,\n"]]},{"start1":2182,"length1":153,"diffs":[[1,"    choice = \"war\"\n    choices[choice]\n"]]}]}]},{"timestamp":1750205832772,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":2426,"length1":37,"diffs":[[1,"    action = choices['war']()\n"]]}]}]},{"timestamp":1750205834398,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1155,"length1":129,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, [], [], tiles.getTilesByType(assets.tile`germanTile`))\n"]]},{"start1":2001,"length1":198,"diffs":[[1,"function getStrategies() {\n    for (let country of countries) {\n        country.strategy.aggressiveness = randint(1, 100)\n        country.strategy.peacefulness = randint(1, 100)\n        country.strategy.trading = randint(1, 100)\n    }\n"]]},{"start1":2239,"length1":210,"diffs":[[1,"function diplomacy(country: countryType, targetCountry: countryType) {\n    let choices = {\n        \"war\" : declareWar,\n        \"peace\" : declarePeace,\n        \"trade\" : declareTrade,\n    }\n    \n    let choice = country.strategy.aggressiveness > 75 ? \"war\" : (country.strategy.peacefulness > 75 ? \"peace\" : \"trade\")\n    let action = choices[\"war\"]\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":875,"length1":123,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\n"]]},{"start1":1640,"length1":192,"diffs":[[1,"def getStrategies():\n    for country in countries:\n        country.strategy.aggressiveness = randint(1, 100)\n        country.strategy.peacefulness = randint(1, 100)\n        country.strategy.trading = randint(1, 100)\n"]]},{"start1":2067,"length1":0,"diffs":[[1,"\ndef declarePeace():\n    pass\n\ndef declareTrade():\n    pass\n\ndef diplomacy(country: countryType, targetCountry: countryType):\n    choices = {\n        'war': declareWar,\n        'peace': declarePeace,\n        'trade': declareTrade\n    }\n    choice = 'war' if country.strategy.aggressiveness > 75 else 'peace' if country.strategy.peacefulness > 75 else 'trade'\n    action = choices['war'](country)\n"]]}]}]},{"timestamp":1750206420646,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":246,"length1":134,"diffs":[[1,"    aggressiveness: number\n    peacefulness: number\n    trading: number\n    constructor(name: string, aggressiveness: number, peacefulness: number, trading: number) {\n"]]},{"start1":638,"length1":0,"diffs":[[1,"    strategy: aiStrategy\n"]]},{"start1":1007,"length1":0,"diffs":[[1,"        this.strategy = strategy\n"]]},{"start1":1155,"length1":107,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, getStrategy(germany), [], [], tiles.getTilesByType(assets.tile`germanTile`))\n"]]},{"start1":2023,"length1":50,"diffs":[[1,"function getStrategy(country: countryType) {\n    country.strategy.aggressiveness = randint(1, 100)\n    country.strategy.peacefulness = randint(1, 100)\n    country.strategy.trading = randint(1, 100)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":740,"length1":0,"diffs":[[1,"        self.strategy = strategy\n"]]},{"start1":875,"length1":108,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, getStrategy(), [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\n"]]},{"start1":1655,"length1":48,"diffs":[[1,"def getStrategy(country: countryType):\n    country.strategy.aggressiveness = randint(1, 100)\n    country.strategy.peacefulness = randint(1, 100)\n    country.strategy.trading = randint(1, 100)\n"]]}]}]},{"timestamp":1750206965985,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":714,"length1":13,"diffs":[[1,""]]},{"start1":1955,"length1":21,"diffs":[[1,"    \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1646,"length1":31,"diffs":[[1,"    pass\n"]]}]}]},{"timestamp":1750207075308,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1646,"length1":28,"diffs":[[1,"    country.strategy.name = \"\"\n"]]}]}]},{"timestamp":1750634433743,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1646,"length1":29,"diffs":[[1,"    country.strategy.name =\n"]]}]}]},{"timestamp":1750634434494,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1968,"length1":49,"diffs":[[1,"    country.strategy\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":740,"length1":33,"diffs":[[1,""]]},{"start1":1646,"length1":244,"diffs":[[1,"    country.strategy.name = \n"]]}]}]},{"timestamp":1750635005284,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":246,"length1":167,"diffs":[[1,"    aggressiveness\n    peacefulness\n    trading\n    constructor(name: string, aggressiveness: any, peacefulness: any, trading: any) {\n"]]},{"start1":605,"length1":25,"diffs":[[1,""]]},{"start1":714,"length1":0,"diffs":[[1,"    strategy\n"]]},{"start1":962,"length1":33,"diffs":[[1,""]]},{"start1":1077,"length1":224,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, [], [], tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, [], [], tiles.getTilesByType(assets.tile`franceTile`))\n"]]},{"start1":2004,"length1":379,"diffs":[[1,"    strategy\n"]]},{"start1":2233,"length1":162,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":875,"length1":226,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n"]]},{"start1":1711,"length1":387,"diffs":[[1,"    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else if \"peaceful\" strategy.peacefulness > strategy.aggressiveness and strategy.\n"]]},{"start1":2134,"length1":122,"diffs":[[1,""]]}]}]},{"timestamp":1750635515111,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":2391,"length1":63,"diffs":[[1,"    war \n"]]}]}]},{"timestamp":1750636113131,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2689,"length1":506,"diffs":[[1,""]]},{"start1":2764,"length1":298,"diffs":[[1,"    country.strategy.name == \"aggressiveness\" && declareWar(country, targetCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2322,"length1":437,"diffs":[[1,""]]},{"start1":2454,"length1":232,"diffs":[[1,"    and declareWar(country, targetCountry)\n"]]}]}]},{"timestamp":1750636701346,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":318,"length1":18,"diffs":[[1,""]]},{"start1":2841,"length1":186,"diffs":[[1,"    country.enemies.push(enemy)\n    enemy.enemies.push(country)\n"]]},{"start1":3195,"length1":316,"diffs":[[1,""]]},{"start1":3568,"length1":99,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2470,"length1":181,"diffs":[[1,"    country.enemies.remove_at()\n    enemy.enemies.remove_at()\n"]]},{"start1":2533,"length1":329,"diffs":[[1,""]]},{"start1":2759,"length1":257,"diffs":[[1,""]]},{"start1":3123,"length1":149,"diffs":[[1,""]]}]}]},{"timestamp":1750637284866,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1173,"length1":270,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, null, [], [], tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, null, [], [], tiles.getTilesByType(assets.tile`franceTile`))\n"]]},{"start1":2031,"length1":57,"diffs":[[1,"function addStrategy(country: countryType) {\n"]]},{"start1":2491,"length1":20,"diffs":[[1,""]]},{"start1":3048,"length1":147,"diffs":[[1,""]]},{"start1":4083,"length1":80,"diffs":[[1,"    trade && !war && !peace && !isEnemy\n"]]},{"start1":4126,"length1":126,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":875,"length1":264,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, None, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, None, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n"]]},{"start1":2110,"length1":20,"diffs":[[1,""]]},{"start1":2652,"length1":140,"diffs":[[1,"def declarePeace(country: countryType, enemy: countryType):\n    game.show_long_text(country + \" declares peace with \" + enemy, DialogLayout.BOTTOM)\n    countryIndex = getEnemyIndex(country, enemy)\n    country.enemies.remove_at(countryIndex)\n    enemyIndex = getEnemyIndex(enemy, country)\n    enemy.enemies.remove_at(enemyIndex)\n"]]},{"start1":3977,"length1":130,"diffs":[[1,""]]}]}]},{"timestamp":1750637952749,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":2227,"length1":89,"diffs":[[1,"    game.show_long_text(country + \" declares war on \" + enemy, DialogLayout.BOTTOM)\n"]]}]}]},{"timestamp":1750637958652,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":318,"length1":26,"diffs":[[1,""]]},{"start1":2216,"length1":144,"diffs":[[1,"    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n"]]},{"start1":2636,"length1":92,"diffs":[[1,"    game.showLongText(country + \" declares war on \" + enemy, DialogLayout.Bottom)\n"]]},{"start1":2851,"length1":533,"diffs":[[1,"    game.showLongText(country + \" declares peace with \" + enemy, DialogLayout.Bottom)\n    let countryIndex = getEnemyIndex(country, enemy)\n    country.enemies.removeAt(countryIndex)\n    let enemyIndex = getEnemyIndex(enemy, country)\n    enemy.enemies.removeAt(enemyIndex)\n"]]},{"start1":3192,"length1":88,"diffs":[[1,"    game.showLongText(country + \" trades with \" + enemy, DialogLayout.Bottom)\n"]]},{"start1":3951,"length1":0,"diffs":[[1,"    let war = Math.percentChance(country.strategy.aggressiveness)\n    war && declareWar(country, targetCountry)\n    let peace = Math.percentChance(country.strategy.peacefulness)\n"]]},{"start1":4180,"length1":233,"diffs":[[1,""]]},{"start1":4249,"length1":64,"diffs":[[1,"    let trade = Math.percentChance(country.strategy.trade)\n"]]},{"start1":4431,"length1":48,"diffs":[[1,"game.onUpdateInterval(500, function Germany() {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1807,"length1":144,"diffs":[[1,"    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n"]]},{"start1":2227,"length1":94,"diffs":[[1,"    game.show_long_text(country.name + \" declares war on \" + enemy, DialogLayout.BOTTOM)\n"]]},{"start1":2445,"length1":462,"diffs":[[1,"    game.show_long_text(country + \" declares peace with \" + enemy, DialogLayout.BOTTOM)\n    countryIndex = getEnemyIndex(country, enemy) \n    country.enemies.remove_at(countryIndex)\n    enemyIndex = getEnemyIndex(enemy, country)\n    enemy.enemies.remove_at(enemyIndex)\n"]]},{"start1":2775,"length1":90,"diffs":[[1,"    game.show_long_text(country + \" trades with \" + enemy, DialogLayout.BOTTOM)\n"]]},{"start1":3408,"length1":0,"diffs":[[1,"    war = Math.percent_chance(country.strategy.aggressiveness)\n    war and declareWar(country, targetCountry)\n    peace = Math.percent_chance(country.strategy.peacefulness)\n"]]},{"start1":3628,"length1":232,"diffs":[[1,""]]},{"start1":3703,"length1":61,"diffs":[[1,"    trade = Math.percent_chance(country.strategy.trade)\n"]]},{"start1":3945,"length1":37,"diffs":[[1,"game.on_update_interval(500, Germany)"]]}]}]},{"timestamp":1750638546330,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4907,"length1":42,"diffs":[[1,""]]},{"start1":4942,"length1":31,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4242,"length1":42,"diffs":[[1,""]]},{"start1":4277,"length1":32,"diffs":[[1,""]]}]}]},{"timestamp":1750639022803,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":74,"length1":50,"diffs":[[1,"        \"device\": \"*\"\n"]]}]}]},{"timestamp":1750639892982,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":226,"length1":51,"diffs":[[1,"\n"]]}]}]},{"timestamp":1750640044516,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":226,"length1":1,"diffs":[[1,"mp.is_button_pressed(None, mp.MultiplayerButton.A)\n"]]}]}]},{"timestamp":1750640172174,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":40,"length1":116,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":49,"length1":133,"diffs":[[1,""]]}]}]},{"timestamp":1750640772126,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":148,"length1":222,"diffs":[[1,"    \n"]]},{"start1":156,"length1":0,"diffs":[[1,"let crosshair : Sprite = null\ncrosshair = sprites.create(assets.image`crosshair`, SpriteKind.Player)\ncontroller.moveSprite(crosshair)\nscene.cameraFollowSprite(crosshair)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":92,"length1":29,"diffs":[[1,"    pass\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\ncrosshair: Sprite = None\n"]]},{"start1":208,"length1":81,"diffs":[[1,"crosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n"]]},{"start1":286,"length1":82,"diffs":[[1,"controller.move_sprite(crosshair)\n"]]},{"start1":321,"length1":123,"diffs":[[1,"scene.camera_follow_sprite(crosshair)\n"]]}]}]},{"timestamp":1750641192650,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":287,"length1":39,"diffs":[[1,"    scene.camera_follow_sprite(crosshair)\n"]]}]}]},{"timestamp":1750642967692,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":330,"length1":37,"diffs":[[1,"    scene.cameraFollowSprite(crosshair)\n"]]}]}]},{"timestamp":1750642967954,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":330,"length1":40,"diffs":[[1,"    scene.cameraFollowSprite(player)\n"]]},{"start1":1629,"length1":30,"diffs":[[1,""]]},{"start1":5178,"length1":174,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":287,"length1":48,"diffs":[[1,"    scene.camera_follow_sprite(player)\n"]]},{"start1":1321,"length1":28,"diffs":[[1,""]]},{"start1":4533,"length1":81,"diffs":[[1,"game.on_update_interval(100, Germany)"]]}]}]},{"timestamp":1750643480770,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":979,"length1":175,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, tradePartners: countryType[], enemies: countryType[], tiles: tiles.Location[] = []) {\n"]]},{"start1":5177,"length1":39,"diffs":[[1,"    info.setScore(germany.pop)\n"]]},{"start1":5211,"length1":0,"diffs":[[1,"forever(function on_forever() {\n    let sprite: Sprite;\n    for (let p of players) {\n        sprite = mp.getPlayerSprite(p)\n        scene.cameraFollowSprite(sprite)\n    }\n})\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":330,"length1":1,"diffs":[[1,"    \n"]]},{"start1":686,"length1":183,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tradePartners: List[countryType], enemies: List[countryType], tiles: List[tiles.Location] = []):\n"]]},{"start1":963,"length1":25,"diffs":[[1,""]]},{"start1":4537,"length1":31,"diffs":[[1,"    info.set_score(germany.pop)\n"]]},{"start1":4570,"length1":0,"diffs":[[1,"game.on_update_interval(100, Germany)\n"]]},{"start1":4609,"length1":37,"diffs":[[1,"def on_forever():\n    \nforever(on_forever)"]]}]}]},{"timestamp":1750643833126,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4568,"length1":29,"diffs":[[1,"    if not isAi == 0:\n        \n"]]},{"start1":4601,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1750645878535,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4568,"length1":30,"diffs":[[1,"    if not germanyisAi == 0:\n"]]}]}]},{"timestamp":1750645878735,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4598,"length1":9,"diffs":[[1,""]]},{"start1":4600,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1750645882200,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4568,"length1":8,"diffs":[[1,"    if not germany.isAi == 0:\n        \n"]]}]}]},{"timestamp":1750650042276,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4568,"length1":5,"diffs":[[1,"    if \n"]]}]}]},{"timestamp":1750650042822,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":870,"length1":17,"diffs":[[1,""]]},{"start1":979,"length1":178,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: any, tradePartners: countryType[], enemies: countryType[], tiles: tiles.Location[] = []) {\n"]]},{"start1":1258,"length1":25,"diffs":[[1,""]]},{"start1":1373,"length1":276,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), [], [], tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), [], [], tiles.getTilesByType(assets.tile`franceTile`))\n"]]},{"start1":1707,"length1":31,"diffs":[[1,""]]},{"start1":5188,"length1":0,"diffs":[[1,"    info.player2.setScore(germany.pop)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1096,"length1":270,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n"]]},{"start1":1439,"length1":27,"diffs":[[1,""]]},{"start1":4568,"length1":0,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1750650552440,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":329,"length1":22,"diffs":[[1,""]]},{"start1":330,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1750652255549,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":40,"length1":21,"diffs":[[1,""]]}]}]},{"timestamp":1750652284493,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":40,"length1":0,"diffs":[[1,"mp.isConnected(null)\n"]]},{"start1":1779,"length1":0,"diffs":[[1,"function getPlayer() {\n    \n}\n\n"]]},{"start1":5294,"length1":137,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":329,"length1":0,"diffs":[[1,"mp.is_connected(None)\n"]]},{"start1":1466,"length1":32,"diffs":[[1,"def getPlayer():\n    pass\n"]]},{"start1":4623,"length1":38,"diffs":[[1,""]]},{"start1":4624,"length1":118,"diffs":[[1,"game.on_update_interval(100, Germany)"]]}]}]},{"timestamp":1750652879460,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1758,"length1":114,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1471,"length1":119,"diffs":[[1,""]]}]}]},{"timestamp":1750653478519,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":370,"length1":40,"diffs":[[1,""]]},{"start1":870,"length1":18,"diffs":[[1,"    isAi: number\n"]]},{"start1":947,"length1":21,"diffs":[[1,""]]},{"start1":996,"length1":197,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: number, tradePartners: countryType[], enemies: countryType[], tiles: tiles.Location[] = []) {\n"]]},{"start1":1377,"length1":33,"diffs":[[1,""]]},{"start1":1418,"length1":312,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), 0, [], [], tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), 0, [], [], tiles.getTilesByType(assets.tile`franceTile`))\n"]]},{"start1":1840,"length1":215,"diffs":[[1,"    sprite.tilemapLocation()\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":49,"length1":25,"diffs":[[1,"def on_controller_event_connected(player):\n    crosshair: Sprite = None\n"]]},{"start1":204,"length1":45,"diffs":[[1,""]]},{"start1":329,"length1":48,"diffs":[[1,""]]},{"start1":681,"length1":199,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: int,tradePartners: List[countryType], enemies: List[countryType], tiles: List[tiles.Location] = []):\n"]]},{"start1":1067,"length1":33,"diffs":[[1,""]]},{"start1":1095,"length1":306,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), 0, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), 0, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n"]]},{"start1":1513,"length1":0,"diffs":[[1,"    image = sprite.tilemap_location()\n"]]},{"start1":1581,"length1":171,"diffs":[[1,"        \n"]]}]}]},{"timestamp":1750654077845,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":330,"length1":99,"diffs":[[1,"    scene.cameraFollowSprite(crosshair)\n"]]},{"start1":5716,"length1":24,"diffs":[[1,""]]},{"start1":5745,"length1":169,"diffs":[[1,"        mp.isConnected(p) && mp.isButtonPressed(p, mp.MultiplayerButton.A)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":49,"length1":72,"diffs":[[1,"crosshair: Sprite = None\n"]]},{"start1":157,"length1":0,"diffs":[[1,"def on_controller_event_connected(player):\n\n\n"]]},{"start1":285,"length1":90,"diffs":[[1,"    scene.camera_follow_sprite(crosshair)\n"]]},{"start1":5060,"length1":335,"diffs":[[1,"        mp.is_connected(p) and mp.is_button_pressed(p, mp.MultiplayerButton.A)"]]}]}]},{"timestamp":1750654624661,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5185,"length1":179,"diffs":[[1,"            if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(tiles.get_tile_location(sprite.tilemap_location()))) == country.TrailFactory\n"]]}]}]},{"timestamp":1750678465837,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5185,"length1":178,"diffs":[[1,"            if tiles.tile_at_location_equals(sprite.tilemap_location()m, tiles.tile_image_at_location(tiles.get_tile_location(sprite.tilemap_location()))) == country.TrailFactory\n"]]}]}]},{"timestamp":1750678467112,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5363,"length1":86,"diffs":[[1,"            mp.is_connected(p) and mp.is_button_pressed(p, mp.MultiplayerButton.A)"]]}]}]},{"timestamp":1750821911288,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5185,"length1":16,"diffs":[[1,"            if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(tiles.get_tile_location(sprite.tilemap_location()))) == country.TrailFactory\n"]]}]}]},{"timestamp":1750821946469,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2086,"length1":146,"diffs":[[1,"        if (tiles.tileAtLocationEquals(sprite.tilemapLocation(), tiles.tileImageAtLocation(sprite.tilemapLocation()))) {\n            country.isAi = true\n"]]},{"start1":5828,"length1":56,"diffs":[[1,""]]},{"start1":5908,"length1":247,"diffs":[[1,"            mp.isConnected(p) && mp.isButtonPressed(p, mp.MultiplayerButton.A)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":49,"length1":43,"diffs":[[1,""]]},{"start1":1724,"length1":150,"diffs":[[1,"        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(sprite.tilemap_location())):\n            country.isAi = True\n"]]},{"start1":5110,"length1":53,"diffs":[[1,""]]},{"start1":5185,"length1":228,"diffs":[[1,"            if \n                mp.is_connected(p) and mp.is_button_pressed(p, mp.MultiplayerButton.A)"]]}]}]},{"timestamp":1750822564826,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5145,"length1":48,"diffs":[[1,"        mp.set_player_state(p, chosenCountry, False)\n"]]}]}]},{"timestamp":1750822597009,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":40,"length1":46,"diffs":[[1,""]]},{"start1":5768,"length1":0,"diffs":[[1,"    let sprite: Sprite;\n"]]},{"start1":5821,"length1":87,"diffs":[[1,"        mp.setPlayerState(p, MultiplayerState.score, 0)\n        sprite = mp.getPlayerSprite(p)\n        for (let country of countries) {\n            if (tiles.tileAtLocationEquals(sprite.tilemapLocation(), tiles.tileImageAtLocation(country.tiles[0]))) {\n"]]},{"start1":6191,"length1":0,"diffs":[[1,"            \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5145,"length1":79,"diffs":[[1,"        mp.set_player_state(p, chosenCountry, )\n        sprite = mp.get_player_sprite(p)\n        for country in countries:\n            if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n"]]}]}]},{"timestamp":1750823150718,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":86,"length1":18,"diffs":[[1,""]]},{"start1":2245,"length1":91,"diffs":[[1,""]]},{"start1":5790,"length1":32,"diffs":[[1,"function on_forever() {\n"]]},{"start1":5843,"length1":59,"diffs":[[1,"        while (mp.getPlayerState(p, 0)) {\n"]]},{"start1":5930,"length1":145,"diffs":[[1,"                mp.isConnected(p) && mp.isButtonPressed(p, mp.MultiplayerButton.A) && chooseCountry(p)\n"]]},{"start1":6063,"length1":3,"diffs":[[1,"}\n\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":91,"length1":18,"diffs":[[1,""]]},{"start1":1884,"length1":127,"diffs":[[1,"            country.isAi = False\n            \n"]]},{"start1":5145,"length1":58,"diffs":[[1,"        while mp.get_player_state(p, 0):\n"]]},{"start1":5224,"length1":173,"diffs":[[1,"                mp.is_connected(p) and mp.is_button_pressed(p, mp.MultiplayerButton.A) and chooseCountry(p)"]]}]}]},{"timestamp":1750823784792,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5340,"length1":152,"diffs":[[1,"                mp.is_connected(p) and mp.is_button_pressed(p, mp.MultiplayerButton.A) and mp.set_player_state(p, chosenCountry, 1) and chooseCountry(p)\n"]]}]}]},{"timestamp":1750823787032,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":394,"length1":48,"diffs":[[1,""]]},{"start1":5899,"length1":24,"diffs":[[1,"forever(function on_forever() {\n"]]},{"start1":5960,"length1":230,"diffs":[[1,"        while (mp.getPlayerState(p, chosenCountry) == 0) {\n            for (let country of countries) {\n                mp.isConnected(p) && mp.isButtonPressed(p, mp.MultiplayerButton.A) && mp.setPlayerState(p, chosenCountry, 1) && chooseCountry(p)\n"]]},{"start1":6223,"length1":13,"diffs":[[1,""]]},{"start1":6233,"length1":9,"diffs":[[1,""]]},{"start1":6239,"length1":149,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":348,"length1":51,"diffs":[[1,""]]},{"start1":5244,"length1":394,"diffs":[[1,"        while mp.get_player_state(p, chosenCountry) == 0:\n            for country in countries:\n                mp.is_connected(p) and mp.is_button_pressed(p, mp.MultiplayerButton.A) andmp.set_player_state(p, chosenCountry, 1) and chooseCountry(p)\nforever(on_forever)\n"]]}]}]},{"timestamp":1750824386908,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6285,"length1":0,"diffs":[[1,"mp.onButtonEvent(mp.MultiplayerButton.A, ControllerButtonEvent.Pressed, function on_button_event_a_pressed(player: mp.Player) {\n    chooseCountry\n})\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5529,"length1":0,"diffs":[[1,"def on_button_event_a_pressed(player):\n    chooseCountry()\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n"]]}]}]},{"timestamp":1750825303445,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5529,"length1":148,"diffs":[[1,""]]}]}]},{"timestamp":1750825329443,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2311,"length1":154,"diffs":[[1,"            game.showLongText(player + \" has chosen \" + country.name, DialogLayout.Bottom)\n"]]},{"start1":5947,"length1":267,"diffs":[[1,"function on_forever() {\n    for (let p of players) {\n        if (mp.getPlayerState(p, chosenCountry) == 0) {\n            if (mp.isConnected(p) && mp.isButtonPressed(p, mp.MultiplayerButton.A)) {\n                chooseCountry(p)\n                mp.setPlayerState(p, chosenCountry, 1)\n            }\n            \n        }\n        \n"]]},{"start1":6282,"length1":8,"diffs":[[1,"}\n\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1953,"length1":158,"diffs":[[1,"            game.show_long_text(player + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n"]]},{"start1":2085,"length1":0,"diffs":[[1,"\n"]]},{"start1":5255,"length1":0,"diffs":[[1,"def on_forever():\n    for p in players:\n        if mp.get_player_state(p, chosenCountry) == 0:\n            if mp.is_connected(p) and mp.is_button_pressed(p, mp.MultiplayerButton.A):\n                chooseCountry(p) \n                mp.set_player_state(p, chosenCountry, 1)\n\n"]]},{"start1":5568,"length1":140,"diffs":[[1,"    pass\n"]]}]}]},{"timestamp":1750826532026,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1953,"length1":158,"diffs":[[1,"            game.show_long_text(\"player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n"]]}]}]},{"timestamp":1750826540025,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1099,"length1":19,"diffs":[[1,""]]},{"start1":1229,"length1":218,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1555,"length1":45,"diffs":[[1,""]]},{"start1":1703,"length1":324,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), false, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), false, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\n"]]},{"start1":2311,"length1":154,"diffs":[[1,"            game.showLongText(\"player \" + mp.getPlayerProperty(player, mp.PlayerProperty.Index + 1) + \" has chosen \" + country.name, DialogLayout.Bottom)\n"]]},{"start1":2498,"length1":44,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":889,"length1":224,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool,tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1217,"length1":45,"diffs":[[1,""]]},{"start1":1352,"length1":318,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), False, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), False, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n"]]},{"start1":2111,"length1":77,"diffs":[[1,"            country.isAi = False \n"]]}]}]},{"timestamp":1750827113208,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1099,"length1":0,"diffs":[[1,"    playerSelected\n"]]},{"start1":1248,"length1":197,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, playerSelected: any, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1595,"length1":0,"diffs":[[1,"        this.playerSelected = playerSelected\n"]]},{"start1":1788,"length1":312,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), false, null, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), false, null, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\n"]]},{"start1":2595,"length1":0,"diffs":[[1,"            country.playerSelected = player\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":889,"length1":200,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, playerSelected: player, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1242,"length1":0,"diffs":[[1,"        self.playerSelected = playerSelected\n"]]},{"start1":1422,"length1":306,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), False, None, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), False, None, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n"]]},{"start1":2226,"length1":0,"diffs":[[1,"            country.playerSelected = player\n"]]}]}]},{"timestamp":1750827418819,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":2145,"length1":13,"diffs":[[1,""]]}]}]},{"timestamp":1750891419705,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":2145,"length1":21,"diffs":[[1,"            \n"]]}]}]},{"timestamp":1750891422761,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1229,"length1":25,"diffs":[[1,""]]},{"start1":2498,"length1":89,"diffs":[[1,""]]},{"start1":2636,"length1":49,"diffs":[[1,"function popGain(country: countryType) {\n"]]},{"start1":2722,"length1":23,"diffs":[[1,""]]},{"start1":5930,"length1":31,"diffs":[[1,"    popGain(germany)\n"]]},{"start1":6007,"length1":335,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2145,"length1":91,"diffs":[[1,"            country \n"]]},{"start1":2353,"length1":23,"diffs":[[1,""]]},{"start1":5223,"length1":27,"diffs":[[1,"    popGain(germany)\n"]]},{"start1":5300,"length1":346,"diffs":[[1,""]]}]}]},{"timestamp":1750892054741,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5745,"length1":26,"diffs":[[1,"\n"]]}]}]},{"timestamp":1750892062955,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6162,"length1":193,"diffs":[[1,"    let p = germany.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.One) : (germany.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Two) : (germany.playerChosen == 3 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n    germany.isAi && mp.setPlayerState(p, MultiplayerState.score, pop)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5399,"length1":199,"diffs":[[1,"    p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 3 else mp.player_selector(mp.PlayerNumber.FOUR)\n    germany.isAi and mp.set_player_state(p, MultiplayerState.score, pop)\ninfo.player1.set_score(0)\n"]]}]}]},{"timestamp":1750892232834,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5549,"length1":133,"diffs":[[1,"    info.player1.set_score(pop) and germany.isAi\n"]]}]}]},{"timestamp":1750900654724,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5549,"length1":49,"diffs":[[1,"    info.player1.set_score(pop) and germany.isAimp.get_player_state(mp.player_selector(mp.PlayerNumber.ONE), MultiplayerState.score)\n"]]}]}]},{"timestamp":1750900670143,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6162,"length1":0,"diffs":[[1,"    let p = germany.playerChosen == 1 ? \"player1\" : (germany.playerChosen == 2 ? \"player2\" : (germany.playerChosen == 3 ? \"player3\" : \"player4\"))\n    info.player1.setScore(pop) && germany.isAi\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5399,"length1":5,"diffs":[[1,"    p = \"player1\" if germany.playerChosen == 1 else \"player2\" if germany.playerChosen == 2 else \"player3\" if germany.playerChosen == 3 else \"player4\"\n    info.player1.set_score(pop) and germany.isAi\n"]]}]}]},{"timestamp":1750901975735,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4798,"length1":66,"diffs":[[1,"    war = Math.percent_chance(country.strategy.aggressiveness / 10)\n"]]}]}]},{"timestamp":1750905868905,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4798,"length1":67,"diffs":[[1,"    war = Math.percent_chance(country.strategy.aggressiveness / )\n"]]}]}]},{"timestamp":1750905869095,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1728,"length1":310,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), false, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), false, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\n"]]},{"start1":5538,"length1":71,"diffs":[[1,"    let war = Math.percentChance(country.strategy.aggressiveness / 10)\n"]]},{"start1":5700,"length1":71,"diffs":[[1,"    let peace = Math.percentChance(country.strategy.peacefulness / 10)\n"]]},{"start1":5840,"length1":64,"diffs":[[1,"    let trade = Math.percentChance(country.strategy.trade / 10)\n"]]},{"start1":6162,"length1":131,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1353,"length1":304,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), False, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), False, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n"]]},{"start1":4798,"length1":68,"diffs":[[1,"    war = Math.percent_chance(country.strategy.aggressiveness / 5)\n"]]},{"start1":4961,"length1":68,"diffs":[[1,"    peace = Math.percent_chance(country.strategy.peacefulness / 10)\n"]]},{"start1":5104,"length1":61,"diffs":[[1,"    trade = Math.percent_chance(country.strategy.trade / 10)\n"]]},{"start1":5398,"length1":123,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1750906147075,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5422,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1750908307666,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5422,"length1":10,"diffs":[[1,"        \n"]]}]}]},{"timestamp":1750908309215,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6073,"length1":16,"diffs":[[1,""]]},{"start1":6185,"length1":323,"diffs":[[1,"        mp.setPlayerState(mp.playerSelector(mp.PlayerNumber.One), MultiplayerState.score, pop)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5422,"length1":337,"diffs":[[1,"        p\n        mp.set_player_state(mp.player_selector(mp.PlayerNumber.ONE), MultiplayerState.score, pop)\n"]]}]}]},{"timestamp":1750909727073,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5422,"length1":126,"diffs":[[1,"        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 3 else mp.player_selector(mp.PlayerNumber.FOUR)\n"]]}]}]},{"timestamp":1750909741086,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6201,"length1":265,"diffs":[[1,"        p = germany.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.One) : (germany.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Two) : (germany.playerChosen == 3 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5422,"length1":277,"diffs":[[1,"        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 1else mp.player_selector(mp.PlayerNumber.FOUR)\n"]]}]}]},{"timestamp":1750910300359,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5985,"length1":45,"diffs":[[1,""]]},{"start1":6089,"length1":36,"diffs":[[1,""]]},{"start1":6176,"length1":44,"diffs":[[1,""]]},{"start1":6535,"length1":113,"diffs":[[1,""]]},{"start1":6666,"length1":168,"diffs":[[1,"    if (mp.getPlayerState(player, chosenCountry) == 0) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5258,"length1":41,"diffs":[[1,""]]},{"start1":5397,"length1":38,"diffs":[[1,""]]},{"start1":5759,"length1":97,"diffs":[[1,""]]},{"start1":5837,"length1":170,"diffs":[[1,"    if mp.get_player_state(player, chosenCountry) == 0:\n"]]}]}]},{"timestamp":1750910863089,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6954,"length1":126,"diffs":[[1,"    if (mp.getPlayerState(player, chosenCountry) == 0 && tiles.tileImageAtLocation(playerSprite.tilemapLocation())) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":6061,"length1":130,"diffs":[[1,"    if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()):\n"]]}]}]},{"timestamp":1750911425315,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6954,"length1":295,"diffs":[[1,"    if (mp.getPlayerState(player, chosenCountry) == 0 && tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == null) {\n        chooseCountry(player)\n        mp.setPlayerState(player, chosenCountry, 1)\n"]]},{"start1":7168,"length1":0,"diffs":[[1,"    \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":6061,"length1":281,"diffs":[[1,"    if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == None:\n        chooseCountry(player)\n        mp.set_player_state(player, chosenCountry, 1)\n"]]}]}]},{"timestamp":1750912028557,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6091,"length1":142,"diffs":[[1,"        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == assets.tile(\"\"\"germanTile\"\"\"):\n"]]}]}]},{"timestamp":1750912036403,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1725,"length1":136,"diffs":[[1,""]]},{"start1":6991,"length1":148,"diffs":[[1,"        if (mp.getPlayerState(player, chosenCountry) == 0 && tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == assets.tile`germanTile`) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1352,"length1":122,"diffs":[[1,""]]},{"start1":6091,"length1":152,"diffs":[[1,"        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == assets.tile):\n"]]}]}]},{"timestamp":1750912632543,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6121,"length1":203,"diffs":[[1,"function war(country: countryType) {\n"]]},{"start1":6166,"length1":272,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5380,"length1":171,"diffs":[[1,"def war(country: countryType):\n    pass\n"]]},{"start1":5421,"length1":279,"diffs":[[1,""]]}]}]},{"timestamp":1750913232511,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5672,"length1":71,"diffs":[[1,"    let war = Math.percentChance(country.strategy.aggressiveness / 50)\n"]]},{"start1":5834,"length1":72,"diffs":[[1,"    let peace = Math.percentChance(country.strategy.peacefulness / 50)\n"]]},{"start1":5974,"length1":65,"diffs":[[1,"    let trade = Math.percentChance(country.strategy.trade / 50)\n"]]},{"start1":6257,"length1":60,"diffs":[[1,"        tiles.setTileAt(tiles.getTileLocation(0, 0), img` `)\n"]]},{"start1":6397,"length1":35,"diffs":[[1,""]]},{"start1":6435,"length1":555,"diffs":[[1,"        tiles.tileImageAtLocation(tile.getNeighboringLocation(CollisionDirection.Left)) == targetCountry.getTileImage() && battle(country, targetCountry, tile)\n"]]},{"start1":7336,"length1":36,"diffs":[[1,""]]},{"start1":7565,"length1":164,"diffs":[[1,"        if (mp.getPlayerState(player, chosenCountry) == 0 && tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == country.getTileImage()) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4918,"length1":68,"diffs":[[1,"    war = Math.percent_chance(country.strategy.aggressiveness / 50)\n"]]},{"start1":5082,"length1":69,"diffs":[[1,"    peace = Math.percent_chance(country.strategy.peacefulness / 50)\n"]]},{"start1":5225,"length1":62,"diffs":[[1,"    trade = Math.percent_chance(country.strategy.trade / 50)\n"]]},{"start1":5509,"length1":62,"diffs":[[1,"        tiles.set_tile_at(, img(\"\"\" \"\"\"))\n"]]},{"start1":5642,"length1":525,"diffs":[[1,"        tiles.tile_image_at_location(tile.get_neighboring_location(CollisionDirection.LEFT)) == targetCountry.getTileImage():\n            \n            battle(country, targetCountry, tile)\n"]]},{"start1":6467,"length1":36,"diffs":[[1,""]]},{"start1":6623,"length1":169,"diffs":[[1,"        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage():\n"]]}]}]},{"timestamp":1750913827797,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6202,"length1":41,"diffs":[[1,"    let attack = Math.percentChance(1)\n"]]},{"start1":6259,"length1":54,"diffs":[[1,"        tiles.setTileAt(tile, targetCountry.getTileImage())\n"]]},{"start1":7703,"length1":43,"diffs":[[1,"        targetCountry = germany.enemies[randint(0, enemyIndex)]\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5460,"length1":38,"diffs":[[1,"    attack = Math.percent_chance(1)\n"]]},{"start1":5511,"length1":56,"diffs":[[1,"        tiles.set_tile_at(tile, targetCountry.getTileImage())\n"]]},{"start1":6762,"length1":43,"diffs":[[1,"        targetCountry = germany.enemies[randint(0, enemyIndex)]\n"]]}]}]},{"timestamp":1752533467617,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6876,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1752533520408,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6467,"length1":124,"diffs":[[1,"        if (tiles.tileImageAtLocation(tile.getNeighboringLocation(CollisionDirection.Left)) == targetCountry.getTileImage()) {\n"]]},{"start1":7792,"length1":711,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5660,"length1":126,"diffs":[[1,"        if tiles.tile_image_at_location(tile.get_neighboring_location(CollisionDirection.LEFT)) == targetCountry.getTileImage():\n"]]},{"start1":6837,"length1":603,"diffs":[[1,""]]},{"start1":6875,"length1":37,"diffs":[[1,""]]},{"start1":6876,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1752534092257,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6467,"length1":126,"diffs":[[1,"        if (tiles.tileAtLocationEquals(tile.getNeighboringLocation(CollisionDirection.Left), targetCountry.getTileImage)) {\n"]]},{"start1":6741,"length1":127,"diffs":[[1,"        if (tiles.tileImageAtLocation(tile.getNeighboringLocation(CollisionDirection.Left)) == targetCountry.getTileImage()) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5660,"length1":128,"diffs":[[1,"        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage):\n"]]},{"start1":5919,"length1":129,"diffs":[[1,"        if tiles.tile_image_at_location(tile.get_neighboring_location(CollisionDirection.LEFT)) == targetCountry.getTileImage():\n"]]}]}]},{"timestamp":1752534640256,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5834,"length1":74,"diffs":[[1,"    let peace = Math.percentChance(country.strategy.peacefulness / 500)\n"]]},{"start1":5975,"length1":67,"diffs":[[1,"    let trade = Math.percentChance(country.strategy.trade / 500)\n"]]},{"start1":6123,"length1":84,"diffs":[[1,"function battle(country: countryType, targetCountry: countryType, tile: any) {\n"]]},{"start1":6261,"length1":59,"diffs":[[1,"        tiles.setTileAt(tile, country.getTileImage())\n"]]},{"start1":8373,"length1":80,"diffs":[[1,"    if (france.enemies.length > 0) {\n        targetCountry = germany.enemies[0]\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5082,"length1":71,"diffs":[[1,"    peace = Math.percent_chance(country.strategy.peacefulness / 500)\n"]]},{"start1":5226,"length1":64,"diffs":[[1,"    trade = Math.percent_chance(country.strategy.trade / 500)\n"]]},{"start1":5382,"length1":83,"diffs":[[1,"def battle(country: countryType, targetCountry: countryType, tile: location):\n"]]},{"start1":5513,"length1":61,"diffs":[[1,"        tiles.set_tile_at(tile, country.getTileImage())\n"]]},{"start1":7327,"length1":75,"diffs":[[1,"    if len(france.enemies) > 0:\n        targetCountry = germany.enemies[0]\n"]]}]}]},{"timestamp":1752535228214,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1208,"length1":0,"diffs":[[1,"    tileImage: Image\n"]]},{"start1":2774,"length1":0,"diffs":[[1,"function getTileImage(country: countryType) {\n    country.tileImage = tiles.getTileImage(country.tiles[0])\n}\n\n"]]},{"start1":4250,"length1":28,"diffs":[[1,""]]},{"start1":4280,"length1":0,"diffs":[[1,"    let enemyIndex: number;\n"]]},{"start1":4466,"length1":194,"diffs":[[1,"        countryIndex = getEnemyIndex(country, enemy)\n        country.enemies.removeAt(countryIndex)\n        enemyIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.removeAt(enemyIndex)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2356,"length1":0,"diffs":[[1,"    \ndef getTileImage(country: countryType):\n    country.tileImage = tiles.get_tile_image(country.tiles[0])\n"]]},{"start1":3859,"length1":197,"diffs":[[1,"        countryIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(countryIndex)\n        enemyIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(enemyIndex)\n"]]}]}]},{"timestamp":1752535431943,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5345,"length1":49,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4651,"length1":49,"diffs":[[1,""]]}]}]},{"timestamp":1752536139362,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5584,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1752542381154,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5584,"length1":7,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1752542381445,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6247,"length1":37,"diffs":[[1,""]]},{"start1":6326,"length1":36,"diffs":[[1,""]]},{"start1":6525,"length1":133,"diffs":[[1,"            enemyTile = tile.getNeighboringLocation(CollisionDirection.Left)\n            battle(country, targetCountry, enemyTile)\n"]]},{"start1":6880,"length1":55,"diffs":[[1,"            battle(country, targetCountry, enemyTile)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4743,"length1":331,"diffs":[[1,""]]},{"start1":5525,"length1":41,"diffs":[[1,""]]},{"start1":5584,"length1":0,"diffs":[[1,"    en\n"]]},{"start1":5750,"length1":135,"diffs":[[1,"            enemyTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, enemyTile)\n"]]},{"start1":6092,"length1":55,"diffs":[[1,"            battle(country, targetCountry, enemyTile)\n"]]}]}]},{"timestamp":1752542934241,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5464,"length1":322,"diffs":[[1,""]]},{"start1":6247,"length1":54,"diffs":[[1,"        targetCountry.tiles.removeAt\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4743,"length1":81,"diffs":[[1,"def getTileIndex(targetCountry: countryType, targetTile: tiles.Location):\n"]]},{"start1":4831,"length1":0,"diffs":[[1,"    returnIndex = 0\n"]]},{"start1":4888,"length1":125,"diffs":[[1,"        if tile.x == targetTile.x and tile.y == targetTile.y:\n            returnIndex = index\n            return returnIndex\n            break\n"]]},{"start1":5050,"length1":13,"diffs":[[1,"    return returnIndex\n"]]},{"start1":5855,"length1":54,"diffs":[[1,""]]},{"start1":5856,"length1":0,"diffs":[[1,"        targetCountry.tiles.remove_at()\n\n"]]}]}]},{"timestamp":1752543454156,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1840,"length1":336,"diffs":[[1,""]]},{"start1":5464,"length1":0,"diffs":[[1,"function removeTileFromArray(targetCountry: countryType, targetTile: tiles.Location) {\n    let index = 0\n    for (let tile of targetCountry.tiles) {\n        if (tile.row == targetTile.row && tile.column == targetTile.column) {\n            targetCountry.tiles.removeAt(index)\n        }\n        \n        index += 1\n    }\n}\n\n"]]},{"start1":6569,"length1":46,"diffs":[[1,"        removeTileFromArray(targetCountry, enemyTile)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1474,"length1":304,"diffs":[[1,""]]},{"start1":4743,"length1":0,"diffs":[[1,"def removeTileFromArray(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n            \n\n"]]},{"start1":5814,"length1":46,"diffs":[[1,"        removeTileFromArray(targetCountry, enemyTile)\n"]]}]}]},{"timestamp":1752544091245,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1479,"length1":44,"diffs":[[1,"    def getTileIndex(self, targetTile: tiles.Location):\n"]]}]}]},{"timestamp":1752544093281,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1840,"length1":52,"diffs":[[1,"    public getTileIndex(targetTile: tiles.Location) {\n"]]},{"start1":1955,"length1":46,"diffs":[[1,"            if (tile.row == targetTile.row && tile.column == targetTile.column) {\n"]]},{"start1":2080,"length1":22,"diffs":[[1,""]]},{"start1":2176,"length1":310,"diffs":[[1,""]]},{"start1":6583,"length1":79,"diffs":[[1,"        targetCountry.getTileIndex(enemyTile)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1479,"length1":54,"diffs":[[1,"    def (self, targetTile: tiles.Location):\n"]]},{"start1":1581,"length1":47,"diffs":[[1,"                if tile.row == targetTile.row and tile.column == targetTile.column:\n"]]},{"start1":1713,"length1":26,"diffs":[[1,""]]},{"start1":1766,"length1":254,"diffs":[[1,""]]},{"start1":5816,"length1":79,"diffs":[[1,"        targetCountry.getTileIndex(enemyTile)\n"]]}]}]},{"timestamp":1752544695483,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1871,"length1":39,"diffs":[[1,"            if tile == targetTile:\n"]]}]}]},{"timestamp":1752544701248,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2270,"length1":46,"diffs":[[1,"            if (tile == targetTile) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1871,"length1":43,"diffs":[[1,"            if tile.row == targetTile:\n"]]}]}]},{"timestamp":1752544707239,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1533,"length1":204,"diffs":[[1,"            index = 0\n            for tile in self.tiles:\n                if tile.row == targetTile.row:\n                    self.tiles.remove_at(index)\n                    break\n                else:\n                    index += 1\n"]]}]}]},{"timestamp":1752550627385,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1932,"length1":17,"diffs":[[1,"                break\n"]]}]}]},{"timestamp":1752550640634,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1840,"length1":0,"diffs":[[1,"    public removeTile(targetTile: tiles.Location) {\n        let index = 0\n        for (let tile of this.tiles) {\n            if (tile.row == targetTile.row) {\n                this.tiles.removeAt(index)\n                break\n            } else {\n                index += 1\n            }\n            \n        }\n    }\n    \n    public addTile(targetTile: tiles.Location) {\n        let index = 0\n        for (let tile of this.tiles) {\n            if (tile.row == targetTile.row) {\n                this.tiles.push(targetTile)\n                break\n            } else {\n                index += 1\n            }\n            \n        }\n    }\n    \n"]]},{"start1":6885,"length1":150,"diffs":[[1,"        country.addTile(enemyTile)\n        targetCountry.removeTile(enemyTile)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1474,"length1":0,"diffs":[[1,"    \n    def removeTile(self, targetTile: tiles.Location):\n        index = 0\n        for tile in self.tiles:\n            if tile.row == targetTile.row:\n                self.tiles.remove_at(index)\n                break\n            else:\n                index += 1\n    \n    def addTile(self, targetTile: tiles.Location):\n        index = 0\n        for tile in self.tiles:\n            if tile.row == targetTile.row:\n                self.tiles.append(targetTile)\n                \n            else:\n                index += 1\n"]]},{"start1":6044,"length1":156,"diffs":[[1,"        country.addTile(enemyTile)\n        targetCountry.removeTile(enemyTile)\n"]]}]}]},{"timestamp":1752551316691,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1385,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1752551407330,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6188,"length1":202,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1385,"length1":0,"diffs":[[1,"        \n"]]},{"start1":5472,"length1":168,"diffs":[[1,""]]}]}]},{"timestamp":1752552075254,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1474,"length1":26,"diffs":[[1,""]]}]}]},{"timestamp":1752552234010,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1840,"length1":310,"diffs":[[1,""]]},{"start1":6045,"length1":95,"diffs":[[1,"function battle(country: countryType, targetCountry: countryType, enemyTile: any) {\n"]]},{"start1":6188,"length1":0,"diffs":[[1,"        for (let countryTiles of country.tiles) {\n            country.tiles.pop()\n        }\n        for (let targetCountryTiles of targetCountry.tiles) {\n            targetCountry.tiles.pop()\n        }\n"]]},{"start1":6449,"length1":60,"diffs":[[1,"        country.tiles = tiles.getTilesByType(country.getTileImage())\n        targetCountry.tiles = tiles.getTilesByType(targetCountry.getTileImage())\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1479,"length1":236,"diffs":[[1,"    def getTileIndex\n"]]},{"start1":5353,"length1":89,"diffs":[[1,"def battle(country: countryType, targetCountry: countryType, enemyTile: location):\n"]]},{"start1":5489,"length1":0,"diffs":[[1,"        for countryTiles in country.tiles:\n            country.tiles.pop()\n        for targetCountryTiles in targetCountry.tiles:\n            targetCountry.tiles.pop()\n"]]},{"start1":5718,"length1":69,"diffs":[[1,"        country.tiles = tiles.get_tiles_by_type(country.getTileImage())\n        targetCountry.tiles = tiles.get_tiles_by_type(targetCountry.getTileImage())\n"]]}]}]},{"timestamp":1752619367299,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6500,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1752619444146,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7422,"length1":38,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1479,"length1":54,"diffs":[[1,"    def removeTile(self, row, column):\n"]]},{"start1":1568,"length1":80,"diffs":[[1,"            if tile.row == row and tile.column == column:\n"]]},{"start1":5771,"length1":47,"diffs":[[1,"        country.removeTile(enemyTile.row, enemyTile.column)\n"]]},{"start1":6499,"length1":38,"diffs":[[1,""]]},{"start1":6500,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1752620043713,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1840,"length1":52,"diffs":[[1,"    public removeTile(row: number, column: number) {\n"]]},{"start1":1954,"length1":82,"diffs":[[1,"            if (tile.row == row && tile.column == column) {\n"]]},{"start1":6568,"length1":38,"diffs":[[1,"        country.removeTile(enemyTile.row, enemyTile.column)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5808,"length1":38,"diffs":[[1,"        country.removeTile(, enemyTile.column)\n"]]}]}]},{"timestamp":1752620748583,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5808,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1752620762270,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6589,"length1":0,"diffs":[[1,"        country.removeTile(enemyTile)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5817,"length1":0,"diffs":[[1,"        country.removeTile(enemyTile)\n        \n"]]}]}]},{"timestamp":1752620824514,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1479,"length1":63,"diffs":[[1,"    def removeTile(self, targetTile: tiles.Location):\n"]]}]}]},{"timestamp":1752621427771,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1479,"length1":65,"diffs":[[1,"    def removeTile(self: country, targetTile: tiles.Location):\n"]]}]}]},{"timestamp":1752621428128,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2171,"length1":284,"diffs":[[1,""]]},{"start1":6589,"length1":95,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1479,"length1":67,"diffs":[[1,"    def removeTile(self: countryTy, targetTile: tiles.Location):\n"]]},{"start1":1763,"length1":249,"diffs":[[1,""]]},{"start1":5819,"length1":76,"diffs":[[1,""]]}]}]},{"timestamp":1752622169167,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1866,"length1":13,"diffs":[[1,""]]}]}]},{"timestamp":1752622229911,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2078,"length1":0,"diffs":[[1,"                break\n"]]},{"start1":2385,"length1":0,"diffs":[[1,"                break\n"]]},{"start1":6873,"length1":79,"diffs":[[1,"        if (enemyTile !== null) {\n            country.removeTile(enemyTile)\n        }\n        \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1720,"length1":0,"diffs":[[1,"                break\n"]]},{"start1":1866,"length1":0,"diffs":[[1,"            \n"]]},{"start1":2005,"length1":0,"diffs":[[1,"                break\n"]]},{"start1":6083,"length1":79,"diffs":[[1,"        if enemyTile is not None:\n            country.removeTile(enemyTile)\n"]]}]}]},{"timestamp":1752622739850,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1840,"length1":0,"diffs":[[1,"    public removeTile(targetTile: tiles.Location) {\n        let index = 1\n        for (let tile of this.tiles) {\n            if (tile.row == targetTile.row && tile.column == targetTile.column) {\n                this.tiles.removeAt(index)\n            }\n            \n            index += 1\n        }\n    }\n    \n    public addTile(targetTile: tiles.Location) {\n        for (let tile of this.tiles) {\n            if (tile.row == targetTile.row && tile.column == targetTile.column) {\n                this.tiles.push(targetTile)\n            }\n            \n        }\n    }\n    \n"]]},{"start1":6035,"length1":345,"diffs":[[1,""]]},{"start1":6829,"length1":45,"diffs":[[1,"        targetCountry.removeTile(enemyTile)\n        country.addTile(enemyTile)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1474,"length1":0,"diffs":[[1,"    \n    def removeTile(self: countryType, targetTile: tiles.Location):\n        index = 1\n        for tile in self.tiles:\n            if tile.row == targetTile.row and tile.column == targetTile.column:\n                self.tiles.remove_at(index)\n            index += 1\n    \n    def addTile(self: countryType, targetTile: tiles.Location):\n        for tile in self.tiles:\n            if tile.row == targetTile.row and tile.column == targetTile.column:\n                self.tiles.append(targetTile)\n"]]},{"start1":5239,"length1":262,"diffs":[[1,""]]},{"start1":6026,"length1":45,"diffs":[[1,"        targetCountry.removeTile(enemyTile)\n        country.addTile(enemyTile)\n"]]}]}]},{"timestamp":1752623348278,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4930,"length1":43,"diffs":[[1,"            returnIndex = index\n"]]},{"start1":4981,"length1":11,"diffs":[[1,"    return returnIndex\n"]]}]}]},{"timestamp":1752623380580,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5464,"length1":130,"diffs":[[1,"function removeTile(country: countryType, targetTile: tiles.Location): number {\n    let returnIndex: number;\n"]]},{"start1":5629,"length1":114,"diffs":[[1,"        if (tile.row == targetTile.row && tile.column == targetTile.column) {\n            returnIndex = index\n"]]},{"start1":5783,"length1":0,"diffs":[[1,"    return returnIndex\n"]]},{"start1":6603,"length1":67,"diffs":[[1,"        removeTile(targetCountry, enemyTile)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4743,"length1":63,"diffs":[[1,"def removeTile(country: countryType, targetTile: tiles.Location):\n"]]},{"start1":4854,"length1":112,"diffs":[[1,"        if tile.row == targetTile.row and tile.column == targetTile.column:\n            return index\n            break\n"]]},{"start1":4992,"length1":0,"diffs":[[1,"    return\n"]]},{"start1":5791,"length1":67,"diffs":[[1,"        removeTile(targetCountry, enemyTile)\n"]]}]}]},{"timestamp":1752623987287,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4903,"length1":13,"diffs":[[1,"        if True:\n"]]}]}]},{"timestamp":1752623993551,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5702,"length1":58,"diffs":[[1,"        if (true) {\n"]]},{"start1":6860,"length1":196,"diffs":[[1,"        if (tiles.tileAtLocationEquals(tile.getNeighboringLocation(CollisionDirection.Left), targetCountry.getTileImage())) {\n            targetTile = tile.getNeighboringLocation(CollisionDirection.Left)\n"]]},{"start1":7138,"length1":122,"diffs":[[1,"        if (tiles.tileAtLocationEquals(tile.getNeighboringLocation(CollisionDirection.Right), targetCountry.getTileImage())) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4903,"length1":56,"diffs":[[1,"        if :\n"]]},{"start1":5933,"length1":200,"diffs":[[1,"        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n"]]},{"start1":6196,"length1":124,"diffs":[[1,"        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n"]]}]}]},{"timestamp":1752624647413,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6231,"length1":125,"diffs":[[1,"        if tiles.tile_at_location_equals(tiles.get_tile_location(tile.row + 1, tile.column), targetCountry.getTileImage()):\n"]]}]}]},{"timestamp":1752624647875,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5464,"length1":78,"diffs":[[1,"function removeTile(country: countryType, targetRow: number, targetColumn: number) {\n    let row: number;\n    let column: number;\n"]]},{"start1":5612,"length1":170,"diffs":[[1,"    for (let tile of country.tiles) {\n        row = tile.row\n        column = tile.column\n        if (row == targetRow && column == targetColumn) {\n            country.tiles.removeAt(index)\n"]]},{"start1":5849,"length1":107,"diffs":[[1,""]]},{"start1":6525,"length1":61,"diffs":[[1,"    let attack = Math.percentChance(100)\n"]]},{"start1":6584,"length1":107,"diffs":[[1,""]]},{"start1":6643,"length1":81,"diffs":[[1,"        removeTile(targetCountry, enemyTile.row, enemyTile.column)\n"]]},{"start1":6825,"length1":0,"diffs":[[1,"    let enemyTile: tiles.Location;\n"]]},{"start1":6898,"length1":204,"diffs":[[1,"        if (tiles.tileAtLocationEquals(tiles.getTileLocation(tile.row - 1, tile.column), targetCountry.getTileImage())) {\n            targetTile = tiles.getTileLocation(tile.row - 1, tile.column)\n"]]},{"start1":7168,"length1":206,"diffs":[[1,"        if (tiles.tileAtLocationEquals(tiles.getTileLocation(tile.row + 1, tile.column), targetCountry.getTileImage())) {\n            enemyTile = tile.getNeighboringLocation(CollisionDirection.Right)\n"]]},{"start1":7442,"length1":558,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4743,"length1":72,"diffs":[[1,"def removeTile(country: countryType, targetRow, targetColumn):\n"]]},{"start1":4820,"length1":162,"diffs":[[1,"    for tile in country.tiles:\n        row = tile.row\n        column = tile.column\n        if row == targetRow and column == targetColumn:\n            country.tiles.remove_at(index)\n"]]},{"start1":5022,"length1":101,"diffs":[[1,""]]},{"start1":5695,"length1":36,"diffs":[[1,"    attack = Math.percent_chance(100)\n"]]},{"start1":5748,"length1":85,"diffs":[[1,""]]},{"start1":5809,"length1":81,"diffs":[[1,"        removeTile(targetCountry, enemyTile.row, enemyTile.column)\n"]]},{"start1":5976,"length1":208,"diffs":[[1,"        if tiles.tile_at_location_equals(tiles.get_tile_location(tile.row - 1, tile.column), targetCountry.getTileImage()):\n            targetTile = tiles.get_tile_location(tile.row - 1, tile.column)\n"]]},{"start1":6231,"length1":210,"diffs":[[1,"        if tiles.tile_at_location_equals(tiles.get_tile_location(tile.row + 1, tile.column ), targetCountry.getTileImage()):\n            enemyTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n"]]},{"start1":6491,"length1":528,"diffs":[[1,""]]}]}]},{"timestamp":1752625244657,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6727,"length1":169,"diffs":[[1,""]]},{"start1":6746,"length1":0,"diffs":[[1,"        tiles.setTileAt(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        addTile(country, enemyTile)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5921,"length1":168,"diffs":[[1,"        tiles.set_tile_at(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        addTile(country, enemyTile)\n"]]}]}]},{"timestamp":1752625435867,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"images.g.jres","patch":[{"start1":599,"length1":299,"diffs":[[1,""]]}]}]},{"timestamp":1752631498239,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"images.g.ts","patch":[{"start1":1358,"length1":597,"diffs":[[1,""]]}]}]},{"timestamp":1752631498291,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6560,"length1":108,"diffs":[[1,"    let roll: number;\n    let attack = Math.percentChance(1)\n"]]},{"start1":6639,"length1":85,"diffs":[[1,"        roll = randint(1, 100)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5785,"length1":90,"diffs":[[1,"    attack = Math.percent_chance(1)\n"]]},{"start1":5836,"length1":89,"diffs":[[1,"        roll = randint(1, 100)\n"]]}]},{"type":"edited","filename":"images.g.jres","patch":[{"start1":858,"length1":38,"diffs":[[1,"        \"displayName\": \"myImage\"\n"]]}]},{"type":"edited","filename":"images.g.ts","patch":[{"start1":1385,"length1":44,"diffs":[[1,"            case \"myImage\":return img`\n"]]}]}]},{"timestamp":1752632218351,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5392,"length1":72,"diffs":[[1,"    peace = Math.percent_chance(country.strategy.peacefulness / 50000)\n"]]}]}]},{"timestamp":1752632255632,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":692,"length1":0,"diffs":[[1,"    aggressivness: number\n"]]},{"start1":3413,"length1":83,"diffs":[[1,"    strategy.peacefulness = randint(1, 100) / strategy.aggressiveness * 10\n    strategy.trading = randint(1, 100) / strategy.aggressivness * 10\n"]]},{"start1":4177,"length1":77,"diffs":[[1,"    let accept = Math.percentChance(50)\n"]]},{"start1":6010,"length1":75,"diffs":[[1,"    let war = Math.percentChance(country.strategy.aggressiveness / 10)\n"]]},{"start1":6172,"length1":129,"diffs":[[1,"    let peace = Math.percentChance(country.strategy.peacefulness / 50000)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2893,"length1":83,"diffs":[[1,"    strategy.peacefulness = randint(1, 100) / strategy.aggressiveness * 10\n    strategy.trading = randint(1, 100) / strategy.aggressivness * 10\n"]]},{"start1":3597,"length1":78,"diffs":[[1,"    accept = Math.percent_chance(50)\n"]]},{"start1":5228,"length1":77,"diffs":[[1,"    war = Math.percent_chance(country.strategy.aggressiveness / 10)\n"]]},{"start1":5392,"length1":132,"diffs":[[1,"    peace = Math.percent_chance(country.strategy.peacefulness / 50000))\n"]]}]}]},{"timestamp":1752632854373,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5960,"length1":82,"diffs":[[1,"    let war = Math.percentChance(country.strategy.aggressiveness / 100000)\n"]]},{"start1":6126,"length1":66,"diffs":[[1,"    let peace = Math.percentChance(country.strategy.peacefulness / 100000 + (country.pop / 100000 - targetCountry.pop / 100000))\n"]]},{"start1":6324,"length1":59,"diffs":[[1,"    let trade = Math.percentChance(country.strategy.trade / 50000)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5208,"length1":79,"diffs":[[1,"    war = Math.percent_chance((country.strategy.aggressiveness / 100000) - )\n"]]},{"start1":5381,"length1":63,"diffs":[[1,"    peace = Math.percent_chance((country.strategy.peacefulness / 100000) + ((country.pop / 100000) - (targetCountry.pop / 100000)))\n"]]},{"start1":5588,"length1":56,"diffs":[[1,"    trade = Math.percent_chance(country.strategy.trade / 50000)\n"]]}]}]},{"timestamp":1752633444954,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4090,"length1":40,"diffs":[[1,"    let accept = Math.percentChance(country.pop / 10000 - enemy.pop / 10000)\n"]]},{"start1":5960,"length1":178,"diffs":[[1,"    let war = Math.percentChance(country.strategy.aggressiveness * 0.00000000001)\n    war && !isEnemy && !(country.enemies.length > 0) && declareWar(country, targetCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":3536,"length1":37,"diffs":[[1,"    accept = Math.percent_chance((country.pop / 10000) - (enemy.pop / 10000))\n"]]},{"start1":5208,"length1":183,"diffs":[[1,"    war = Math.percent_chance(country.strategy.aggressiveness * 0.00000000001)\n    war and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n"]]}]}]},{"timestamp":1752636333251,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5249,"length1":99,"diffs":[[1,"    war > 49 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n"]]}]}]},{"timestamp":1752637043623,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5249,"length1":101,"diffs":[[1,"    war >  and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n"]]}]}]},{"timestamp":1752637045394,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3341,"length1":88,"diffs":[[1,"    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n"]]},{"start1":5923,"length1":160,"diffs":[[1,"    let war = randint(1, 100) + (country.pop / 50000 - targetCountry.pop / 50000)\n    war > 49 && !isEnemy && !(country.enemies.length > 0) && declareWar(country, targetCountry)\n"]]},{"start1":6167,"length1":76,"diffs":[[1,"    peace && !war && isEnemy && declarePeace(country, targetCountry)\n"]]},{"start1":6295,"length1":87,"diffs":[[1,"    trade && !war && !peace && !isEnemy && declareTrade(country, targetCountry)\n"]]},{"start1":8285,"length1":49,"diffs":[[1,"game.onUpdateInterval(100, function Germany() {\n"]]},{"start1":9006,"length1":48,"diffs":[[1,"game.onUpdateInterval(100, function France() {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2847,"length1":88,"diffs":[[1,"    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n"]]},{"start1":5167,"length1":161,"diffs":[[1,"    war = randint(1, 100) + ((country.pop / 50000) - (targetCountry.pop / 50000))\n    war > 79 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n"]]},{"start1":5413,"length1":80,"diffs":[[1,"    peace and not war and isEnemy and declarePeace(country, targetCountry)\n"]]},{"start1":5544,"length1":98,"diffs":[[1,"    trade and not war and not peace and not isEnemy and declareTrade(country, targetCountry)\n"]]},{"start1":8592,"length1":77,"diffs":[[1,"game.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\n"]]}]}]},{"timestamp":1752637644345,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":692,"length1":0,"diffs":[[1,"    trade: number\n"]]},{"start1":3429,"length1":38,"diffs":[[1,"    strategy.trading = randint(1, 100)\n"]]},{"start1":3897,"length1":224,"diffs":[[1,""]]},{"start1":5010,"length1":294,"diffs":[[1,""]]},{"start1":5921,"length1":68,"diffs":[[1,"    let war = randint(1, 100) + country.strategy.aggressiveness\n"]]},{"start1":6081,"length1":311,"diffs":[[1,"    let peace = Math.percentChance(country.strategy.peacefulness)\n    peace && !(war > 89) && isEnemy && declarePeace(country, targetCountry)\n    let trade = Math.percentChance(country.strategy.trade)\n    trade && !(war > 89) && !peace && !isEnemy && declareTrade(country, targetCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":2935,"length1":38,"diffs":[[1,"    strategy.trading = randint(1, 100)\n"]]},{"start1":3405,"length1":191,"diffs":[[1,""]]},{"start1":4374,"length1":246,"diffs":[[1,""]]},{"start1":5165,"length1":66,"diffs":[[1,"    war = randint(1, 100) + country.strategy.aggressiveness\n"]]},{"start1":5326,"length1":320,"diffs":[[1,"    peace = Math.percent_chance(country.strategy.peacefulness)\n    peace and not war > 89 and isEnemy and declarePeace(country, targetCountry)\n    trade = Math.percent_chance(country.strategy.trade)\n    trade and not war > 89 and not peace and not isEnemy and declareTrade(country, targetCountry)\n"]]}]}]},{"timestamp":1752638242382,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3979,"length1":100,"diffs":[[1,"            game.showLongText(country.name + \"cuts trade with\" + enemy.name, DialogLayout.Bottom)\n"]]},{"start1":4837,"length1":245,"diffs":[[1,"    game.showLongText(country.name + \" trades with \" + enemy.name, DialogLayout.Bottom)\n"]]},{"start1":5292,"length1":193,"diffs":[[1,"    let isEnemy: any;\n    for (let enemy of country.enemies) {\n        isEnemy = enemy.name == targetCountry.name ? true : false\n        if (isEnemy) {\n"]]},{"start1":5487,"length1":26,"diffs":[[1,"    return isEnemy\n"]]},{"start1":6420,"length1":65,"diffs":[[1,""]]},{"start1":6796,"length1":118,"diffs":[[1,"    trade > 84 && !(war > 94) && !(peace > 94) && !isEnemy && declareTrade(country, targetCountry)\n"]]},{"start1":8805,"length1":48,"diffs":[[1,"game.onUpdateInterval(1000, function Germany() {\n"]]},{"start1":9527,"length1":47,"diffs":[[1,"game.onUpdateInterval(1000, function France() {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":3495,"length1":102,"diffs":[[1,"            game.show_long_text(country.name + \"cuts trade with\" + enemy.name, DialogLayout.BOTTOM)\n"]]},{"start1":4247,"length1":234,"diffs":[[1,"    game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n"]]},{"start1":4682,"length1":111,"diffs":[[1,"        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n"]]},{"start1":4790,"length1":26,"diffs":[[1,"    return isEnemy\n"]]},{"start1":5601,"length1":61,"diffs":[[1,""]]},{"start1":5980,"length1":131,"diffs":[[1,"    trade > 84 and not war > 94 and not peace > 94 and not isEnemy and declareTrade(country, targetCountry)\n"]]},{"start1":9043,"length1":75,"diffs":[[1,"game.on_update_interval(1000, Germany)\ngame.on_update_interval(1000, France)\n"]]}]}]},{"timestamp":1752638767963,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":3597,"length1":13,"diffs":[[1,""]]}]}]},{"timestamp":1752638854302,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":3597,"length1":18,"diffs":[[1,"            \n"]]}]}]},{"timestamp":1752639597552,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":3597,"length1":19,"diffs":[[1,"            trade\n"]]}]}]},{"timestamp":1752639597681,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3786,"length1":61,"diffs":[[1,""]]},{"start1":4079,"length1":228,"diffs":[[1,""]]},{"start1":6692,"length1":503,"diffs":[[1,"    let war = randint(1, 100) + country.strategy.aggressiveness / 2\n    war > 94 && !isEnemy && !(country.enemies.length > 0) && declareWar(country, targetCountry)\n    let peace = randint(1, 100) + country.strategy.peacefulness / 2\n    peace > 94 && !(war > 94) && isEnemy && declarePeace(country, targetCountry)\n    let trade = randint(1, 100) + country.strategy.trading / 2\n    trade > 84 && !isTradePartner && !(war > 94) && !(peace > 94) && !isEnemy && declareTrade(country, targetCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":3597,"length1":230,"diffs":[[1,"            trade \n"]]},{"start1":5855,"length1":519,"diffs":[[1,"    war = randint(1, 100) + (country.strategy.aggressiveness / 2)\n    war > 94 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = randint(1, 100) + (country.strategy.peacefulness / 2)\n    peace > 94 and not war > 94 and isEnemy and declarePeace(country, targetCountry)\n    trade = randint(1, 100) + (country.strategy.trading / 2)\n    trade > 84 and not isTradePartner and not war > 94 and not peace > 94 and not isEnemy and declareTrade(country, targetCountry)\n"]]}]}]},{"timestamp":1752704811276,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"tilemap.g.jres","patch":[{"start1":964,"length1":331,"diffs":[[1,""]]}]}]},{"timestamp":1752704829145,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2109,"length1":157,"diffs":[[1,""]]},{"start1":9394,"length1":736,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1779,"length1":154,"diffs":[[1,""]]},{"start1":8326,"length1":40,"diffs":[[1,""]]},{"start1":9539,"length1":612,"diffs":[[1,""]]},{"start1":9540,"length1":1,"diffs":[[1,""]]}]},{"type":"edited","filename":"tilemap.g.jres","patch":[{"start1":1383,"length1":1060,"diffs":[[1,"        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n"]]},{"start1":2531,"length1":57,"diffs":[[1,"            \"myTiles.tile2\"\n"]]}]},{"type":"edited","filename":"tilemap.g.ts","patch":[{"start1":372,"length1":102,"diffs":[[1,""]]},{"start1":507,"length1":585,"diffs":[[1,"            case \"world1\":return tiles.createTilemap(hex``, img`\n"]]},{"start1":1620,"length1":91,"diffs":[[1,"`, [myTiles.transparency16,myTiles.tile1,myTiles.tile2], TileScale.Sixteen);\n"]]},{"start1":2038,"length1":71,"diffs":[[1,""]]}]}]},{"timestamp":1752705370849,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9716,"length1":132,"diffs":[[1,"    externalEvent(belgium, germany)\n"]]},{"start1":10439,"length1":132,"diffs":[[1,"    externalEvent(germany, france)\n"]]},{"start1":11157,"length1":131,"diffs":[[1,"    externalEvent(france, germany)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8584,"length1":122,"diffs":[[1,"    externalEvent(germany, france)\n"]]},{"start1":9192,"length1":121,"diffs":[[1,"    externalEvent(france, germany)\n"]]},{"start1":9796,"length1":165,"diffs":[[1,"    externalEvent(belgium, germany)\n"]]}]}]},{"timestamp":1752705970479,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9806,"length1":103,"diffs":[[1,"    externalEvent(belgium, randomCountry)\n"]]},{"start1":10625,"length1":103,"diffs":[[1,"    externalEvent(germany, randomCountry)\n"]]},{"start1":11440,"length1":101,"diffs":[[1,"    externalEvent(france, randomCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8664,"length1":89,"diffs":[[1,"    externalEvent(germany, randomCountry)\n"]]},{"start1":9359,"length1":87,"diffs":[[1,"    externalEvent(france, randomCountry)\n"]]},{"start1":10049,"length1":89,"diffs":[[1,"    if randomCountry.name != belgium.namde\n    externalEvent(belgium, randomCountry)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":27,"diffs":[[1,"    \"name\": \"new testing - Copy - Copy\",\n"]]}]}]},{"timestamp":1752706045338,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":10822,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1752706700978,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":10821,"length1":37,"diffs":[[1,""]]},{"start1":10822,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1752706701177,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9591,"length1":0,"diffs":[[1,"function Belgium() {\n    let p: any;\n    let targetCountry: countryType;\n    let pop = popGain(belgium)\n    ecoGain(belgium)\n    let index = countries.length - 1\n    let randomCountry = countries[randint(0, index)]\n    if (randomCountry.name != belgium.name) {\n        externalEvent(belgium, randomCountry)\n    }\n    \n    let enemyIndex = belgium.enemies.length\n    if (!belgium.isAi) {\n        p = belgium.playerChosen == 0 ? mp.playerSelector(mp.PlayerNumber.One) : (belgium.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.Two) : (belgium.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n        mp.setPlayerState(p, MultiplayerState.score, pop)\n    }\n    \n    if (belgium.enemies.length != 0) {\n        targetCountry = belgium.enemies[0]\n        war(belgium, targetCountry)\n    }\n    \n}\n\n"]]},{"start1":12190,"length1":952,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":10142,"length1":0,"diffs":[[1,"    if randomCountry.name != belgium.name:\n        externalEvent(belgium, randomCountry)\n"]]},{"start1":10631,"length1":236,"diffs":[[1,"    if len(belgium.enemies) != 0:\n        targetCountry = belgium.enemies[0]\n        war(belgium, targetCountry)\n"]]},{"start1":10821,"length1":38,"diffs":[[1,"game.on_update_interval(100, France)\n"]]}]}]},{"timestamp":1752707299968,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":11401,"length1":68,"diffs":[[1,"    let randomEnemy: any[];\n"]]},{"start1":12145,"length1":130,"diffs":[[1,"            randomEnemy = []\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":10669,"length1":128,"diffs":[[1,"            randomEnemy = \n"]]}]}]},{"timestamp":1752707783337,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":9888,"length1":280,"diffs":[[1,"    if len(france.enemies) != 0:\n        targetCountry = france.enemies[0]\n        war(france, targetCountry)\n"]]}]}]},{"timestamp":1752709070532,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10533,"length1":68,"diffs":[[1,""]]},{"start1":11197,"length1":274,"diffs":[[1,""]]},{"start1":11208,"length1":0,"diffs":[[1,"    if (france.enemies.length != 0) {\n        targetCountry = france.enemies[0]\n        war(france, targetCountry)\n    }\n    \n"]]}]}]},{"timestamp":1752709070726,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9691,"length1":68,"diffs":[[1,""]]},{"start1":9833,"length1":0,"diffs":[[1,"    if (randomCountry.name != germany.name) {\n        externalEvent(germany, randomCountry)\n    }\n    \n"]]},{"start1":10467,"length1":377,"diffs":[[1,""]]},{"start1":10777,"length1":0,"diffs":[[1,"    if (randomCountry.name != france.name) {\n        externalEvent(france, randomCountry)\n    }\n    \n"]]},{"start1":11265,"length1":271,"diffs":[[1,"        if (belgium.enemies.length != 0) {\n            randomEnemyIndex = belgium.enemies.length - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n"]]},{"start1":11480,"length1":39,"diffs":[[1,"            war(belgium, targetCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8664,"length1":0,"diffs":[[1,"    if randomCountry.name != germany.name:\n        externalEvent(germany, randomCountry)\n"]]},{"start1":9265,"length1":337,"diffs":[[1,""]]},{"start1":9406,"length1":0,"diffs":[[1,"    if randomCountry.name != france.name:\n        externalEvent(france, randomCountry)\n"]]},{"start1":9888,"length1":331,"diffs":[[1,"        if len(belgium.enemies) != 0:\n                    randomEnemyIndex = len(belgium.enemies) - 1\n                    randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n                    targetCountry = randomCountry\n                    war(belgium, targetCountry)\n"]]}]}]},{"timestamp":1752709676317,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"tilemap.g.jres","patch":[{"start1":1295,"length1":331,"diffs":[[1,""]]}]}]},{"timestamp":1752710816788,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"tilemap.g.ts","patch":[{"start1":474,"length1":102,"diffs":[[1,""]]},{"start1":2225,"length1":71,"diffs":[[1,""]]}]}]},{"timestamp":1752710824038,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2266,"length1":165,"diffs":[[1,""]]},{"start1":2296,"length1":52,"diffs":[[1,"let countries = [germany, france]\n"]]},{"start1":7758,"length1":87,"diffs":[[1,"    let attack = Math.percentChance(country.pop / 1000000 - targetCountry.pop / 1000000)\n"]]},{"start1":9591,"length1":40,"diffs":[[1,""]]},{"start1":12984,"length1":1093,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1933,"length1":162,"diffs":[[1,""]]},{"start1":1962,"length1":67,"diffs":[[1,"countries: List[countryType] = [germany, france]\n"]]},{"start1":6829,"length1":88,"diffs":[[1,"    attack = Math.percent_chance((country.pop / 1000000) - (targetCountry.pop / 1000000))\n"]]},{"start1":8520,"length1":40,"diffs":[[1,""]]},{"start1":11262,"length1":880,"diffs":[[1,""]]},{"start1":11376,"length1":38,"diffs":[[1,""]]}]},{"type":"edited","filename":"tilemap.g.jres","patch":[{"start1":1714,"length1":1060,"diffs":[[1,"        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n"]]},{"start1":2891,"length1":57,"diffs":[[1,"            \"myTiles.tile3\"\n"]]}]},{"type":"edited","filename":"tilemap.g.ts","patch":[{"start1":711,"length1":585,"diffs":[[1,"            case \"world1\":return tiles.createTilemap(hex``, img`\n"]]},{"start1":1824,"length1":105,"diffs":[[1,"`, [myTiles.transparency16,myTiles.tile1,myTiles.tile2,myTiles.tile3], TileScale.Sixteen);\n"]]}]}]},{"timestamp":1752711891073,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":7201,"length1":20,"diffs":[[1,"        if roll < 50:\n"]]}]}]},{"timestamp":1752711893608,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8131,"length1":25,"diffs":[[1,"        if (roll < 50) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":110,"length1":2,"diffs":[[1,""]]},{"start1":7201,"length1":22,"diffs":[[1,"        if roll < :\n"]]}]}]},{"timestamp":1752715177362,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5856,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1752715842525,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5856,"length1":3,"diffs":[[1,""]]},{"start1":5857,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1752715843776,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1164,"length1":30,"diffs":[[1,""]]},{"start1":2266,"length1":165,"diffs":[[1,"let britain = new countryType(\"United Kingdom\", 150000, 1, new aiStrategy(\"\", 0, 0, 0), true, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":6710,"length1":846,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1935,"length1":162,"diffs":[[1,"britain = countryType(\"United Kingdom\", 150000, 1, aiStrategy(\"\", 0, 0, 0), True, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":5856,"length1":770,"diffs":[[1,"ge\n"]]}]}]},{"timestamp":1752720875055,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"images.g.jres","patch":[{"start1":903,"length1":1573,"diffs":[[1,""]]}]}]},{"timestamp":1752720953964,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"images.g.jres","patch":[{"start1":1028,"length1":1408,"diffs":[[1,"        \"data\": \"YzgwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n"]]},{"start1":2476,"length1":890,"diffs":[[1,""]]}]},{"type":"edited","filename":"images.g.ts","patch":[{"start1":2109,"length1":3341,"diffs":[[1,"\n"]]}]}]},{"timestamp":1752721605042,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":185,"length1":80,"diffs":[[1,"    crosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n"]]}]}]},{"timestamp":1752721616928,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":246,"length1":152,"diffs":[[1,"    crosshair = sprites.create(assets.image`crosshair`, SpriteKind.Player)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":185,"length1":166,"diffs":[[1,"    crosshair = sprites.create(assets.image(\"\"\"BOBSTAND\"\"\"), SpriteKind.player)\n"]]}]},{"type":"edited","filename":"images.g.jres","patch":[{"start1":903,"length1":295,"diffs":[[1,""]]}]},{"type":"edited","filename":"images.g.ts","patch":[{"start1":1960,"length1":593,"diffs":[[1,""]]}]}]},{"timestamp":1752721949892,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":184,"length1":86,"diffs":[[1,"\n"]]}]}]},{"timestamp":1752727327199,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":184,"length1":85,"diffs":[[1,"mp.is_button_pressed(mp.player_selector(mp.PlayerNumber.ONE), mp.MultiplayerButton.A)\n"]]}]}]},{"timestamp":1752727335153,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":315,"length1":0,"diffs":[[1,"    animation.runImageAnimation(crosshair, [assets.animation`bobWalk`], 500, true)\n"]]},{"start1":15748,"length1":176,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":184,"length1":1,"diffs":[[1,"mp.is_button_pressed(mp.player_selector(mp.PlayerNumber.ONE), mp.MultiplayerButton.A\n"]]},{"start1":344,"length1":0,"diffs":[[1,"    animation.run_image_animation(crosshair, [assets.animation(\"\"\"bobWalk\"\"\")], 500, True)\n"]]},{"start1":13833,"length1":272,"diffs":[[1,"mp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)"]]}]}]},{"timestamp":1752727932377,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":15665,"length1":256,"diffs":[[1,"function on_forever() {\n    mp.onButtonEvent(mp.MultiplayerButton.A, ControllerButtonEvent.Pressed, function on_button_event_a_pressed2(player: mp.Player) {\n        \n    })\n}\n\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":13800,"length1":231,"diffs":[[1,"    sprite = player.sprite\n\n\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed2)"]]}]}]},{"timestamp":1752728252092,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":13842,"length1":86,"diffs":[[1,"    animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, False)\n"]]}]}]},{"timestamp":1752790769942,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":15839,"length1":78,"diffs":[[1,"    animation.runImageAnimation(sprite, assets.animation`bobWalk`, 100, false)\n"]]}]}]},{"timestamp":1752790773909,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8075,"length1":5,"diffs":[[1,"    let isEnemy = getEnemy(country, targetCountry)\n    let isTradePartner = getTradePartner(country, targetCountry)\n    let war = randint(1, 1000) + country.strategy.aggressiveness / 2\n    war > 994 && !isEnemy && !(country.enemies.length > 0) && declareWar(country, targetCountry)\n    let peace = randint(1, 1000) + country.strategy.peacefulness / 2\n    peace > 994 && !(war > 994) && isEnemy && declarePeace(country, targetCountry)\n    let trade = randint(1, 1000) + country.strategy.trading / 2\n    trade > 884 && !isTradePartner && !(war > 994) && !(peace > 994) && !isEnemy && declareTrade(country, targetCountry)\n"]]},{"start1":8697,"length1":637,"diffs":[[1,""]]},{"start1":15665,"length1":57,"diffs":[[1,"mp.onButtonEvent(mp.MultiplayerButton.Up, ControllerButtonEvent.Pressed, function on_button_event_up_pressed(player: mp.Player) {\n"]]},{"start1":15917,"length1":1200,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":7059,"length1":13,"diffs":[[1,""]]},{"start1":7686,"length1":4,"diffs":[[1,""]]},{"start1":13928,"length1":1160,"diffs":[[1,"mp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_up_pressed)"]]}]}]},{"timestamp":1752791367649,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":16816,"length1":0,"diffs":[[1,"forever(function on_forever() {\n    let sprite: Sprite;\n    let players = mp.allPlayers()\n    for (let bob of players) {\n        sprite = mp.getPlayerSprite(bob)\n        animation.runImageAnimation(sprite, assets.animation`bobStand`, 100, true)\n    }\n})\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":13777,"length1":46,"diffs":[[1,"def on_button_event_up_pressed(player):\n"]]},{"start1":13945,"length1":109,"diffs":[[1,"mp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_up_pressed)\n\ndef on_button_event_down_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n"]]},{"start1":14324,"length1":0,"diffs":[[1,"\ndef on_button_event_left_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n"]]},{"start1":14600,"length1":105,"diffs":[[1,"\ndef on_button_event_right_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_up_pressed)\n\ndef on_forever():\n    players = mp.all_players()\n    for bob in players:\n        sprite = mp.get_player_sprite(bob)\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nforever(on_forever)"]]}]}]},{"timestamp":1752791965897,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":15688,"length1":63,"diffs":[[1,"function on_button_event_up_pressed(player: mp.Player) {\n"]]},{"start1":15870,"length1":435,"diffs":[[1,"mp.onButtonEvent(mp.MultiplayerButton.Up, ControllerButtonEvent.Pressed, on_button_event_up_pressed)\nfunction on_button_event_down_pressed(player: any) {\n    let sprite = mp.getPlayerSprite(player)\n    animation.runImageAnimation(sprite, assets.animation`bobWalk`, 100, true)\n}\n\nmp.onButtonEvent(mp.MultiplayerButton.Down, ControllerButtonEvent.Pressed, on_button_event_up_pressed)\nfunction on_button_event_left_pressed(player: any) {\n    let sprite = mp.getPlayerSprite(player)\n    animation.runImageAnimation(sprite, assets.animation`bobWalk`, 100, true)\n}\n\nmp.onButtonEvent(mp.MultiplayerButton.Left, ControllerButtonEvent.Pressed, on_button_event_up_pressed)\nfunction on_button_event_right_pressed(player: any) {\n    let sprite = mp.getPlayerSprite(player)\n    animation.runImageAnimation(sprite, assets.animation`bobWalk`, 100, true)\n}\n\nmp.onButtonEvent(mp.MultiplayerButton.Right, ControllerButtonEvent.Pressed, on_button_event_up_pressed)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":14060,"length1":334,"diffs":[[1,"mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_up_pressed)\nmp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_up_pressed)\nmp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_up_pressed)"]]}]}]},{"timestamp":1752792526626,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":15688,"length1":57,"diffs":[[1,"function on_button_event_movement_pressed(player: mp.Player) {\n"]]},{"start1":15795,"length1":79,"diffs":[[1,"    animation.runImageAnimation(sprite, assets.animation`bobWalk`, 100, true)\n"]]},{"start1":15876,"length1":393,"diffs":[[1,"mp.onButtonEvent(mp.MultiplayerButton.Up, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Down, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Left, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Right, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":13865,"length1":457,"diffs":[[1,"    animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\n"]]}]}]},{"timestamp":1752793243593,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":13953,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1752793620733,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":15688,"length1":63,"diffs":[[1,"function on_button_event_movement_pressed(player: any) {\n"]]},{"start1":15789,"length1":328,"diffs":[[1,"    animation.runImageAnimation(sprite, assets.animation`bobWalk`, 100, false)\n"]]},{"start1":15871,"length1":1302,"diffs":[[1,"forever(function checkMovement() {\n    let players = mp.allPlayers()\n    for (let p of players) {\n        if (mp.isButtonPressed(p, mp.MultiplayerButton.Up) || mp.isButtonPressed(p, mp.MultiplayerButton.Down) || mp.isButtonPressed(p, mp.MultiplayerButton.Left) || mp.isButtonPressed(p, mp.MultiplayerButton.Right)) {\n            on_button_event_movement_pressed(p)\n        }\n        \n"]]},{"start1":16261,"length1":451,"diffs":[[1,"})\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":13865,"length1":1218,"diffs":[[1,"    animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, False)\n"]]},{"start1":13954,"length1":890,"diffs":[[1,"def checkMovement():\n    players = mp.all_players()\n    for p in players:\n        if mp.is_button_pressed(p, mp.MultiplayerButton.UP) or mp.is_button_pressed(p, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(p, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(p, mp.MultiplayerButton.RIGHT):\n            on_button_event_movement_pressed(p)\nforever(checkMovement)\n"]]}]}]},{"timestamp":1752794219462,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3687,"length1":129,"diffs":[[1,"    strategy.aggressiveness = randint(1, 10)\n    strategy.peacefulness = randint(1, 10)\n    strategy.trading = randint(1, 10)\n"]]},{"start1":8075,"length1":627,"diffs":[[1,"    \n"]]},{"start1":8083,"length1":0,"diffs":[[1,"/** \n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = randint(1, 1000) + (country.strategy.aggressiveness / 2)\n    war > 994 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = randint(1, 1000) + (country.strategy.peacefulness / 2)\n    peace > 994 and not war > 994 and isEnemy and declarePeace(country, targetCountry)\n    trade = randint(1, 1000) + (country.strategy.trading / 2)\n    trade > 884 and not isTradePartner and not war > 994 and not peace > 994 and not isEnemy and declareTrade(country, targetCountry)\n\n */\n"]]},{"start1":16112,"length1":13,"diffs":[[1,"    }\n    \n}\n\nmp.onButtonEvent(mp.MultiplayerButton.Up, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Down, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Left, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Right, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Up, ControllerButtonEvent.Released, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Down, ControllerButtonEvent.Released, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Left, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nmp.onButtonEvent(mp.MultiplayerButton.Right, ControllerButtonEvent.Pressed, on_button_event_movement_pressed)\nfunction on_button_event_movement_released(player: mp.Player) {\n    let sprite = mp.getPlayerSprite(player)\n    if (!mp.isButtonPressed(player, mp.MultiplayerButton.Up) && !mp.isButtonPressed(player, mp.MultiplayerButton.Down) && !mp.isButtonPressed(player, mp.MultiplayerButton.Left) && !mp.isButtonPressed(player, mp.MultiplayerButton.Right)) {\n"]]},{"start1":17442,"length1":892,"diffs":[[1,"mp.onButtonEvent(mp.MultiplayerButton.Up, ControllerButtonEvent.Released, on_button_event_movement_released)\nmp.onButtonEvent(mp.MultiplayerButton.Down, ControllerButtonEvent.Released, on_button_event_movement_released)\nmp.onButtonEvent(mp.MultiplayerButton.Left, ControllerButtonEvent.Released, on_button_event_movement_released)\nmp.onButtonEvent(mp.MultiplayerButton.Right, ControllerButtonEvent.Released, on_button_event_movement_released)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":3177,"length1":129,"diffs":[[1,"    strategy.aggressiveness = randint(1, 10)\n    strategy.peacefulness = randint(1, 10)\n    strategy.trading = randint(1, 10)\n"]]},{"start1":7059,"length1":0,"diffs":[[1,"    pass\n\"\"\"\n"]]},{"start1":7180,"length1":328,"diffs":[[1,"    war = randint(1, 1000) + (country.strategy.aggressiveness / 2)\n    war > 994 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = randint(1, 1000) + (country.strategy.peacefulness / 2)\n    peace > 994 and not war > 994 and isEnemy and declarePeace(country, targetCountry)\n"]]},{"start1":7565,"length1":137,"diffs":[[1,"    trade > 884 and not isTradePartner and not war > 994 and not peace > 994 and not isEnemy and declareTrade(country, targetCountry)\n\"\"\"\n"]]},{"start1":14195,"length1":10,"diffs":[[1,"mp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\n\n\ndef on_button_event_movement_released(player):\n    sprite = mp.get_player_sprite(player)\n    if not mp.is_button_pressed(player, mp.MultiplayerButton.UP) and not mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) and not mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) and not mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n"]]},{"start1":15524,"length1":907,"diffs":[[1,"mp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_released)\nmp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_released)\nmp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_released)\nmp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_released)\n"]]}]}]},{"timestamp":1752794912449,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8033,"length1":819,"diffs":[[1,""]]}]}]},{"timestamp":1752794925367,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8822,"length1":30,"diffs":[[1,""]]},{"start1":9069,"length1":150,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8033,"length1":157,"diffs":[[1,"            failedBattle = my_sprite = sprites.create(img(\"\"\"\n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            . . . . . . . . . . . . . . . . \n            \"\"\"), SpriteKind.player)\n"]]}]},{"type":"edited","filename":"images.g.jres","patch":[{"start1":599,"length1":0,"diffs":[[1,"    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAABVAAAAAFAAAFAFAAAAVQAAAFUAUFAFAAAAUAVQVQAAAAAAVVAFAAAAAABQUFUAAAAAAFBVUAUAAAAAUAUAAAAAAABVVQAFAAAAUAVQVQAAAABVAFBVAAAAUAUAVVAFAABVAAAFAFUAAAUAAAAAUAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n"]]},{"start1":1198,"length1":304,"diffs":[[1,""]]}]},{"type":"edited","filename":"images.g.ts","patch":[{"start1":1358,"length1":0,"diffs":[[1,"            case \"image3\":\n            case \"failedBattle\":return img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. 5 . . . . . . . . . . . 5 5 . \n. 5 5 . . . . . . . . . 5 5 . . \n. . 5 5 . . . . . . . 5 5 . . . \n. . . 5 5 . . . . . 5 5 . . . . \n. . . . 5 5 . . . 5 5 . . . . . \n. . . . . 5 5 5 5 5 . . . . . . \n. . . . . . . 5 5 5 . . 5 5 . . \n. . . 5 5 5 5 5 . 5 5 5 5 . . . \n. . . . 5 5 5 . . . 5 5 . . . . \n. . . 5 5 . 5 5 . . 5 5 5 . . . \n. . 5 5 . . . 5 . 5 . . 5 5 . . \n. 5 5 . . . . . . . . . . 5 5 . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`;\n"]]},{"start1":2553,"length1":602,"diffs":[[1,""]]}]}]},{"timestamp":1752799890825,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8190,"length1":25,"diffs":[[1,""]]}]}]},{"timestamp":1752800381036,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8190,"length1":0,"diffs":[[1,"            failedBattle\n"]]}]}]},{"timestamp":1752802370816,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8190,"length1":13,"diffs":[[1,""]]}]}]},{"timestamp":1752802634741,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9249,"length1":58,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8190,"length1":58,"diffs":[[1,"            \n"]]}]}]},{"timestamp":1752804193323,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":110,"length1":9,"diffs":[[1,""]]},{"start1":111,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1752804314332,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":104,"length1":32,"diffs":[[1,""]]},{"start1":8852,"length1":85,"diffs":[[1,"    let attack = Math.percentChance(country.pop / 100000 - targetCountry.pop / 100000)\n"]]},{"start1":9067,"length1":77,"diffs":[[1,"            country.pop -= 5000\n            failedBattle = sprites.create(assets.image`failedBattle`, SpriteKind.Food)\n"]]},{"start1":9249,"length1":33,"diffs":[[1,"            pause(150)\n"]]},{"start1":9307,"length1":32,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":110,"length1":28,"diffs":[[1,"fight = \n"]]},{"start1":7795,"length1":86,"diffs":[[1,"    attack = Math.percent_chance((country.pop / 100000) - (targetCountry.pop / 100000))\n"]]},{"start1":8009,"length1":83,"diffs":[[1,"            country.pop -= 5000\n            failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), SpriteKind.food)\n"]]},{"start1":8198,"length1":35,"diffs":[[1,"            pause(150)\n"]]},{"start1":8256,"length1":32,"diffs":[[1,""]]}]}]},{"timestamp":1752804884500,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9237,"length1":52,"diffs":[[1,"            game.waitAnyButton()\n            failedBattle.destroy()\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8173,"length1":52,"diffs":[[1,"            game.wait_any_button()\n            failedBattle.destroy()\n"]]}]}]},{"timestamp":1752805481800,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1081,"length1":26,"diffs":[[1,""]]},{"start1":1245,"length1":220,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1571,"length1":43,"diffs":[[1,""]]},{"start1":1855,"length1":644,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, [], [], \"belgiumTile\", tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":4983,"length1":72,"diffs":[[1,"    let accept = Math.percentChance(10)\n"]]},{"start1":8110,"length1":20,"diffs":[[1,""]]},{"start1":8394,"length1":256,"diffs":[[1,"    let peace = randint(1, 10000) + country.strategy.peacefulness / 2\n    peace > 9990 && !(war > 9990) && isEnemy && declarePeace(country, targetCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":220,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1241,"length1":43,"diffs":[[1,""]]},{"start1":1498,"length1":632,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":4316,"length1":69,"diffs":[[1,"    accept = Math.percent_chance(10)\n"]]},{"start1":7368,"length1":245,"diffs":[[1,"    peace = randint(1, 10000) + (country.strategy.peacefulness / 2)\n    peace > 9990 and not war > 9990 and isEnemy and declarePeace(country, targetCountry)\n"]]}]}]},{"timestamp":1752806151470,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":3745,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1752806175549,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1216,"length1":21,"diffs":[[1,""]]},{"start1":4350,"length1":63,"diffs":[[1,""]]},{"start1":8588,"length1":97,"diffs":[[1,"        peace = randint(1, 10000) + country.strategy.peacefulness / 2\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":3745,"length1":44,"diffs":[[1,"    \n"]]},{"start1":7515,"length1":99,"diffs":[[1,"        peace = randint(1, 10000) + (country.strategy.peacefulness / 2)\n"]]}]}]},{"timestamp":1752806771882,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1216,"length1":0,"diffs":[[1,"    tilesLostToEnemy\n"]]},{"start1":4371,"length1":0,"diffs":[[1,"    country.tilesLostToEnemy = {\n        enemy : 0,\n    }\n    \n"]]},{"start1":8672,"length1":70,"diffs":[[1,"        peace = randint(1, 10000) + country.strategy.peacefulness / 2 + country.tilesLostToEnemy\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":3745,"length1":0,"diffs":[[1,"    country.tilesLostToEnemy = { enemy: 0 }\n"]]},{"start1":7554,"length1":72,"diffs":[[1,"        peace = randint(1, 10000) + (country.strategy.peacefulness / 2) + country.tilesLostToEnemy\n"]]}]}]},{"timestamp":1752806938755,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":222,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]}]}]},{"timestamp":1752807773945,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":223,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tiisAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]}]}]},{"timestamp":1752807774048,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1216,"length1":14,"diffs":[[1,""]]},{"start1":4350,"length1":81,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":220,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tilisAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":3748,"length1":53,"diffs":[[1,""]]}]}]},{"timestamp":1752808465253,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":3745,"length1":54,"diffs":[[1,"    country.tilesLost = { \"enemy\": 0, \"ahh ahh\": 2 }\n"]]}]}]},{"timestamp":1752808472937,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1216,"length1":0,"diffs":[[1,"    tilesLost\n"]]},{"start1":4364,"length1":0,"diffs":[[1,"    country.tilesLost = {\n        \"enemy\" : 0,\n        \"ahh ahh\" : 2,\n    }\n    \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":3745,"length1":0,"diffs":[[1,"    country.tilesLost = [] \"enemy\": 0, \"ahh ahh\": 2 }\n"]]}]}]},{"timestamp":1752809788346,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":3745,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1752809932470,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1216,"length1":14,"diffs":[[1,""]]},{"start1":4350,"length1":56,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":231,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1236,"length1":34,"diffs":[[1,""]]},{"start1":3745,"length1":37,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1752810315389,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1063,"length1":14,"diffs":[[1,""]]},{"start1":1216,"length1":0,"diffs":[[1,"    tilesLost\n"]]},{"start1":1285,"length1":236,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, peaceCooldown: number, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1609,"length1":35,"diffs":[[1,""]]},{"start1":1961,"length1":680,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"belgiumTile\", tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":235,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tilesLost, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1247,"length1":35,"diffs":[[1,"        self.tileLost = tilesLost\n"]]},{"start1":1606,"length1":648,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]}]}]},{"timestamp":1752810890556,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":260,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tilesLost: {}, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]}]}]},{"timestamp":1752811105703,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":253,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tilesLost: dict[countryType: int] = {}, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]}]}]},{"timestamp":1752811877545,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":252,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tilesLost: dict[self: int] = {}, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]}]}]},{"timestamp":1752811889076,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1063,"length1":0,"diffs":[[1,"    tilesLost\n"]]},{"start1":1230,"length1":22,"diffs":[[1,""]]},{"start1":1285,"length1":220,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, tilesLost: any, isAi: boolean, peaceCooldown: number, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1625,"length1":0,"diffs":[[1,"        this.tilesLost = tilesLost\n"]]},{"start1":2012,"length1":644,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0),  {\n\t\n}\n, true, 0, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0),  {\n\t\n}\n, true, 0, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0),  {\n\t\n}\n, true, 0, [], [], \"belgiumTile\", tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0),  {\n\t\n}\n, true, 0, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":4451,"length1":26,"diffs":[[1,"    country.tilesLost = {\n        enemy : 0,\n    }\n    \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":220,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tilesLost: dict[self: int] = }, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1268,"length1":0,"diffs":[[1,"        self.tilesLost = tilesLost\n"]]},{"start1":1628,"length1":632,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), {}, True, 0, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), {}, True, 0, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), {}, True, 0, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), {}, True, 0, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":3828,"length1":26,"diffs":[[1,"    country.tilesLost = { enemy: 0 }\n"]]}]}]},{"timestamp":1752812379124,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1038,"length1":22,"diffs":[[1,""]]},{"start1":1216,"length1":0,"diffs":[[1,"    tilesLost: number\n"]]},{"start1":1293,"length1":239,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, peaceCooldown: number, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1584,"length1":35,"diffs":[[1,""]]},{"start1":1969,"length1":656,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"belgiumTile\", tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":4372,"length1":0,"diffs":[[1,"    country.tilesLost = 0\n"]]},{"start1":5167,"length1":50,"diffs":[[1,""]]},{"start1":8636,"length1":94,"diffs":[[1,"        peace = randint(1, 10000) + country.strategy.peacefulness / 2\n"]]},{"start1":9795,"length1":41,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":236,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1203,"length1":35,"diffs":[[1,""]]},{"start1":1561,"length1":644,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":3745,"length1":0,"diffs":[[1,"    country.tilesLost = 0\n"]]},{"start1":4449,"length1":50,"diffs":[[1,""]]},{"start1":7536,"length1":98,"diffs":[[1,"        peace = randint(1, 10000) + (country.strategy.peacefulness / 2)\n"]]},{"start1":8646,"length1":41,"diffs":[[1,""]]}]}]},{"timestamp":1752812813785,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5801,"length1":57,"diffs":[[1,"    let accept = Math.percentChance(50)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5059,"length1":54,"diffs":[[1,"    accept = Math.percent_chance(50)\n"]]}]}]},{"timestamp":1752813370636,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":11486,"length1":0,"diffs":[[1,"    let targetCountry: countryType;\n"]]},{"start1":11590,"length1":36,"diffs":[[1,""]]},{"start1":12135,"length1":0,"diffs":[[1,"    if (germany.enemies.length > 0) {\n        targetCountry = germany.enemies[0]\n        war(germany, targetCountry)\n    }\n    \n"]]},{"start1":12355,"length1":42,"diffs":[[1,"        if (germany.enemies.length != 0) {\n"]]},{"start1":12528,"length1":40,"diffs":[[1,"            targetCountry = randomCountry\n"]]},{"start1":13608,"length1":40,"diffs":[[1,"            targetCountry = randomCountry\n"]]},{"start1":14700,"length1":40,"diffs":[[1,"            targetCountry = randomCountry\n"]]},{"start1":15793,"length1":40,"diffs":[[1,"            targetCountry = randomCountry\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":10676,"length1":0,"diffs":[[1,"    if len(germany.enemies) > 0:\n        targetCountry = germany.enemies[0]\n        war(germany, targetCountry)\n"]]},{"start1":10877,"length1":37,"diffs":[[1,"        if len(germany.enemies) != 0:\n"]]},{"start1":11043,"length1":40,"diffs":[[1,"            targetCountry = randomCountry\n"]]},{"start1":11911,"length1":40,"diffs":[[1,"            targetCountry = randomCountry\n"]]},{"start1":12791,"length1":40,"diffs":[[1,"            targetCountry = randomCountry\n"]]},{"start1":13672,"length1":40,"diffs":[[1,"            targetCountry = randomCountry\n"]]}]}]},{"timestamp":1752813953439,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8326,"length1":322,"diffs":[[1,""]]},{"start1":12509,"length1":79,"diffs":[[1,""]]},{"start1":13586,"length1":77,"diffs":[[1,""]]},{"start1":14677,"length1":79,"diffs":[[1,""]]},{"start1":15768,"length1":79,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":7257,"length1":278,"diffs":[[1,""]]},{"start1":11010,"length1":63,"diffs":[[1,""]]},{"start1":11875,"length1":61,"diffs":[[1,""]]},{"start1":12754,"length1":63,"diffs":[[1,""]]},{"start1":13633,"length1":72,"diffs":[[1,""]]}]}]},{"timestamp":1752814496584,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8216,"length1":136,"diffs":[[1,"    trade > 9980 and not isTradePartner and not war > 9990 and not peace > 9990 and not isEnemy and declareTrade(country, targetCountry)\n"]]}]}]},{"timestamp":1752815677263,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9371,"length1":123,"diffs":[[1,"    trade > 9980 && !isTradePartner && !(war > 9990) && !(peace > 9990) && !isEnemy && declareTrade(country, targetCountry)\n"]]}]}]},{"timestamp":1752815677449,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1293,"length1":25,"diffs":[[1,""]]},{"start1":9307,"length1":189,"diffs":[[1,"    let trade = randint(1, 1000) + country.strategy.trading / 2\n    trade > 990 && !isTradePartner && !(war > 9990) && !(peace > 9990) && !isEnemy && declareTrade(country, targetCountry)\n"]]},{"start1":16534,"length1":23,"diffs":[[1,""]]},{"start1":16875,"length1":212,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8154,"length1":200,"diffs":[[1,"    trade = randint(1, 1000) + (country.strategy.trading / 2)\n    trade > 990 and not isTradePartner and not war > 9990 and not peace > 9990 and not isEnemy and declareTrade(country, targetCountry)\n"]]},{"start1":14700,"length1":207,"diffs":[[1,""]]}]}]},{"timestamp":1752816260342,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1038,"length1":26,"diffs":[[1,""]]},{"start1":1293,"length1":262,"diffs":[[1,"    influenceWar: number\n    constructor(name: string, pop: number, eco: number, tilesLost: number, strategy: aiStrategy, isAi: boolean, peaceCooldown: number, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1628,"length1":43,"diffs":[[1,""]]},{"start1":2048,"length1":668,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"belgiumTile\", tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":4463,"length1":30,"diffs":[[1,""]]},{"start1":16561,"length1":0,"diffs":[[1,"    let sprite: any[];\n"]]},{"start1":16925,"length1":246,"diffs":[[1,"        } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && mp.getPlayerState(player, chosenCountry) == 1) {\n            sprite = []\n            country.influenceWar = 1.1\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":256,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, tilesLost: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1219,"length1":43,"diffs":[[1,""]]},{"start1":1612,"length1":656,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, 0, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, 0, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, 0, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":3808,"length1":30,"diffs":[[1,""]]},{"start1":14702,"length1":246,"diffs":[[1,"        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and mp.get_player_state(player, chosenCountry) == 1:\n            sprite = \n            country.influenceWar = 1.1\n"]]}]}]},{"timestamp":1752816894856,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":7817,"length1":69,"diffs":[[1,"    war = randint(1, 10000) + (country.strategy.aggressiveness / 2)\n"]]}]}]},{"timestamp":1752816928560,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1319,"length1":300,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, influencedWar: number, tilesLost: number, strategy: aiStrategy, isAi: boolean, peaceCooldown: number, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":2115,"length1":696,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"belgiumTile\", tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":8704,"length1":76,"diffs":[[1,"    game.showLongText(country.name + \"has collapsed\", DialogLayout.Bottom)\n"]]},{"start1":8993,"length1":94,"diffs":[[1,"    let war = randint(1, 10000) + country.strategy.aggressiveness / 2\n"]]},{"start1":16460,"length1":69,"diffs":[[1,"    if (britain.tiles.length <= 0) {\n"]]},{"start1":17217,"length1":38,"diffs":[[1,"            country.influencedWar = 1.1\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":275,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, influencedWar: int, tilesLost: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1675,"length1":684,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":7562,"length1":78,"diffs":[[1,"    game.show_long_text(country.name + \"has collapsed\", DialogLayout.BOTTOM)\n"]]},{"start1":7817,"length1":92,"diffs":[[1,"    war = randint(1, 10000) + (country.strategy.aggressiveness / 2) \n"]]},{"start1":14205,"length1":65,"diffs":[[1,"    if len(britain.tiles) <= 0:\n"]]},{"start1":15014,"length1":38,"diffs":[[1,"            country.influencedWar = 1.1\n"]]}]}]},{"timestamp":1752817510950,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1155,"length1":25,"diffs":[[1,""]]},{"start1":1319,"length1":0,"diffs":[[1,"    isDestroyed\n"]]},{"start1":1869,"length1":39,"diffs":[[1,""]]},{"start1":13057,"length1":69,"diffs":[[1,"    if (germany.tiles.length <= 0) {\n"]]},{"start1":14213,"length1":67,"diffs":[[1,"    if (france.tiles.length <= 0) {\n"]]},{"start1":15381,"length1":69,"diffs":[[1,"    if (belgium.tiles.length <= 0) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1437,"length1":39,"diffs":[[1,""]]},{"start1":11466,"length1":65,"diffs":[[1,"    if len(germany.tiles) <= 0:\n"]]},{"start1":12394,"length1":63,"diffs":[[1,"    if len(france.tiles) <= 0:\n"]]},{"start1":13334,"length1":65,"diffs":[[1,"    if len(belgium.tiles) <= 0:\n"]]},{"start1":13398,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1752817776956,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1289,"length1":25,"diffs":[[1,""]]},{"start1":5505,"length1":87,"diffs":[[1,"    let accept = Math.percentChance(30)\n"]]},{"start1":8894,"length1":31,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4727,"length1":88,"diffs":[[1,"    accept = Math.percent_chance(30)\n"]]},{"start1":7726,"length1":31,"diffs":[[1,""]]}]}]},{"timestamp":1753047785110,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":11253,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1753047854890,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12185,"length1":24,"diffs":[[1,""]]},{"start1":12765,"length1":39,"diffs":[[1,""]]},{"start1":12823,"length1":181,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11193,"length1":41,"diffs":[[1,""]]},{"start1":11253,"length1":166,"diffs":[[1,"        \n"]]}]},{"type":"edited","filename":"images.g.jres","patch":[{"start1":3661,"length1":3624,"diffs":[[1,""]]}]},{"type":"edited","filename":"images.g.ts","patch":[{"start1":6043,"length1":5425,"diffs":[[1,""]]}]}]},{"timestamp":1753048335499,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":11363,"length1":28,"diffs":[[1,""]]}]}]},{"timestamp":1753048931561,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":18003,"length1":621,"diffs":[[1,"    if (mp.isButtonPressed(player, mp.MultiplayerButton.Up) || mp.isButtonPressed(player, mp.MultiplayerButton.Down) || mp.isButtonPressed(player, mp.MultiplayerButton.Left) || mp.isButtonPressed(player, mp.MultiplayerButton.Right)) {\n        animation.runImageAnimation(sprite, assets.animation`bobWalk`, 100, true)\n    } else {\n        animation.runImageAnimation(sprite, assets.animation`bobStand`, 100, true)\n"]]},{"start1":18422,"length1":0,"diffs":[[1,"    \n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11363,"length1":0,"diffs":[[1,"            p.impode = True\n"]]},{"start1":15801,"length1":585,"diffs":[[1,"    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    else:\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n"]]}]}]},{"timestamp":1753049159961,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":15895,"length1":260,"diffs":[[1,"            if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n"]]}]}]},{"timestamp":1753051576030,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":18133,"length1":254,"diffs":[[1,"            if (mp.isButtonPressed(player, mp.MultiplayerButton.Up) || mp.isButtonPressed(player, mp.MultiplayerButton.Down) || mp.isButtonPressed(player, mp.MultiplayerButton.Left) || mp.isButtonPressed(player, mp.MultiplayerButton.Right)) {\n"]]}]}]},{"timestamp":1753051576219,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7380,"length1":265,"diffs":[[1,""]]},{"start1":17333,"length1":519,"diffs":[[1,"    for (let country of countries) {\n        if (mp.getPlayerState(player, chosenCountry) == 0 && tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == country.getTileImage() && country.isAi) {\n            chooseCountry(player)\n            mp.setPlayerState(player, chosenCountry, 1)\n        } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.influencedWar != 1.1) {\n            playerSprite.sayText(\"Influenced war\", 1000)\n            country.influencedWar = 5\n        }\n        \n"]]},{"start1":17893,"length1":5,"diffs":[[1,""]]},{"start1":18003,"length1":413,"diffs":[[1,"    for (let country of countries) {\n        if (mp.getPlayerProperty(player, mp.PlayerProperty.Index) == country.playerChosen) {\n            if (mp.isButtonPressed(player, mp.MultiplayerButton.Up) || mp.isButtonPressed(player, mp.MultiplayerButton.Down) || mp.isButtonPressed(player, mp.MultiplayerButton.Left) || mp.isButtonPressed(player, mp.MultiplayerButton.Right) && country) {\n                animation.runImageAnimation(sprite, assets.animation`bobWalk`, 100, true)\n            } else {\n                animation.runImageAnimation(sprite, assets.animation`bobStand`, 100, true)\n            }\n            \n        }\n        \n"]]},{"start1":18641,"length1":5,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":6359,"length1":214,"diffs":[[1,""]]},{"start1":15048,"length1":570,"diffs":[[1,"    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar != 1.1:\n            playerSprite.say_text(\"Influenced war\", 1000)\n            country.influencedWar = 5\n"]]},{"start1":15773,"length1":431,"diffs":[[1,"    for country in countries:\n        if mp.get_player_property(player, mp.PlayerProperty.INDEX) == country.playerChosen:\n            if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT) and country:\n                animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n            else:\n                animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n"]]}]}]},{"timestamp":1753052172391,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17598,"length1":554,"diffs":[[1,"    let country = getCountryByPlayer(player)\n    if (mp.getPlayerState(player, chosenCountry) == 0 && tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == country.getTileImage() && country.isAi) {\n        chooseCountry(player)\n        mp.setPlayerState(player, chosenCountry, 1)\n    } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.influencedWar != 1.1) {\n        playerSprite.sayText(\"Influenced war\", 1000)\n        country.influencedWar = 5\n"]]},{"start1":18123,"length1":0,"diffs":[[1,"    \n"]]},{"start1":18238,"length1":356,"diffs":[[1,"    if (mp.isButtonPressed(player, mp.MultiplayerButton.Up) || mp.isButtonPressed(player, mp.MultiplayerButton.Down) || mp.isButtonPressed(player, mp.MultiplayerButton.Left) || mp.isButtonPressed(player, mp.MultiplayerButton.Right)) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":15262,"length1":535,"diffs":[[1,"    country = getCountryByPlayer(player) if getCountryByPlayer(player) != None else None\n    if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n        chooseCountry(player)\n        mp.set_player_state(player, chosenCountry, 1)\n    elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar != 1.1:\n        playerSprite.say_text(\"Influenced war\", 1000)\n        country.influencedWar = 5\n"]]},{"start1":16022,"length1":379,"diffs":[[1,"    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n"]]}]}]},{"timestamp":1753068960791,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":16089,"length1":261,"diffs":[[1,"    if ( country.isDestroyed == False ) and mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n"]]}]}]},{"timestamp":1753069023012,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":18357,"length1":787,"diffs":[[1,"    if (country.isDestroyed == false && mp.isButtonPressed(player, mp.MultiplayerButton.Up) || mp.isButtonPressed(player, mp.MultiplayerButton.Down) || mp.isButtonPressed(player, mp.MultiplayerButton.Left) || mp.isButtonPressed(player, mp.MultiplayerButton.Right)) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":16089,"length1":774,"diffs":[[1,"    if ( country.isDest and mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n"]]}]}]},{"timestamp":1753069622660,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13313,"length1":41,"diffs":[[1,""]]},{"start1":13894,"length1":24,"diffs":[[1,""]]},{"start1":14467,"length1":39,"diffs":[[1,""]]},{"start1":14525,"length1":222,"diffs":[[1,""]]},{"start1":15080,"length1":24,"diffs":[[1,""]]},{"start1":15660,"length1":39,"diffs":[[1,""]]},{"start1":15718,"length1":222,"diffs":[[1,""]]},{"start1":16282,"length1":24,"diffs":[[1,""]]},{"start1":16862,"length1":39,"diffs":[[1,""]]},{"start1":16920,"length1":222,"diffs":[[1,""]]},{"start1":18833,"length1":15,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11674,"length1":41,"diffs":[[1,""]]},{"start1":12580,"length1":41,"diffs":[[1,""]]},{"start1":12640,"length1":207,"diffs":[[1,""]]},{"start1":13546,"length1":41,"diffs":[[1,""]]},{"start1":13606,"length1":207,"diffs":[[1,""]]},{"start1":14522,"length1":41,"diffs":[[1,""]]},{"start1":14582,"length1":207,"diffs":[[1,""]]},{"start1":16357,"length1":218,"diffs":[[1,"                animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n            else:\n                animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n"]]}]}]},{"timestamp":1753070120763,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13354,"length1":39,"diffs":[[1,""]]},{"start1":14832,"length1":39,"diffs":[[1,""]]},{"start1":16310,"length1":39,"diffs":[[1,""]]},{"start1":17797,"length1":39,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11715,"length1":39,"diffs":[[1,""]]},{"start1":12929,"length1":39,"diffs":[[1,""]]},{"start1":14143,"length1":39,"diffs":[[1,""]]},{"start1":15367,"length1":39,"diffs":[[1,""]]}]}]},{"timestamp":1753070678826,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":14871,"length1":38,"diffs":[[1,"            germany.isDestroyed = true\n"]]},{"start1":16388,"length1":39,"diffs":[[1,"            germany.isDestroyed = true\n"]]},{"start1":17914,"length1":39,"diffs":[[1,"            germany.isDestroyed = true\n"]]},{"start1":18941,"length1":147,"diffs":[[1,"        } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.influencedWar != 1.1) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":12968,"length1":38,"diffs":[[1,"            germany.isDestroyed = True\n"]]},{"start1":14221,"length1":39,"diffs":[[1,"            germany.isDestroyed = True\n"]]},{"start1":15484,"length1":39,"diffs":[[1,"            germany.isDestroyed = True\n"]]},{"start1":16494,"length1":146,"diffs":[[1,"        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar != 1.1:\n"]]}]}]},{"timestamp":1753070820017,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":9367,"length1":31,"diffs":[[1,"            country.pop -= 5000\n"]]}]}]},{"timestamp":1753071859803,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10689,"length1":31,"diffs":[[1,"            country.pop -= 5000\n"]]}]}]},{"timestamp":1753071859997,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1180,"length1":34,"diffs":[[1,""]]},{"start1":1369,"length1":315,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, influencedWar: number, tilesLost: number, strategy: aiStrategy, isAi: boolean, peaceCooldown: number, isDestroyed: boolean, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1942,"length1":49,"diffs":[[1,""]]},{"start1":2226,"length1":720,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, false, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, false, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, false, [], [], \"belgiumTile\", tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, false, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":5480,"length1":87,"diffs":[[1,""]]},{"start1":5530,"length1":0,"diffs":[[1,"    let accept = Math.percentChance(30 + enemy.peacefulness / 2 + enemy.tilesLost * 2)\n"]]},{"start1":10284,"length1":85,"diffs":[[1,"    let attack = Math.percentChance(country.pop / 50000 - targetCountry.pop / 50000)\n"]]},{"start1":10387,"length1":109,"diffs":[[1,"        roll = randint(1, 100) + (country.pop / 100000 - targetCountry.pop / 100000)\n        if (roll < 80) {\n"]]},{"start1":10689,"length1":32,"diffs":[[1,"            country.pop -= 000\n"]]},{"start1":19086,"length1":371,"diffs":[[1,"            playerSprite.sayText(\"Influenced war\", 1000)\n            country.influencedWar = 5\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":306,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, influencedWar: int, tilesLost: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, isDestroyed: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1476,"length1":49,"diffs":[[1,""]]},{"start1":1733,"length1":708,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":4677,"length1":88,"diffs":[[1,""]]},{"start1":4727,"length1":0,"diffs":[[1,"    accept = Math.percent_chance(30 + (enemy.peacefulness / 2) + (enemy.tilesLost * 2))\n"]]},{"start1":8956,"length1":86,"diffs":[[1,"    attack = Math.percent_chance((country.pop / 50000) - (targetCountry.pop / 50000))\n"]]},{"start1":9057,"length1":110,"diffs":[[1,"        roll = randint(1, 100) + ((country.pop / 100000) - (targetCountry.pop / 100000))\n        if roll < 80:\n"]]},{"start1":9367,"length1":32,"diffs":[[1,"            country.pop -= 000\n"]]},{"start1":16638,"length1":317,"diffs":[[1,"            playerSprite.say_text(\"Influenced war\", 1000)\n            country.influencedWar = 5\n"]]}]}]},{"timestamp":1753072436829,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1180,"length1":29,"diffs":[[1,"    countryTargetted: countryType\n"]]},{"start1":1403,"length1":310,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, influencedWar: number, tilesLost: number, strategy: aiStrategy, isAi: boolean, peaceCooldown: number, isDestroyed: boolean, countryTargetted: countryType, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":9614,"length1":175,"diffs":[[1,"    let war = randint(1, 10000) + country.strategy.aggressiveness / 2 * country.influencedWar\n"]]},{"start1":19077,"length1":147,"diffs":[[1,"        } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.influencedWar != 5) {\n"]]},{"start1":19275,"length1":359,"diffs":[[1,"                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == country.getTileImage()) {\n                    playerSprite.sayText(\"Influenced war with \" + targetCountry.name, 1000)\n                    country.influencedWar = 5\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":298,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, influencedWar: int, tilesLost: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, isDestroyed: bool, countryTargetted: countryType, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":8304,"length1":159,"diffs":[[1,"    war = randint(1, 10000) + (country.strategy.aggressiveness / 2) * country.influencedWar\n"]]},{"start1":16596,"length1":146,"diffs":[[1,"        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar != 5:\n"]]},{"start1":16786,"length1":362,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage():\n                    playerSprite.say_text(\"Influenced war with \" + targetCountry.name, 1000)\n                    country.influencedWar = 5\n"]]}]}]},{"timestamp":1753073177590,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8455,"length1":101,"diffs":[[1,"    war > 9990 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n"]]}]}]},{"timestamp":1753073177924,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9732,"length1":42,"diffs":[[1,"        war * country.influencedWar\n"]]},{"start1":19589,"length1":51,"diffs":[[1,"                    country.influencedWar = 50000\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8419,"length1":145,"diffs":[[1,"        war * country.influencedWar\n    war > 90 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n"]]},{"start1":17089,"length1":51,"diffs":[[1,"                    country.influencedWar = 50000\n"]]}]}]},{"timestamp":1753073414449,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":16851,"length1":165,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name:\n"]]}]}]},{"timestamp":1753082460028,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":19352,"length1":162,"diffs":[[1,"                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == targetCountry.getTileImage() && targetCountry.name != country.name) {\n"]]}]}]},{"timestamp":1753082460176,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5576,"length1":118,"diffs":[[1,"    country.peaceCooldown = 200\n    let accept = Math.percentChance(30 + enemy.peacefulness / 2 + enemy.tilesLost * 2)\n    country.tilesLost = 0\n    enemy.tilesLost = 0\n"]]},{"start1":6057,"length1":58,"diffs":[[1,""]]},{"start1":11145,"length1":30,"diffs":[[1,""]]},{"start1":19352,"length1":182,"diffs":[[1,"                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == targetCountry.getTileImage() && targetCountry.name != country.name && country) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4741,"length1":119,"diffs":[[1,"    country.peaceCooldown = 200\n    accept = Math.percent_chance(30 + (enemy.peacefulness / 2) + (enemy.tilesLost * 2))\n    country.tilesLost = 0\n    enemy.tilesLost = 0\n"]]},{"start1":5225,"length1":58,"diffs":[[1,""]]},{"start1":9776,"length1":30,"diffs":[[1,""]]},{"start1":16851,"length1":183,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name and country:\n"]]}]}]},{"timestamp":1753083047810,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3717,"length1":45,"diffs":[[1,"    country.pop += country.tiles.length * 10\n"]]},{"start1":5607,"length1":87,"diffs":[[1,"    let accept = Math.percentChance(50 + enemy.peacefulness / 2 + enemy.tilesLost * 2)\n"]]},{"start1":10457,"length1":22,"diffs":[[1,"    let roll: any;\n"]]},{"start1":10910,"length1":37,"diffs":[[1,"            country.pop -= 1000\n"]]},{"start1":11152,"length1":43,"diffs":[[1,"            targetCountry.pop\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":3144,"length1":43,"diffs":[[1,"    country.pop += len(country.tiles) * 10\n"]]},{"start1":4772,"length1":88,"diffs":[[1,"    accept = Math.percent_chance(50 + (enemy.peacefulness / 2) + (enemy.tilesLost * 2))\n"]]},{"start1":9542,"length1":37,"diffs":[[1,"            country.pop -= 1000\n"]]},{"start1":9783,"length1":43,"diffs":[[1,"            targetCountry.pop\n"]]}]}]},{"timestamp":1753083539025,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1318,"length1":0,"diffs":[[1,"    peacefulness: number\n"]]},{"start1":5607,"length1":40,"diffs":[[1,"    let accept = Math.percentChance(75 + enemy.peacefulness / 2 + enemy.tilesLost * 2)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4772,"length1":37,"diffs":[[1,"    accept = Math.percent_chance(75 + (enemy.peacefulness / 2) + (enemy.tilesLost * 2))\n"]]}]}]},{"timestamp":1753134204858,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5353,"length1":36,"diffs":[[1,"    accept = Math.percent_chance(5 * enemy.tilesLost)\n"]]}]}]},{"timestamp":1753134302752,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5582,"length1":58,"diffs":[[1,"    let accept = Math.percentChance(50)\n"]]},{"start1":6184,"length1":40,"diffs":[[1,"    let accept = Math.percentChance(5 * enemy.tilesLost)\n"]]},{"start1":10437,"length1":91,"diffs":[[1,"    let attack = Math.percentChance(country.pop / 10000 - targetCountry.pop / 10000)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4772,"length1":55,"diffs":[[1,"    accept = Math.percent_chance(50)\n"]]},{"start1":5353,"length1":37,"diffs":[[1,"    accept = Math.percent_chance(5)\n"]]},{"start1":9063,"length1":92,"diffs":[[1,"    attack = Math.percent_chance((country.pop / 10000) - (targetCountry.pop / 10000))\n"]]}]}]},{"timestamp":1753134513905,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":9174,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1753136919737,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":9174,"length1":8,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1753136921164,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10291,"length1":164,"diffs":[[1,""]]},{"start1":10438,"length1":149,"diffs":[[1,"    let attack = Math.percentChance(5 + (country.pop / 10000 - targetCountry.pop / 10000))\n"]]},{"start1":19619,"length1":46,"diffs":[[1,"                    country.influencedWar = 500000\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8993,"length1":148,"diffs":[[1,""]]},{"start1":9082,"length1":137,"diffs":[[1,"    attack = Math.percent_chance(5 + ((country.pop / 10000) - (targetCountry.pop / 10000)))\n    if \n"]]},{"start1":17146,"length1":46,"diffs":[[1,"                    country.influencedWar = 500000\n"]]}]}]},{"timestamp":1753137438814,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10550,"length1":0,"diffs":[[1,"    let roll: number;\n"]]},{"start1":10602,"length1":0,"diffs":[[1,"    let attack = Math.percentChance(0.5 + (country.pop / 10000 - targetCountry.pop / 10000))\n"]]},{"start1":10751,"length1":127,"diffs":[[1,"    if (attack) {\n        roll = randint(1, 500) + (country.pop / 10000 - targetCountry.pop / 10000)\n        if (roll < 480) {\n            failedBattle = sprites.create(assets.image`failedBattle`, fight)\n            failedBattle.setPosition(enemyTile.x, enemyTile.y)\n            failedBattle.destroy(effects.fire, 100)\n            country.pop -= roll * 10\n        } else {\n            tiles.setTileAt(enemyTile, country.getTileImage())\n            removeTile(targetCountry, enemyTile)\n            addTile(country, enemyTile)\n            targetCountry.tilesLost += 1\n            targetCountry.pop -= roll * 10\n        }\n        \n"]]},{"start1":11390,"length1":558,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":893,"length1":129,"diffs":[[1,""]]},{"start1":9230,"length1":0,"diffs":[[1,"    attack = Math.percent_chance(0.5 + ((country.pop / 10000) - (targetCountry.pop / 10000)))\n"]]},{"start1":9367,"length1":678,"diffs":[[1,"    if attack:\n        roll = randint(1, 500) + ((country.pop / 10000) - (targetCountry.pop / 10000))\n        if roll < 480:\n            failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n            failedBattle.set_position(enemyTile.x, enemyTile.y)\n            failedBattle.destroy(effects.fire, 100)\n            country.pop -= roll * 10\n        else:\n            tiles.set_tile_at(enemyTile, country.getTileImage())\n            removeTile(targetCountry, enemyTile)\n            addTile(country, enemyTile)\n            targetCountry.tilesLost += 1\n            targetCountry.pop -= roll * 10\n"]]}]}]},{"timestamp":1753138037493,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":969,"length1":570,"diffs":[[1,""]]},{"start1":1038,"length1":0,"diffs":[[1,"    influencedWar: number\n    tilesLost: number\n"]]},{"start1":1129,"length1":35,"diffs":[[1,"    peaceCooldown: number\n"]]},{"start1":1180,"length1":0,"diffs":[[1,"    countryTargetted: string\n"]]},{"start1":1269,"length1":0,"diffs":[[1,"    tileName: string\n"]]},{"start1":1318,"length1":74,"diffs":[[1,""]]},{"start1":1348,"length1":29,"diffs":[[1,""]]},{"start1":1373,"length1":259,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, influencedWar: number, tilesLost: number, strategy: aiStrategy, isAi: boolean, peaceCooldown: number, isDestroyed: boolean, countryTargetted: string, tradePartners: countryType[], enemies: countryType[], tileName: string, tiles: tiles.Location[] = []) {\n"]]},{"start1":1754,"length1":0,"diffs":[[1,"        this.influencedWar = influencedWar\n        this.tilesLost = tilesLost\n"]]},{"start1":1890,"length1":55,"diffs":[[1,"        this.peaceCooldown = peaceCooldown\n"]]},{"start1":1972,"length1":0,"diffs":[[1,"        this.countryTargetted = countryTargetted\n"]]},{"start1":2095,"length1":0,"diffs":[[1,"        this.tileName = tileName\n"]]},{"start1":2305,"length1":778,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, false, null, [], [], \"germanTile\", tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, false, null, [], [], \"franceTile\", tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, false, null, [], [], \"belgiumTile\", tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, 1, 0, new aiStrategy(\"\", 0, 0, 0), true, 0, false, null, [], [], \"britainTile\", tiles.getTilesByType(assets.tile`britainTile`))\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":910,"length1":409,"diffs":[[1,"    def __init__(self, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, tradePa)\n"]]},{"start1":1041,"length1":236,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, influencedWar: int, tilesLost: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, isDestroyed: bool, countryTargetted: str, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n"]]},{"start1":1410,"length1":0,"diffs":[[1,"        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n"]]},{"start1":1546,"length1":55,"diffs":[[1,"        self.peaceCooldown = peaceCooldown\n"]]},{"start1":1628,"length1":0,"diffs":[[1,"        self.countryTargetted = countryTargetted\n"]]},{"start1":1751,"length1":0,"diffs":[[1,"        self.tileName = tileName\n"]]},{"start1":1934,"length1":750,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, None, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, None, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, None, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, None, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]}]}]},{"timestamp":1753138620090,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1957,"length1":233,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, diplomaticSituation: diplomacy, isDestroyed: boolean, countryTargetted: string, tradePartners: countryType[], enemies: countryType[], tiles: tiles.Location[] = []) {\n"]]},{"start1":2690,"length1":754,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, new diplomacy(1, 0, 0, null, [], []), false, null, [], [], tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, new diplomacy(1, 0, 0, null, [], []), false, null, [], [], tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, new diplomacy(1, 0, 0, null, [], []), false, null, [], [], tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, new diplomacy(1, 0, 0, null, [], []), false, null, [], [], tiles.getTilesByType(assets.tile`britainTile`))\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":1339,"length1":174,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, diplomaticSituation: diplomacy, isDestroyed: bool, tradePartners: List[countryType], enemies: List[countryType], tiles: List[tiles.Location] = []):\n"]]},{"start1":1798,"length1":0,"diffs":[[1,"        self.tradePartners = tradePartners\n        self.enemies = enemies\n"]]},{"start1":2022,"length1":694,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, None, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, None, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, None, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, None, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":4324,"length1":50,"diffs":[[1,"    country.influencedWar = 1\n"]]},{"start1":4448,"length1":67,"diffs":[[1,"    for tradeCountry in country.tradePartners:\n"]]}]}]},{"timestamp":1753138913386,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":893,"length1":0,"diffs":[[1,"class diplomacy:\n    def __init__(self, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, tradePartners: List[countryType], enemies: List[countryType]):\n        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n        self.peaceCooldown = peaceCooldown\n        self.countryTargetted = countryTargetted\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n\n"]]}]}]},{"timestamp":1753147143620,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1458,"length1":10,"diffs":[[1,""]]}]}]},{"timestamp":1753147147383,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":893,"length1":427,"diffs":[[1,""]]},{"start1":1215,"length1":80,"diffs":[[1,"        self.diplomaticSituation = diplomaticSituation\n"]]},{"start1":1458,"length1":0,"diffs":[[1,"    \n    \n"]]}]}]},{"timestamp":1753147736317,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":893,"length1":0,"diffs":[[1,"class diplomacy:\n    def __init__(self, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, tradePartners: List[countryType], enemies: List[countryType]):\n        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n        self.peaceCooldown = peaceCooldown\n        self.countryTargetted = countryTargetted\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n\n"]]},{"start1":1642,"length1":52,"diffs":[[1,"        self.diplomaticSituation = diplomacy(influencedWar, 0, 0, None, [], [])\n"]]},{"start1":1910,"length1":463,"diffs":[[1,""]]}]}]},{"timestamp":1753148332540,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":142,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, diplomaticSituation: diplomacy, isDestroyed: bool, tiles: List[tiles.Location] = []):\n"]]},{"start1":1333,"length1":1,"diffs":[[1,"    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n    \n"]]},{"start1":1918,"length1":122,"diffs":[[1,""]]}]}]},{"timestamp":1753148396315,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":893,"length1":455,"diffs":[[1,""]]},{"start1":912,"length1":174,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, isDestroyed: bool, tiles: List[tiles.Location] = []):\n"]]},{"start1":1183,"length1":55,"diffs":[[1,"        self.diplomaticSituation = self.diplomacy()\n"]]},{"start1":1301,"length1":0,"diffs":[[1,"\n    class diplomacy:\n        def __init__(self, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, tradePartners: List[countryType], enemies: List[countryType]):\n            self.influencedWar = influencedWar\n            self.tilesLost = tilesLost\n            self.peaceCooldown = peaceCooldown\n            self.countryTargetted = countryTargetted\n            self.tradePartners = tradePartners\n            self.enemies = enemies\n"]]}]}]},{"timestamp":1753148981784,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1367,"length1":278,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, diplomaticSituation: diplomacy, isDestroyed: bool, tiles: List[tiles.Location] = []):\n"]]},{"start1":1670,"length1":128,"diffs":[[1,"        self.diplomaticSituation = diplomaticSituation\n"]]},{"start1":1914,"length1":650,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]}]}]},{"timestamp":1753149488935,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":910,"length1":409,"diffs":[[1,"        def __init__(self, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, tradePartners: List[countryType], enemies: List[countryType]):\n            self.influencedWar = influencedWar\n            self.tilesLost = tilesLost\n            self.peaceCooldown = peaceCooldown\n            self.countryTargetted = countryTargetted\n            self.tradePartners = tradePartners\n            self.enemies = enemies\n"]]}]}]},{"timestamp":1753220436504,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1746,"length1":34,"diffs":[[1,"        self.diplomaticSituation = diplomacy(influencedWar, tilesLost, peaceCooldown, countryTargetted, tradePartners, enemies)\n"]]}]}]},{"timestamp":1753220469879,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":969,"length1":0,"diffs":[[1,"class diplomacy {\n    influencedWar: number\n    tilesLost: number\n    peaceCooldown: number\n    countryTargetted: string\n    tradePartners: any[]\n    enemies: any[]\n    constructor(influencedWar: number, tilesLost: number, peaceCooldown: number, countryTargetted: string, tradePartners: any[], enemies: any[]) {\n        this.influencedWar = influencedWar\n        this.tilesLost = tilesLost\n        this.peaceCooldown = peaceCooldown\n        this.countryTargetted = countryTargetted\n        this.tradePartners = tradePartners\n        this.enemies = enemies\n    }\n    \n}\n\n"]]},{"start1":1651,"length1":103,"diffs":[[1,"    diplomaticSituation: diplomacy\n    isDestroyed: boolean\n"]]},{"start1":1771,"length1":25,"diffs":[[1,""]]},{"start1":1799,"length1":0,"diffs":[[1,"    influencedWar: number\n    peaceCooldown: number\n    tilesLost: number\n"]]},{"start1":1903,"length1":0,"diffs":[[1,"    countryTargetted: string\n"]]},{"start1":1957,"length1":287,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, diplomaticSituation: diplomacy, isDestroyed: boolean, tradePartners: countryType[], enemies: countryType[], tiles: tiles.Location[] = []) {\n"]]},{"start1":2319,"length1":170,"diffs":[[1,"        this.diplomaticSituation = diplomaticSituation\n        this.isDestroyed = isDestroyed\n"]]},{"start1":2487,"length1":39,"diffs":[[1,""]]},{"start1":2664,"length1":662,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, new diplomacy(1, 0, 0, null, [], []), false, [], [], tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, new diplomacy(1, 0, 0, null, [], []), false, [], [], tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, new diplomacy(1, 0, 0, null, [], []), false, [], [], tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, new diplomacy(1, 0, 0, null, [], []), false, [], [], tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":8102,"length1":62,"diffs":[[1,"function getBorderingCountries(country: countryType, targetCountry: countryType) {\n"]]},{"start1":8259,"length1":304,"diffs":[[1,"        if (tiles.tileAtLocationEquals(tile.getNeighboringLocation(CollisionDirection.Left), targetCountry.getTileImage())) {\n            country.borderingCountries.push(targetCountry)\n        }\n        \n        if (tiles.tileAtLocationEquals(tile.getNeighboringLocation(CollisionDirection.Right), targetCountry.getTileImage())) {\n"]]},{"start1":8603,"length1":258,"diffs":[[1,"        }\n        \n        if (tiles.tileAtLocationEquals(tile.getNeighboringLocation(CollisionDirection.Top), targetCountry.getTileImage())) {\n"]]},{"start1":8760,"length1":256,"diffs":[[1,"        }\n        \n        if (tiles.tileAtLocationEquals(tile.getNeighboringLocation(CollisionDirection.Bottom), targetCountry.getTileImage())) {\n"]]},{"start1":8920,"length1":272,"diffs":[[1,""]]},{"start1":8930,"length1":0,"diffs":[[1,"        \n"]]},{"start1":8945,"length1":38,"diffs":[[1,""]]},{"start1":13431,"length1":60,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":893,"length1":0,"diffs":[[1,"class diplomacy:\n    def __init__(self, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, tradePartners: List[countryType], enemies: List[countryType]):\n        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n        self.peaceCooldown = peaceCooldown\n        self.countryTargetted = countryTargetted\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n\n"]]},{"start1":1746,"length1":244,"diffs":[[1,"        self.influencedWar = infl\n"]]},{"start1":4171,"length1":30,"diffs":[[1,"    country.diplomaticSituation.influencedWar = 1\n"]]},{"start1":4315,"length1":47,"diffs":[[1,"    for tradeCountry in country.diplomaticSituation.tradePartners:\n"]]},{"start1":6772,"length1":49,"diffs":[[1,"def getBorderingCountries(country: countryType, targetCountry: countryType):\n"]]},{"start1":6916,"length1":1068,"diffs":[[1,"        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            country.borderingCountries.append(targetCountry)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            pass\n"]]},{"start1":11507,"length1":56,"diffs":[[1,""]]}]}]},{"timestamp":1753220959509,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1297,"length1":38,"diffs":[[1,"    borderingCountries: any[]\n"]]},{"start1":7574,"length1":122,"diffs":[[1,"function getBorderingCountries(country: countryType): any[] {\n    country.borderingCountries = []\n"]]},{"start1":13342,"length1":0,"diffs":[[1,"    let index = countries.length - 1\n"]]},{"start1":13439,"length1":108,"diffs":[[1,"    let randomCountry = countries[randint(0, index)]\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":6564,"length1":31,"diffs":[[1,"    country.borderingCountries = []\n"]]},{"start1":11633,"length1":0,"diffs":[[1,"    index = len(countries) - 1\n"]]},{"start1":11720,"length1":98,"diffs":[[1,"    randomCountry = countries[randint(0, index)]\n"]]}]}]},{"timestamp":1753221491838,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6564,"length1":34,"diffs":[[1,"    country.borderingCountries\n"]]}]}]},{"timestamp":1753223087656,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6564,"length1":35,"diffs":[[1,"    country.borderingCountries = \n"]]}]}]},{"timestamp":1753223087905,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6564,"length1":54,"diffs":[[1,"    country.borderingCountries = l\n"]]}]}]},{"timestamp":1753223656127,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1184,"length1":38,"diffs":[[1,""]]},{"start1":1297,"length1":0,"diffs":[[1,"    borderingCountries: countryType[]\n"]]},{"start1":1360,"length1":322,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, influencedWar: number, tilesLost: number, peaceCooldown: number, countryTargetted: string, tradePartners: countryType[], enemies: countryType[], isDestroyed: boolean, tiles: tiles.Location[]) {\n"]]},{"start1":1946,"length1":53,"diffs":[[1,""]]},{"start1":2236,"length1":678,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], false, tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], false, tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], false, tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], false, tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":7652,"length1":0,"diffs":[[1,"    country.borderingCountries : countryType[] = []\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":317,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, tiles: List[tiles.Location]):\n"]]},{"start1":1489,"length1":53,"diffs":[[1,""]]},{"start1":1752,"length1":666,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":6564,"length1":0,"diffs":[[1,"    country.borderingCountries List[countryType] = []\n"]]}]}]},{"timestamp":1753224291961,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":7683,"length1":0,"diffs":[[1,"                return country.borderingCountries\n    return country.borderingCountries\n"]]}]}]},{"timestamp":1753224307531,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7686,"length1":55,"diffs":[[1,"function getBorderingCountries(country: countryType): countryType[] {\n"]]},{"start1":8034,"length1":0,"diffs":[[1,"                return country.borderingCountries\n"]]},{"start1":8305,"length1":0,"diffs":[[1,"                return country.borderingCountries\n"]]},{"start1":8574,"length1":0,"diffs":[[1,"                return country.borderingCountries\n"]]},{"start1":8846,"length1":0,"diffs":[[1,"                return country.borderingCountries\n"]]},{"start1":8939,"length1":0,"diffs":[[1,"    return country.borderingCountries\n"]]},{"start1":13182,"length1":111,"diffs":[[1,"game.onUpdateInterval(100, function Germany() {\n"]]},{"start1":13374,"length1":545,"diffs":[[1,"    let pop = popGain(germany)\n    ecoGain(germany)\n    let borderingCountries = getBorderingCountries(germany)\n    let index = borderingCountries.length - 1\n    let randomCountry = borderingCountries[randint(0, index)]\n    let enemyIndex = germany.enemies.length\n    if (!germany.isAi) {\n        p = germany.playerChosen == 0 ? mp.playerSelector(mp.PlayerNumber.One) : (germany.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.Two) : (germany.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n"]]},{"start1":14025,"length1":73,"diffs":[[1,"        if (germany.tiles.length <= 0 && germany.isDestroyed == false) {\n"]]},{"start1":14228,"length1":39,"diffs":[[1,"            germany.isDestroyed = true\n"]]},{"start1":14297,"length1":264,"diffs":[[1,"    if (randomCountry.name != germany.name) {\n        externalEvent(germany, randomCountry)\n        if (germany.enemies.length > 0) {\n            randomEnemyIndex = germany.enemies.length - 1\n            randomEnemy = germany.enemies[randint(0, randomEnemyIndex)]\n"]]},{"start1":14601,"length1":40,"diffs":[[1,"            war(germany, targetCountry)\n"]]},{"start1":14671,"length1":100,"diffs":[[1,"    if (germany.tiles.length <= 0 && germany.isDestroyed == false) {\n        removeCountry(germany)\n"]]},{"start1":14782,"length1":23,"diffs":[[1,"})\ngame.onUpdateInterval(100, function France() {\n"]]},{"start1":16290,"length1":24,"diffs":[[1,"})\ngame.onUpdateInterval(100, function Belgium() {\n"]]},{"start1":17816,"length1":24,"diffs":[[1,"})\ngame.onUpdateInterval(100, function Britain() {\n"]]},{"start1":19342,"length1":194,"diffs":[[1,"})\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":6940,"length1":0,"diffs":[[1,"                return country.borderingCountries\n"]]},{"start1":7188,"length1":0,"diffs":[[1,"                return country.borderingCountries\n"]]},{"start1":7434,"length1":0,"diffs":[[1,"                return country.borderingCountries\n"]]},{"start1":11554,"length1":626,"diffs":[[1,"def Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    borderingCountries = getBorderingCountries(germany)\n    index = len(borderingCountries) - 1\n    randomCountry = borderingCountries[randint(0, index)]\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n"]]},{"start1":12212,"length1":69,"diffs":[[1,"        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n"]]},{"start1":12419,"length1":293,"diffs":[[1,"            germany.isDestroyed = True\n    if randomCountry.name != germany.name:\n        externalEvent(germany, randomCountry)\n        if len(germany.enemies) > 0:\n            randomEnemyIndex = len(germany.enemies) - 1\n            randomEnemy = germany.enemies[randint(0, randomEnemyIndex)]\n"]]},{"start1":12752,"length1":136,"diffs":[[1,"            war(germany, targetCountry)\n    if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n        removeCountry(germany)\n"]]},{"start1":16667,"length1":199,"diffs":[[1,"game.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n"]]}]}]},{"timestamp":1753224849415,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13184,"length1":21,"diffs":[[1,"    let pop = popGain(country)\n"]]},{"start1":13768,"length1":66,"diffs":[[1,"        mp.setPlayerState(p, MultiplayerState.score, pop)\n"]]},{"start1":14583,"length1":11,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11493,"length1":21,"diffs":[[1,"    pop = popGain(country)\n"]]},{"start1":12071,"length1":68,"diffs":[[1,"        mp.set_player_state(p, MultiplayerState.score, pop)\n"]]},{"start1":12807,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1753225448944,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12929,"length1":57,"diffs":[[1,"function createCountry(country: countryType) {\n    \n}\n\nfunction runCountry(country: countryType): () => void {\n"]]},{"start1":14581,"length1":19,"diffs":[[1,"    return\n"]]},{"start1":19074,"length1":0,"diffs":[[1,"game.onUpdateInterval(100, runCountry(germany))\ngame.onUpdateInterval(100, runCountry(france))\ngame.onUpdateInterval(100, runCountry(belgium))\ngame.onUpdateInterval(100, runCountry(britain))\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11404,"length1":199,"diffs":[[1,"def createCountry(country: countryType):\n    pass\n"]]},{"start1":12809,"length1":19,"diffs":[[1,"    \n"]]},{"start1":16583,"length1":0,"diffs":[[1,"        \n"]]},{"start1":16593,"length1":0,"diffs":[[1,"game.on_update_interval(100, runCountry(germany))\ngame.on_update_interval(100, runCountry(france))\ngame.on_update_interval(100, runCountry(belgium))\ngame.on_update_interval(100, runCountry(britain))\n\n"]]}]}]},{"timestamp":1753225940147,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12929,"length1":235,"diffs":[[1,"function runCountry(country: countryType): countryType {\n"]]},{"start1":14527,"length1":0,"diffs":[[1,"    return country\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11604,"length1":46,"diffs":[[1,"def runCountry(country: countryType):\n"]]},{"start1":12958,"length1":0,"diffs":[[1,"    return country\n"]]}]}]},{"timestamp":1753226441965,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":11604,"length1":45,"diffs":[[1,"def runCountry(country: countryType) -> None:\n"]]}]}]},{"timestamp":1753232562873,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":11604,"length1":38,"diffs":[[1,"def runCountry(country: countryType) -> one:\n"]]}]}]},{"timestamp":1753232565289,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13120,"length1":56,"diffs":[[1,"function runCountry(country: countryType) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11245,"length1":0,"diffs":[[1,"germany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ngame.on_update_interval(100, runCountry(germany))\ngame.on_update_interval(100, runCountry(france))\ngame.on_update_interval(100, runCountry(belgium))\ngame.on_update_interval(100, runCountry(britain))\n\n"]]},{"start1":12959,"length1":363,"diffs":[[1,""]]}]}]},{"timestamp":1753232754714,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":12962,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1753237600445,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":12962,"length1":9,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1753237603596,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12771,"length1":105,"diffs":[[1,""]]},{"start1":12929,"length1":48,"diffs":[[1,"game.onUpdateInterval(100, runCountry(germany))\ngame.onUpdateInterval(100, runCountry(france))\ngame.onUpdateInterval(100, runCountry(belgium))\ngame.onUpdateInterval(100, runCountry(britain))\nfunction runCountry(country: countryType): () => void {\n"]]},{"start1":13320,"length1":559,"diffs":[[1,"    popGain(country)\n    ecoGain(country)\n    getBorderingCountries(country)\n    let index = country.borderingCountries.length - 1\n    let randomCountry = country.borderingCountries[randint(0, index)]\n    let enemyIndex = country.enemies.length\n    if (!country.isAi) {\n        p = country.playerChosen == 0 ? mp.playerSelector(mp.PlayerNumber.One) : (country.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.Two) : (country.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n"]]},{"start1":13894,"length1":139,"diffs":[[1,"        mp.setPlayerState(p, MultiplayerState.score, country.pop)\n        if (country.tiles.length <= 0 && country.isDestroyed == false) {\n"]]},{"start1":14163,"length1":39,"diffs":[[1,"            country.isDestroyed = true\n"]]},{"start1":14232,"length1":264,"diffs":[[1,"    if (randomCountry.name != country.name) {\n        externalEvent(country, randomCountry)\n        if (country.enemies.length > 0) {\n            randomEnemyIndex = country.enemies.length - 1\n            randomEnemy = country.enemies[randint(0, randomEnemyIndex)]\n"]]},{"start1":14536,"length1":40,"diffs":[[1,"            war(country, targetCountry)\n"]]},{"start1":14606,"length1":100,"diffs":[[1,"    if (country.tiles.length <= 0 && country.isDestroyed == false) {\n        removeCountry(country)\n"]]},{"start1":14717,"length1":146,"diffs":[[1,"}\n\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11283,"length1":0,"diffs":[[1,"    popGain(country)\n    ecoGain(country)\n"]]},{"start1":11360,"length1":29,"diffs":[[1,"    index = len(country.borderingCountries) - 1\n    randomCountry = country.borderingCountries[randint(0, index)]\n    enemyIndex = len(country.enemies)\n    if not country.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if country.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if country.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if country.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, country.pop)\n        if len(country.tiles) <= 0 and country.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            country.isDestroyed = True\n    if randomCountry.name != country.name:\n        externalEvent(country, randomCountry)\n        if len(country.enemies) > 0:\n            randomEnemyIndex = len(country.enemies) - 1\n            randomEnemy = country.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(country, targetCountry)\n    if len(country.tiles) <= 0 and country.isDestroyed == False:\n        removeCountry(country)\n"]]},{"start1":12797,"length1":37,"diffs":[[1,"game.on_update_interval(100, runCountry(france))\n"]]},{"start1":12962,"length1":1340,"diffs":[[1,"    runC\n"]]}]}]},{"timestamp":1753238046032,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":11582,"length1":30,"diffs":[[1,"game.on_update_interval(100, runCountry(belgium))\n"]]}]}]},{"timestamp":1753241487472,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":11582,"length1":31,"diffs":[[1,"game.on_update_interval(100, \n"]]}]}]},{"timestamp":1753241487978,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10808,"length1":91,"diffs":[[1,"    let attack = Math.percentChance(0.5 + (country.pop / 10000 - targetCountry.pop / 10000))\n"]]},{"start1":12771,"length1":44,"diffs":[[1,"function runCountry(country: countryType): () => void {\n    getBorderingCountries(country)\n    return\n}\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\ngame.onUpdateInterval(100, function Germany() {\n"]]},{"start1":13226,"length1":566,"diffs":[[1,"    runCountry(germany)\n    popGain(germany)\n    ecoGain(germany)\n    getBorderingCountries(germany)\n    let index = germany.borderingCountries.length - 1\n    let randomCountry = germany.borderingCountries[randint(0, index)]\n    let enemyIndex = germany.enemies.length\n    if (!germany.isAi) {\n        p = germany.playerChosen == 0 ? mp.playerSelector(mp.PlayerNumber.One) : (germany.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.Two) : (germany.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n"]]},{"start1":13824,"length1":139,"diffs":[[1,"        mp.setPlayerState(p, MultiplayerState.score, germany.pop)\n        if (germany.tiles.length <= 0 && germany.isDestroyed == false) {\n"]]},{"start1":14093,"length1":39,"diffs":[[1,"            germany.isDestroyed = true\n"]]},{"start1":14162,"length1":264,"diffs":[[1,"    if (randomCountry.name != germany.name) {\n        externalEvent(germany, randomCountry)\n        if (germany.enemies.length > 0) {\n            randomEnemyIndex = germany.enemies.length - 1\n            randomEnemy = germany.enemies[randint(0, randomEnemyIndex)]\n"]]},{"start1":14466,"length1":40,"diffs":[[1,"            war(germany, targetCountry)\n"]]},{"start1":14536,"length1":100,"diffs":[[1,"    if (germany.tiles.length <= 0 && germany.isDestroyed == false) {\n        removeCountry(germany)\n"]]},{"start1":14647,"length1":0,"diffs":[[1,"})\ngame.onUpdateInterval(100, runCountry(france))\ngame.onUpdateInterval(100, runCountry(belgium))\ngame.onUpdateInterval(100, runCountry(britain))\nfunction France() {\n    let p: any;\n    let sprite: Sprite;\n    let randomEnemyIndex: number;\n    let randomEnemy: countryType;\n    let targetCountry: countryType;\n    let pop = popGain(france)\n    ecoGain(france)\n    let index = countries.length - 1\n    let randomCountry = countries[randint(0, index)]\n    let enemyIndex = france.enemies.length\n    if (!france.isAi) {\n        p = france.playerChosen == 0 ? mp.playerSelector(mp.PlayerNumber.One) : (france.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.Two) : (france.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n        sprite = mp.getPlayerSprite(p)\n        mp.setPlayerState(p, MultiplayerState.score, pop)\n        if (germany.tiles.length <= 0 && germany.isDestroyed == false) {\n            animation.runImageAnimation(sprite, assets.animation`bobImplode`, 50, false)\n            sprite.destroy(effects.fire)\n            france.isDestroyed = true\n        }\n        \n    }\n    \n    if (randomCountry.name != france.name) {\n        externalEvent(france, randomCountry)\n        if (france.enemies.length != 0) {\n            randomEnemyIndex = france.enemies.length - 1\n            randomEnemy = france.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(france, targetCountry)\n        }\n        \n    }\n    \n    if (france.tiles.length <= 0 && france.isDestroyed == false) {\n        removeCountry(france)\n    }\n    \n"]]},{"start1":16274,"length1":456,"diffs":[[1,"function Belgium() {\n    let p: any;\n    let sprite: Sprite;\n    let randomEnemyIndex: number;\n    let randomEnemy: countryType;\n    let targetCountry: countryType;\n    let pop = popGain(belgium)\n    ecoGain(belgium)\n    let index = countries.length - 1\n    let randomCountry = countries[randint(0, index)]\n    let enemyIndex = belgium.enemies.length\n    if (!belgium.isAi) {\n        p = belgium.playerChosen == 0 ? mp.playerSelector(mp.PlayerNumber.One) : (belgium.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.Two) : (belgium.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n        sprite = mp.getPlayerSprite(p)\n        mp.setPlayerState(p, MultiplayerState.score, pop)\n        if (germany.tiles.length <= 0 && germany.isDestroyed == false) {\n            animation.runImageAnimation(sprite, assets.animation`bobImplode`, 50, false)\n            sprite.destroy(effects.fire)\n            belgium.isDestroyed = true\n        }\n        \n    }\n    \n    if (randomCountry.name != belgium.name) {\n        externalEvent(belgium, randomCountry)\n        if (belgium.enemies.length != 0) {\n            randomEnemyIndex = belgium.enemies.length - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(belgium, targetCountry)\n        }\n        \n    }\n    \n    if (belgium.tiles.length <= 0 && belgium.isDestroyed == false) {\n        removeCountry(belgium)\n    }\n    \n}\n\nfunction Britain() {\n    let p: any;\n    let sprite: Sprite;\n    let randomEnemyIndex: number;\n    let randomEnemy: countryType;\n    let targetCountry: countryType;\n    let pop = popGain(britain)\n    ecoGain(britain)\n    let index = countries.length - 1\n    let randomCountry = countries[randint(0, index)]\n    let enemyIndex = britain.enemies.length\n    if (!britain.isAi) {\n        p = britain.playerChosen == 0 ? mp.playerSelector(mp.PlayerNumber.One) : (britain.playerChosen == 1 ? mp.playerSelector(mp.PlayerNumber.Two) : (britain.playerChosen == 2 ? mp.playerSelector(mp.PlayerNumber.Three) : mp.playerSelector(mp.PlayerNumber.Four)))\n        sprite = mp.getPlayerSprite(p)\n        mp.setPlayerState(p, MultiplayerState.score, pop)\n        if (germany.tiles.length <= 0 && germany.isDestroyed == false) {\n            animation.runImageAnimation(sprite, assets.animation`bobImplode`, 50, false)\n            sprite.destroy(effects.fire)\n            britain.isDestroyed = true\n        }\n        \n    }\n    \n    if (randomCountry.name != britain.name) {\n        externalEvent(britain, randomCountry)\n        if (britain.enemies.length != 0) {\n            randomEnemyIndex = britain.enemies.length - 1\n            randomEnemy = britain.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(britain, targetCountry)\n        }\n        \n    }\n    \n    if (britain.tiles.length <= 0 && britain.isDestroyed == false) {\n        removeCountry(britain)\n    }\n    \n}\n\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":9410,"length1":92,"diffs":[[1,"    attack = Math.percent_chance(0.5 + ((country.pop / 10000) - (targetCountry.pop / 10000)))\n"]]},{"start1":11318,"length1":1312,"diffs":[[1,"    return country\n"]]},{"start1":11582,"length1":76,"diffs":[[1,"game.on_update_interval(100, )\ngame.on_update_interval(100, runCountry(britain))\n"]]},{"start1":11703,"length1":0,"diffs":[[1,"    popGain(germany)\n    ecoGain(germany)\n    getBorderingCountries(germany)\n    index = len(germany.borderingCountries) - 1\n    randomCountry = germany.borderingCountries[randint(0, index)]\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, germany.pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            germany.isDestroyed = True\n    if randomCountry.name != germany.name:\n        externalEvent(germany, randomCountry)\n        if len(germany.enemies) > 0:\n            randomEnemyIndex = len(germany.enemies) - 1\n            randomEnemy = germany.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(germany, targetCountry)\n    if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n        removeCountry(germany)\n"]]},{"start1":13034,"length1":23,"diffs":[[1,"    pop = popGain(france)\n    ecoGain(france)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            france.isDestroyed = True\n    if randomCountry.name != france.name:\n        externalEvent(france, randomCountry)\n        if len(france.enemies) != 0:\n            randomEnemyIndex = len(france.enemies) - 1\n            randomEnemy = france.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(france, targetCountry)\n    if len(france.tiles) <= 0 and france.isDestroyed == False:\n        removeCountry(france)\n"]]},{"start1":14279,"length1":24,"diffs":[[1,"    pop = popGain(belgium)\n    ecoGain(belgium)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(belgium.enemies)\n    if not belgium.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if belgium.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if belgium.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if belgium.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            belgium.isDestroyed = True\n    if randomCountry.name != belgium.name:\n        externalEvent(belgium, randomCountry)\n        if len(belgium.enemies) != 0:\n            randomEnemyIndex = len(belgium.enemies) - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(belgium, targetCountry)\n    if len(belgium.tiles) <= 0 and belgium.isDestroyed == False:\n        removeCountry(belgium)\n"]]},{"start1":15526,"length1":0,"diffs":[[1,"\n"]]},{"start1":15542,"length1":24,"diffs":[[1,"    pop = popGain(britain)\n    ecoGain(britain)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(britain.enemies)\n    if not britain.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if britain.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if britain.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if britain.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            britain.isDestroyed = True\n    if randomCountry.name != britain.name:\n        externalEvent(britain, randomCountry)\n        if len(britain.enemies) != 0:\n            randomEnemyIndex = len(britain.enemies) - 1\n            randomEnemy = britain.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(britain, targetCountry)\n    if len(britain.tiles) <= 0 and britain.isDestroyed == False:\n        removeCountry(britain)\n"]]}]}]},{"timestamp":1753242069366,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1335,"length1":52,"diffs":[[1,""]]},{"start1":1360,"length1":368,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, influencedWar: number, tilesLost: number, peaceCooldown: number, countryTargetted: string, borderingCountries: countryType[], tradePartners: countryType[], enemies: countryType[], isDestroyed: boolean, tiles: tiles.Location[]) {\n"]]},{"start1":2174,"length1":86,"diffs":[[1,""]]},{"start1":2324,"length1":714,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":10624,"length1":73,"diffs":[[1,""]]},{"start1":10752,"length1":19,"diffs":[[1,""]]},{"start1":10808,"length1":170,"diffs":[[1,"    let attack = Math.percentChance(1 + (country.pop / 10000 - targetCountry.pop / 10000))\n"]]},{"start1":16000,"length1":895,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":357,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, tiles: List[tiles.Location]):\n"]]},{"start1":1721,"length1":86,"diffs":[[1,""]]},{"start1":1844,"length1":702,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":9277,"length1":59,"diffs":[[1,""]]},{"start1":9367,"length1":15,"diffs":[[1,""]]},{"start1":9410,"length1":157,"diffs":[[1,"    attack = Math.percent_chance(1 + ((country.pop / 10000) - (targetCountry.pop / 10000)))\n"]]},{"start1":14192,"length1":803,"diffs":[[1,""]]}]}]},{"timestamp":1753242665430,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10844,"length1":49,"diffs":[[1,"    if (charge > 9990) {\n"]]},{"start1":11120,"length1":211,"diffs":[[1,"    if (country.chargeCooldown != 0) {\n        charge = 2\n"]]},{"start1":11189,"length1":100,"diffs":[[1,"    let attack = Math.percentChance(25 + (country.pop / 10000 - targetCountry.pop / 10000) * charge)\n"]]},{"start1":16606,"length1":141,"diffs":[[1,"        if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.influencedWar == 1) {\n"]]},{"start1":16797,"length1":346,"diffs":[[1,"                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == targetCountry.getTileImage() && targetCountry.name != country.name && country.enemies.length == 0) {\n                    playerSprite.sayText(\"Influenced war with \" + targetCountry.name, 5000)\n                    country.influencedWar = 5\n                    country.countryTargetted = targetCountry.name\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":9439,"length1":47,"diffs":[[1,"    if charge > 9990:\n"]]},{"start1":9646,"length1":288,"diffs":[[1,"    if country.chargeCooldown != 0:\n        charge = 2\n    attack = Math.percent_chance(25 + ((country.pop / 10000) - (targetCountry.pop / 10000)) * charge)\n"]]},{"start1":14610,"length1":145,"diffs":[[1,"        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.:\n"]]},{"start1":14780,"length1":349,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name and len(country.enemies) == 0:\n                    playerSprite.say_text(\"Influenced war with \" + targetCountry.name, 5000)\n                    country.influencedWar = 5\n                    country.countryTargetted = targetCountry.name\n"]]}]}]},{"timestamp":1753243265057,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1307,"length1":0,"diffs":[[1,"    tiles: tiles.Location[]\n"]]},{"start1":1387,"length1":28,"diffs":[[1,""]]},{"start1":1412,"length1":368,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, influencedWar: number, tilesLost: number, peaceCooldown: number, countryTargetted: string, borderingCountries: countryType[], tradePartners: countryType[], enemies: countryType[], isDestroyed: boolean, tiles: tiles.Location[], chargeCooldown: number, chargeTarget: string) {\n"]]},{"start1":2245,"length1":0,"diffs":[[1,"        this.tiles = tiles\n"]]},{"start1":2358,"length1":27,"diffs":[[1,""]]},{"start1":2508,"length1":714,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, tiles.getTilesByType(assets.tile`germanTile`), 0, null)\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, tiles.getTilesByType(assets.tile`franceTile`), 0, null)\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, tiles.getTilesByType(assets.tile`belgiumTile`), 0, null)\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, tiles.getTilesByType(assets.tile`britainTile`), 0, null)\n"]]},{"start1":11273,"length1":24,"diffs":[[1,"            charge = 4\n"]]},{"start1":16745,"length1":0,"diffs":[[1,"    for (let country of countries) {\n        if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.chargeCooldown == 0) {\n            for (let targetCountry of countries) {\n                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == targetCountry.getTileImage() && targetCountry.name != country.name) {\n                    playerSprite.sayText(\"Has charged \" + targetCountry.name, 5000)\n                    country.chargeCooldown = 120\n                    country.chargeTarget = targetCountry.name\n                    break\n                }\n                \n            }\n        }\n        \n    }\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":357,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, tiles: List[tiles.Location], chargeCooldown: int, chargeTarget: str):\n"]]},{"start1":1734,"length1":0,"diffs":[[1,"        self.tiles = tiles\n"]]},{"start1":1847,"length1":27,"diffs":[[1,""]]},{"start1":1970,"length1":702,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")), 0, None)\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")), 0, None)\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")), 0, None)\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")), 0, None)\n"]]},{"start1":9795,"length1":24,"diffs":[[1,"            charge = 4\n"]]},{"start1":14736,"length1":0,"diffs":[[1,"    for country in countries:\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.chargeCooldown == 0:\n            for targetCountry in countries:\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name:\n                    playerSprite.say_text(\"Has charged \" + targetCountry.name, 5000)\n                    country.chargeCooldown = 120\n                    country.chargeTarget = targetCountry.name\n                    break\n"]]}]}]},{"timestamp":1753310629793,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":13256,"length1":0,"diffs":[[1,"game.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\n"]]}]}]},{"timestamp":1753310660800,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13337,"length1":158,"diffs":[[1,""]]},{"start1":13637,"length1":54,"diffs":[[1,"    let index = country.borderingCountries.length\n"]]},{"start1":13757,"length1":0,"diffs":[[1,"    let enemyIndex = country.enemies.length\n"]]},{"start1":14956,"length1":0,"diffs":[[1,"germany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":11701,"length1":159,"diffs":[[1,""]]},{"start1":11851,"length1":48,"diffs":[[1,"    index = len(country.borderingCountries)\n"]]},{"start1":11961,"length1":0,"diffs":[[1,"    enemyIndex = len(country.enemies)\n"]]},{"start1":13086,"length1":0,"diffs":[[1,"    \n    \n"]]},{"start1":13097,"length1":0,"diffs":[[1,"germany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\n"]]},{"start1":13414,"length1":152,"diffs":[[1,""]]}]}]},{"timestamp":1753311426985,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6905,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1753311428683,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8046,"length1":104,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":6905,"length1":74,"diffs":[[1,"\n"]]}]}]},{"timestamp":1753319767127,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":6956,"length1":28,"diffs":[[1,"                return\n"]]}]}]},{"timestamp":1753319773126,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8046,"length1":0,"diffs":[[1,"            if (targetCountry.name == country.name) {\n                return\n            }\n            \n"]]},{"start1":16092,"length1":313,"diffs":[[1,"            for (let targetCountry of countries) {\n                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == targetCountry.getTileImage() && targetCountry.name != country.name && country.enemies.length == 0) {\n                    playerSprite.sayText(\"Influenced war with \" + targetCountry.name, 5000)\n"]]},{"start1":16463,"length1":63,"diffs":[[1,"                    country.countryTargetted = targetCountry.name\n"]]},{"start1":16604,"length1":495,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":6905,"length1":0,"diffs":[[1,"            if targetCountry.name == country.name:\n                return None\n"]]},{"start1":14125,"length1":308,"diffs":[[1,"            for targetCountry in countries:\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name and len(country.enemies) == 0:\n                    playerSprite.say_text(\"Influenced war with \" + targetCountry.name, 5000)\n"]]},{"start1":14491,"length1":63,"diffs":[[1,"                    country.countryTargetted = targetCountry.name\n"]]},{"start1":14583,"length1":443,"diffs":[[1,""]]}]}]},{"timestamp":1753320334939,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":16485,"length1":525,"diffs":[[1,"        } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.influencedWar != 1) {\n            for (let targetCountry of countries) {\n                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == targetCountry.getTileImage() && targetCountry.name != country.name && country.enemies.length != 0) {\n                    playerSprite.sayText(\"Influenced peace with\")\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":14489,"length1":146,"diffs":[[1,"        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar != 1:\n"]]},{"start1":14678,"length1":331,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name and len(country.enemies) != 0: \n                    playerSprite.say_text(\"Influenced peace with\" + )\n"]]}]}]},{"timestamp":1753320891930,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5779,"length1":63,"diffs":[[1,"    let accept = Math.percentChance(15 * enemy.tilesLost)\n"]]},{"start1":16410,"length1":0,"diffs":[[1,"                    break\n"]]},{"start1":16862,"length1":93,"diffs":[[1,"                    playerSprite.sayText(\"Influenced peace with\" + peaceCountry.name, 5000)\n                    declarePeace(country, peaceCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4931,"length1":63,"diffs":[[1,"    accept = Math.percent_chance(15 * enemy.tilesLost)\n"]]},{"start1":14463,"length1":0,"diffs":[[1,"                    break\n"]]},{"start1":14860,"length1":94,"diffs":[[1,"                    playerSprite.say_text(\"Influenced peace with\" + peaceCountry.name, 5000)\n                    declarePeace(country, peaceCountry)\n"]]}]}]},{"timestamp":1753321487524,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1081,"length1":0,"diffs":[[1,"    influencedWar: number\n"]]},{"start1":1129,"length1":16,"diffs":[[1,""]]},{"start1":1412,"length1":366,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, influencedWar: number, tilesLost: number, peaceCooldown: number, countryTargetted: string, borderingCountries: countryType[], tradePartners: countryType[], enemies: countryType[], isDestroyed: boolean, chargeCooldown: number, chargeTarget: string, tiles: tiles.Location[]) {\n"]]},{"start1":1909,"length1":0,"diffs":[[1,"        this.influencedWar = influencedWar\n"]]},{"start1":1987,"length1":25,"diffs":[[1,""]]},{"start1":2508,"length1":714,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, 1, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":4981,"length1":0,"diffs":[[1,"    country.influencedWar = 1\n"]]},{"start1":5779,"length1":62,"diffs":[[1,"    let accept = Math.percentChance(15 + enemy.tilesLost * 10)\n"]]},{"start1":10065,"length1":18,"diffs":[[1,"        war = war * country.influencedWar\n"]]},{"start1":15846,"length1":117,"diffs":[[1,"        } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.influencedWar == 1) {\n"]]},{"start1":16306,"length1":0,"diffs":[[1,"                    country.influencedWar = 5\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":355,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, chargeCooldown: int, chargeTarget: str, tiles: List[tiles.Location]):\n"]]},{"start1":1398,"length1":0,"diffs":[[1,"        self.influencedWar = influencedWar\n"]]},{"start1":1476,"length1":25,"diffs":[[1,""]]},{"start1":1970,"length1":702,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":4224,"length1":0,"diffs":[[1,"    country.influencedWar = 1\n"]]},{"start1":4931,"length1":62,"diffs":[[1,"    accept = Math.percent_chance(15 + ( enemy.tilesLost * 10))\n"]]},{"start1":8683,"length1":18,"diffs":[[1,"        war = war * country.influencedWar\n"]]},{"start1":13908,"length1":115,"diffs":[[1,"        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar == 1:\n"]]},{"start1":14362,"length1":0,"diffs":[[1,"                    country.influencedWar = 5\n"]]}]}]},{"timestamp":1753321877318,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1103,"length1":46,"diffs":[[1,"    warCooldown\n"]]},{"start1":1145,"length1":24,"diffs":[[1,"    countryTargetted: string\n"]]},{"start1":1377,"length1":29,"diffs":[[1,""]]},{"start1":1402,"length1":380,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, tilesLost: number, warCooldown: number, peaceCooldown: number, countryTargetted: string, borderingCountries: countryType[], tradePartners: countryType[], enemies: countryType[], isDestroyed: boolean, chargeCooldown: number, chargeTarget: string, tiles: tiles.Location[]) {\n"]]},{"start1":1932,"length1":74,"diffs":[[1,"        this.warCooldown\n"]]},{"start1":2000,"length1":39,"diffs":[[1,"        this.countryTargetted = countryTargetted\n"]]},{"start1":2478,"length1":738,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, 0, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, 0, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, 0, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, 0, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":16254,"length1":45,"diffs":[[1,""]]},{"start1":16773,"length1":107,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":366,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tilesLost: int, warCooldown: int, peaceCooldown: int, countryTargetted: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, chargeCooldown: int, chargeTarget: str, tiles: List[tiles.Location]):\n"]]},{"start1":1431,"length1":74,"diffs":[[1,"        self.warCooldown\n"]]},{"start1":1499,"length1":39,"diffs":[[1,"        self.countryTargetted = countryTargetted\n"]]},{"start1":1950,"length1":726,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 0, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 0, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 0, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 0, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":14319,"length1":45,"diffs":[[1,""]]},{"start1":14784,"length1":107,"diffs":[[1,""]]}]}]},{"timestamp":1753322394918,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8651,"length1":48,"diffs":[[1,"    if country.countryTargetted == targetCountry.name:\n"]]}]}]},{"timestamp":1753327563913,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1402,"length1":25,"diffs":[[1,""]]},{"start1":1431,"length1":0,"diffs":[[1,"    playerChosen: number\n"]]},{"start1":10077,"length1":51,"diffs":[[1,"    if (country.countryTargetted == targetCountry.name) {\n"]]}]}]},{"timestamp":1753327564237,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8699,"length1":19,"diffs":[[1,"        war = war\n"]]}]}]},{"timestamp":1753330243702,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":8699,"length1":20,"diffs":[[1,"        war = war \n"]]}]}]},{"timestamp":1753330243856,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1427,"length1":0,"diffs":[[1,"    countryTargetted: string\n"]]},{"start1":9871,"length1":23,"diffs":[[1,"    let peace: any;\n"]]},{"start1":10128,"length1":24,"diffs":[[1,"        war = war\n"]]},{"start1":10387,"length1":106,"diffs":[[1,""]]},{"start1":15885,"length1":129,"diffs":[[1,"        } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi) {\n"]]},{"start1":16315,"length1":56,"diffs":[[1,"                    country.countryTargetted = warCountry.name\n"]]},{"start1":16472,"length1":159,"diffs":[[1,"        } else if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.peaceCooldown == 0) {\n"]]},{"start1":16942,"length1":60,"diffs":[[1,"                    country.countryTargetted = peaceCountry.name\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8699,"length1":24,"diffs":[[1,"        war = war *\n"]]},{"start1":8955,"length1":84,"diffs":[[1,""]]},{"start1":13902,"length1":113,"diffs":[[1,"        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n"]]},{"start1":14325,"length1":56,"diffs":[[1,"                    country.countryTargetted = warCountry.name\n"]]},{"start1":14433,"length1":144,"diffs":[[1,"        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.peaceCooldown == 0:\n"]]},{"start1":14898,"length1":60,"diffs":[[1,"                    country.countryTargetted = peaceCountry.name\n"]]}]}]},{"timestamp":1753330822413,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10273,"length1":66,"diffs":[[1,"        peace = randint(1, 10000) + country.strategy.peacefulness / 2 + country.tilesLost * 5\n"]]},{"start1":10424,"length1":32,"diffs":[[1,"            peace = peace * 5\n"]]},{"start1":16324,"length1":89,"diffs":[[1,"                    playerSprite.sayText(\"Influenced war with \" + warCountry.name, 5000)\n"]]},{"start1":16952,"length1":93,"diffs":[[1,"                    playerSprite.sayText(\"Influenced peace with \" + peaceCountry.name, 5000)\n"]]},{"start1":17105,"length1":0,"diffs":[[1,"                    country.peaceCooldown\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8861,"length1":68,"diffs":[[1,"        peace = randint(1, 10000) + (country.strategy.peacefulness / 2) + (country.tilesLost * 5)\n"]]},{"start1":9013,"length1":32,"diffs":[[1,"            peace = peace * 5\n"]]},{"start1":14321,"length1":90,"diffs":[[1,"                    playerSprite.say_text(\"Influenced war with \" + warCountry.name, 5000)\n"]]},{"start1":14881,"length1":94,"diffs":[[1,"                    playerSprite.say_text(\"Influenced peace with \" + peaceCountry.name, 5000)\n"]]},{"start1":15035,"length1":0,"diffs":[[1,"                    country.peaceCooldown\n"]]}]}]},{"timestamp":1753331380991,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9842,"length1":0,"diffs":[[1,"    let peace: number;\n"]]},{"start1":9981,"length1":528,"diffs":[[1,"    let war = randint(1, 10000) + country.strategy.aggressiveness / 2\n    if (country.warTarget == targetCountry.name) {\n        war = war * 100\n    }\n    \n    war > 9990 && !isEnemy && !(country.enemies.length > 0) && declareWar(country, targetCountry)\n    if (country.peaceCooldown == 0) {\n        peace = randint(1, 10000) + country.strategy.peacefulness\n        if (country.peaceTarget == targetCountry.name) {\n            peace = peace * 100\n        }\n        \n        peace > 9990 && !(war > 9990) && isEnemy && declarePeace(country, targetCountry)\n    } else {\n        country.peaceCooldown -= 1\n    }\n    \n    let trade = randint(1, 10000) + country.strategy.trading / 2\n    trade > 9980 && !isTradePartner && !(war > 9990) && !(peace > 9990) && !isEnemy && declareTrade(country, targetCountry)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8583,"length1":561,"diffs":[[1,"    war = randint(1, 10000) + (country.strategy.aggressiveness / 2)\n    if country.warTarget == targetCountry.name:\n        war = war * 100\n    war > 9990 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    if country.peaceCooldown == 0:\n        peace = randint(1, 10000) + (country.strategy.peacefulness)\n        if country.peaceTarget == targetCountry.name:\n            peace = peace * 100\n        peace > 9990 and not war > 9990 and isEnemy and declarePeace(country, targetCountry)\n    else:\n        country.peaceCooldown -= 1\n    trade = randint(1, 10000) + (country.strategy.trading / 2)\n    trade > 9980 and not isTradePartner and not war > 9990 and not peace > 9990 and not isEnemy and declareTrade(country, targetCountry)\n"]]}]}]},{"timestamp":1753331973597,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5053,"length1":29,"diffs":[[1,""]]},{"start1":5790,"length1":29,"diffs":[[1,"    country.peaceCooldown = 60\n"]]},{"start1":9842,"length1":140,"diffs":[[1,""]]},{"start1":9958,"length1":542,"diffs":[[1,"    let war = randint(1, 10000) + country.strategy.aggressiveness / 2 > 9990 && country.enemies.length == 0 ? true : false\n    war && !isEnemy && declareWar(country, targetCountry)\n    let peace = randint(1, 10000) + country.strategy.peacefulness / 2 > 9990 ? true : false\n    peace && !war && isEnemy && declarePeace(country, targetCountry)\n    let trade = randint(1, 10000) + country.strategy.trading / 2 > 9950 ? true : false\n    trade && !isTradePartner && !war && !peace && !isEnemy && declareTrade(country, targetCountry)\n"]]},{"start1":15306,"length1":22,"diffs":[[1,""]]},{"start1":15824,"length1":213,"diffs":[[1,"                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == warCountry.getTileImage() && warCountry.name != country.name && country.enemies.length == 0) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":4278,"length1":29,"diffs":[[1,""]]},{"start1":4924,"length1":29,"diffs":[[1,"    country.peaceCooldown = 60\n"]]},{"start1":8475,"length1":140,"diffs":[[1,""]]},{"start1":8583,"length1":576,"diffs":[[1,"    war = True if randint(1, 10000) + (country.strategy.aggressiveness / 2) > 9990 and len(country.enemies) == 0 else False\n    war and not isEnemy and declareWar(country, targetCountry)\n    peace = True if randint(1, 10000) + (country.strategy.peacefulness / 2) > 9990 else False\n    peace and not war and isEnemy and declarePeace(country, targetCountry)\n    trade = True if randint(1, 10000) + (country.strategy.trading / 2) > 9950 else False\n    trade and not isTradePartner and not war and not peace and not isEnemy and declareTrade(country, targetCountry)\n"]]},{"start1":13907,"length1":219,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == warCountry.getTileImage() and warCountry.name != country.name and len(country.enemies) == 0:\n"]]},{"start1":14462,"length1":157,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == peaceCountry.getTileImage() and peaceCountry.name != country.name and len(country.enemies) != 0: \n"]]}]}]},{"timestamp":1753332572098,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10320,"length1":127,"diffs":[[1,"    let peace = randint(1, 10000) + country.strategy.peacefulness / 2 > 9990 && !war && isEnemy ? true : false\n"]]},{"start1":16688,"length1":218,"diffs":[[1,"                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == peaceCountry.getTileImage() && peaceCountry.name != country.name && country.enemies.length != 0) {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8951,"length1":135,"diffs":[[1,"    peace = True if randint(1, 10000) + (country.strategy.peacefulness / 2) > 9990  and not war and isEnemy else False\n"]]},{"start1":14686,"length1":222,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == peaceCountry.getTileImage() and peaceCountry.name != country.name and : \n"]]}]}]},{"timestamp":1753393549374,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":4953,"length1":31,"diffs":[[1,"    country.warTarget = None\n"]]}]}]},{"timestamp":1753393588042,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1402,"length1":15,"diffs":[[1,""]]},{"start1":5819,"length1":31,"diffs":[[1,"    country.warTarget = null\n"]]},{"start1":11370,"length1":138,"diffs":[[1,"    let attack = Math.percentChance(1 + (country.pop / 10000 - targetCountry.pop / 10000) + charge)\n"]]},{"start1":12062,"length1":46,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":9912,"length1":141,"diffs":[[1,"    attack = Math.percent_chance(1 + ((country.pop / 10000) - (targetCountry.pop / 10000)) + charge)\n"]]},{"start1":10597,"length1":46,"diffs":[[1,""]]}]}]},{"timestamp":1753394044385,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":10637,"length1":47,"diffs":[[1,"        targetCountry.casualties += roll * 10\n"]]}]}]},{"timestamp":1753396124755,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":10637,"length1":46,"diffs":[[1,"        targetCountry.casualties  += roll * 10\n"]]}]}]},{"timestamp":1753396128491,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1081,"length1":23,"diffs":[[1,""]]},{"start1":1402,"length1":0,"diffs":[[1,"    casualties\n"]]},{"start1":1442,"length1":400,"diffs":[[1,"    constructor(name: string, pop: number, eco: number, strategy: aiStrategy, isAi: boolean, tilesLost: number, warTarget: string, warCooldown: number, peaceCooldown: number, peaceTarget: string, borderingCountries: countryType[], tradePartners: countryType[], enemies: countryType[], isDestroyed: boolean, chargeCooldown: number, chargeTarget: string, tiles: tiles.Location[]) {\n"]]},{"start1":1951,"length1":37,"diffs":[[1,""]]},{"start1":2571,"length1":750,"diffs":[[1,"let germany = new countryType(\"Germany\", 200000, 4, new aiStrategy(\"\", 0, 0, 0), true, 0, null, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`germanTile`))\nlet france = new countryType(\"France\", 100000, 2, new aiStrategy(\"\", 0, 0, 0), true, 0, null, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`franceTile`))\nlet belgium = new countryType(\"Belgium\", 50000, 1, new aiStrategy(\"\", 0, 0, 0), true, 0, null, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`belgiumTile`))\nlet britain = new countryType(\"United Kingdom\", 150000, 3, new aiStrategy(\"\", 0, 0, 0), true, 0, null, 0, 0, null, [], [], [], false, 0, null, tiles.getTilesByType(assets.tile`britainTile`))\n"]]},{"start1":12117,"length1":45,"diffs":[[1,"        targetCountry.casualties += roll * 10\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":912,"length1":383,"diffs":[[1,"    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tilesLost: int, warTarget: str, warCooldown: int, peaceCooldown: int, peaceTarget: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, chargeCooldown: int, chargeTarget: str, tiles: List[tiles.Location]):\n"]]},{"start1":1407,"length1":37,"diffs":[[1,""]]},{"start1":2000,"length1":738,"diffs":[[1,"germany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n"]]},{"start1":10637,"length1":45,"diffs":[[1,"        targetCountry.casualties += roll * 10\n        \n"]]}]}]},{"timestamp":1753397049115,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":10703,"length1":46,"diffs":[[1,"        targetCountry.casualties = roll * 10\n"]]}]}]},{"timestamp":1753397091157,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5942,"length1":89,"diffs":[[1,"    let accept = Math.percentChance(15 + enemy.tilesLost * 5)\n"]]},{"start1":10219,"length1":118,"diffs":[[1,"    let war = (randint(1, 10000) + country.strategy.aggressiveness / 2) * warFactor > 9990 && country.enemies.length == 0 && !isEnemy ? true : false\n"]]},{"start1":10414,"length1":150,"diffs":[[1,"    let peace = (randint(1, 10000) + country.strategy.peacefulness / 2) * peaceFactor > 9990 && !war && isEnemy ? true : false\n"]]},{"start1":10591,"length1":136,"diffs":[[1,"    let trade = randint(1, 10000) + country.strategy.trading / 2 > 9950 && !isTradePartner && !war && !peace && !isEnemy ? true : false\n"]]},{"start1":11965,"length1":40,"diffs":[[1,""]]},{"start1":12194,"length1":46,"diffs":[[1,"        targetCountry.casualties = roll * 10\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5050,"length1":91,"diffs":[[1,"    accept = Math.percent_chance(15 + ( enemy.tilesLost * 5))\n"]]},{"start1":8818,"length1":124,"diffs":[[1,"    war = True if (randint(1, 10000) + (country.strategy.aggressiveness / 2)) * warFactor > 9990 and len(country.enemies) == 0 and not isEnemy else False\n"]]},{"start1":9019,"length1":160,"diffs":[[1,"    peace = True if (randint(1, 10000) + (country.strategy.peacefulness / 2)) * peaceFactor > 9990  and not war and isEnemy else False\n"]]},{"start1":9205,"length1":154,"diffs":[[1,"    trade = True if randint(1, 10000) + (country.strategy.trading / 2) > 9950 and not isTradePartner and not war and not peace and not isEnemy else False\n"]]},{"start1":10475,"length1":40,"diffs":[[1,""]]}]}]},{"timestamp":1753397561110,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12037,"length1":181,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":10549,"length1":188,"diffs":[[1,""]]}]}]},{"timestamp":1753397952312,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10246,"length1":145,"diffs":[[1,"    let war = (randint(1, 10000) + country.strategy.aggressiveness / 2) * warFactor > 9590 && !isEnemy ? true : false\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8847,"length1":149,"diffs":[[1,"    war = True if (randint(1, 10000) + (country.strategy.aggressiveness / 2)) * warFactor > 9590 and not isEnemy else False\n"]]},{"start1":9018,"length1":158,"diffs":[[1,"    peace = True if (randint(1, 10000) + (country.casualties / 100) + (country.strategy.peacefulness)) * peaceFactor > 9590  and not war and isEnemy else False\n"]]}]}]},{"timestamp":1753398676984,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":10711,"length1":49,"diffs":[[1,"        failedBattle.destroy(effects.ashes, 100)\n"]]}]}]},{"timestamp":1753398694394,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10952,"length1":99,"diffs":[[1,"    let charge = randint(1, 10000)\n    if (charge > 9990 && country.isAi == true) {\n"]]},{"start1":11930,"length1":48,"diffs":[[1,"        failedBattle.destroy(effects.fire, 100)\n"]]},{"start1":12196,"length1":49,"diffs":[[1,"        failedBattle.destroy(effects.ashes, 100)\n"]]},{"start1":17725,"length1":22,"diffs":[[1,""]]},{"start1":17775,"length1":630,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":9574,"length1":97,"diffs":[[1,"    charge = randint(1, 10000)\n    if charge > 9990 and country.isAi == True:\n"]]},{"start1":10441,"length1":48,"diffs":[[1,"        failedBattle.destroy(effects.fire, 100)\n"]]},{"start1":15687,"length1":558,"diffs":[[1,""]]}]}]},{"timestamp":1753399294060,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17959,"length1":474,"diffs":[[1,"            for (let warCountry of countries) {\n                isEnemy = getEnemy(country, warCountry)\n                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == warCountry.getTileImage() && warCountry.name != country.name && !isEnemy) {\n                    playerSprite.sayText(\"Influenced war with \" + warCountry.name, 2000)\n                    country.chargeTarget = warCountry.name\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":9043,"length1":189,"diffs":[[1,"    peace = True if (randint(1, 10000) + (country.casualties / 100) + country.strategy.peacefulness) * peaceFactor > 9590  and not war and isEnemy else False\n"]]},{"start1":15893,"length1":427,"diffs":[[1,"                isEnemy = getEnemy(country, warCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == warCountry.getTileImage() and warCountry.name != country.name and not isEnemy:\n                    playerSprite.say_text(\"Influenced war with \" + chargeCountry.name, 2000)\n                    country.chargeTarget = warCountry.name\n"]]}]}]},{"timestamp":1753399889284,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5911,"length1":31,"diffs":[[1,""]]},{"start1":9990,"length1":84,"diffs":[[1,""]]},{"start1":10437,"length1":211,"diffs":[[1,"    let peace = (randint(1, 10000) + country.casualties / 100 + country.strategy.peacefulness) * peaceFactor > 9590 && !war && isEnemy ? true : false\n"]]},{"start1":16974,"length1":110,"diffs":[[1,"        if (country.playerChosen == mp.getPlayerProperty(player, mp.PlayerProperty.Index) && !country.isAi && country.peaceCooldown == 0) {\n"]]},{"start1":17222,"length1":190,"diffs":[[1,"                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == peaceCountry.getTileImage() && peaceCountry.name != country.name && isEnemy) {\n"]]},{"start1":17535,"length1":181,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5019,"length1":31,"diffs":[[1,""]]},{"start1":8599,"length1":70,"diffs":[[1,""]]},{"start1":9043,"length1":220,"diffs":[[1,"    peace = True if (randint(1, 10000) + (country.casualties / 100) + country.strategy.peacefulness) * peaceFactor > 9590  and not wa - (len(country.enemies) * 100)r and isEnemy else False\n"]]},{"start1":14985,"length1":113,"diffs":[[1,"        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.peaceCooldown == 0:\n"]]},{"start1":15230,"length1":195,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == peaceCountry.getTileImage() and peaceCountry.name != country.name and isEnemy: \n"]]},{"start1":15548,"length1":175,"diffs":[[1,""]]}]}]},{"timestamp":1753400459938,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9639,"length1":58,"diffs":[[1,""]]},{"start1":9912,"length1":241,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":8529,"length1":230,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":27,"diffs":[[1,"    \"name\": \"Diplomacy 3 - Copy - Copy - Copy - Copy\",\n"]]}]}]},{"timestamp":1753401032087,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":16801,"length1":19,"diffs":[[1,""]]},{"start1":17381,"length1":27,"diffs":[[1,""]]},{"start1":18010,"length1":27,"diffs":[[1,""]]},{"start1":18191,"length1":27,"diffs":[[1,""]]},{"start1":19089,"length1":27,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":14783,"length1":19,"diffs":[[1,""]]},{"start1":15347,"length1":27,"diffs":[[1,""]]},{"start1":15910,"length1":27,"diffs":[[1,""]]},{"start1":15959,"length1":152,"diffs":[[1,"                    playerSprite.say_text(\"You have \" + country.peaceCooldown + \" seconds before you can peace again\", 2000) \n"]]},{"start1":16888,"length1":27,"diffs":[[1,""]]}]}]},{"timestamp":1753401243242,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5544,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1753409190963,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":5544,"length1":10,"diffs":[[1,"        \n"]]}]}]},{"timestamp":1753409191387,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5911,"length1":31,"diffs":[[1,"    country.peaceCooldown = 60\n"]]},{"start1":6432,"length1":60,"diffs":[[1,""]]},{"start1":10660,"length1":146,"diffs":[[1,"    let war = (randint(1, 10000) + country.strategy.aggressiveness - country.enemies.length * 100) * warFactor > 9590 && !isEnemy ? true : false\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":5019,"length1":31,"diffs":[[1,"    country.peaceCooldown = 60\n"]]},{"start1":5544,"length1":60,"diffs":[[1,"        c\n"]]},{"start1":9188,"length1":152,"diffs":[[1,"    war = True if (randint(1, 10000) + country.strategy.aggressiveness - (len(country.enemies) * 100)) * warFactor > 9590 and not isEnemy else False\n"]]},{"start1":16629,"length1":189,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == chargeCountry.getTileImage() and chargeCountry.name != country.name and isEnemy:\n"]]},{"start1":17024,"length1":141,"diffs":[[1,""]]}]}]},{"timestamp":1753409789249,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":11488,"length1":84,"diffs":[[1,"    let charge = randint(1, 10000) > 9990 && country.isAi == true ? true : false\n"]]},{"start1":11624,"length1":50,"diffs":[[1,""]]},{"start1":11878,"length1":89,"diffs":[[1,"        if (country.chargeCooldown != 0 && country.chargeTarget == targetCountry.name) {\n"]]},{"start1":12061,"length1":141,"diffs":[[1,"    let attack = Math.percentChance(1 + (country.pop / 5000 - targetCountry.pop / 10000) + charge + country.strategy.aggressiveness / 10)\n"]]},{"start1":18886,"length1":193,"diffs":[[1,"                if (tiles.tileImageAtLocation(playerSprite.tilemapLocation()) == chargeCountry.getTileImage() && chargeCountry.name != country.name && isEnemy) {\n"]]},{"start1":19277,"length1":204,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":10030,"length1":86,"diffs":[[1,"    charge = True if randint(1, 10000) > 9990 and country.isAi == True else False\n"]]},{"start1":10164,"length1":50,"diffs":[[1,""]]},{"start1":10349,"length1":87,"diffs":[[1,"        if country.chargeCooldown != 0 and country.chargeTarget == targetCountry.name:\n"]]},{"start1":10500,"length1":144,"diffs":[[1,"    attack = Math.percent_chance(1 + ((country.pop / 5000) - (targetCountry.pop / 10000)) + charge + (country.strategy.aggressiveness / 10))\n"]]},{"start1":16682,"length1":197,"diffs":[[1,"                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == chargeCountry.getTileImage() and chargeCountry.name != country.name and isEnemy and chargeCooldown == 0:\n"]]},{"start1":17101,"length1":197,"diffs":[[1,"                elif chargeCooldown != 0:\n                    playerSprite.say_text(\"You must wait \" + country.chargeCooldown + \" Seconds \")\n"]]}]}]},{"timestamp":1753410338059,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":11488,"length1":276,"diffs":[[1,"    let charge = randint(1, 10000) > 9990 && country.isAi && isEnemy ? true : false\n"]]},{"start1":11590,"length1":36,"diffs":[[1,"        country.chargeCooldown = 120\n"]]},{"start1":15733,"length1":46,"diffs":[[1,""]]},{"start1":19288,"length1":48,"diffs":[[1,"                    country.chargeCooldown = 120\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":10030,"length1":281,"diffs":[[1,"    charge = True if randint(1, 10000) > 9990 and country.isAi and isEnemy else False\n"]]},{"start1":10131,"length1":36,"diffs":[[1,"        country.chargeCooldown = 120\n"]]},{"start1":13873,"length1":46,"diffs":[[1,""]]},{"start1":17090,"length1":48,"diffs":[[1,"                    country.chargeCooldown = 120\n"]]}]}]},{"timestamp":1753410942249,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":10145,"length1":176,"diffs":[[1,"    charge = True if randint(1, 10000) * isEnemyCharging + ((country.pop / 100000 - targetCountry.pop / 100000) * 100) > 9000 and country.isAi and isEnemy else False\n"]]}]}]},{"timestamp":1753411084278,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8246,"length1":36,"diffs":[[1,""]]},{"start1":11437,"length1":86,"diffs":[[1,""]]},{"start1":11602,"length1":193,"diffs":[[1,"    let charge = randint(1, 10000) * isEnemyCharging + (country.pop / 100000 - targetCountry.pop / 100000) * 100 > 9000 && country.isAi && isEnemy ? true : false\n"]]},{"start1":12235,"length1":0,"diffs":[[1,"            country.chargeCooldown -= 1\n"]]},{"start1":12574,"length1":22,"diffs":[[1,"    if (roll < 480) {\n"]]},{"start1":14929,"length1":0,"diffs":[[1,"    getBorderingCountries(country)\n"]]},{"start1":15041,"length1":76,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":7080,"length1":36,"diffs":[[1,""]]},{"start1":9983,"length1":72,"diffs":[[1,""]]},{"start1":10145,"length1":198,"diffs":[[1,"    charge = True if randint(1, 10000) * isEnemyCharging + ((country.pop / 100000 - targetCountry.pop / 100000) * 100) > 9000 and country.isAi and isEnemy and chargeelse False\n"]]},{"start1":10718,"length1":0,"diffs":[[1,"            country.chargeCooldown -= 1\n"]]},{"start1":11019,"length1":19,"diffs":[[1,"    if roll < 480:\n"]]},{"start1":13105,"length1":0,"diffs":[[1,"    getBorderingCountries(country)\n"]]},{"start1":13217,"length1":60,"diffs":[[1,""]]}]}]},{"timestamp":1753596757724,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":332,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1750198807305,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"new testing\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1750204231891,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\ncrosshair: Sprite = None\n\ncrosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\ncontroller.move_sprite(crosshair)\n\nscene.camera_follow_sprite(crosshair)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tradePartners: List[countryType], enemies: List[countryType], tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tiles = tiles\n\ngermany = countryType(\"Germany\", 200000, 4, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n\ncountries: List[countryType] = [germany, france]\n\ndef getTileImage(country: countryType):\n    country.tileImage = tiles.get_tile_image(country.tiles[0])\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef getStrategies():\n    for country in countries:\n        country.strategy.aggressiveness = randint(1, 100)\n        country.strategy.peacefulness = randint(1, 100)\n        country.strategy.trading = randint(1, 100)\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country + \" declares war on \" + enemy, DialogLayout.BOTTOM)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef diplomacy(country: countryType, targetCountry: countryType):\n    choice = \"war\" if country.strategy.aggressiveness > 75 else \"peace\" if country.strategy.peacefulness > 75 else \"trade\"\n    choices = {\n        \"war\": declareWar(country, targetCountry),\n        \"peace\": 2,\n        \"trade\": 3\n    }\n    if choice in choices:\n        \n","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"new testing\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1750206111012,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\ncrosshair: Sprite = None\n\ncrosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\ncontroller.move_sprite(crosshair)\n\nscene.camera_follow_sprite(crosshair)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tradePartners: List[countryType], enemies: List[countryType], tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tiles = tiles\n\ngermany = countryType(\"Germany\", 200000, 4, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n\ncountries: List[countryType] = [germany, france]\n\ndef getTileImage(country: countryType):\n    country.tileImage = tiles.get_tile_image(country.tiles[0])\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef getStrategies():\n    for country in countries:\n        country.strategy.aggressiveness = randint(1, 100)\n        country.strategy.peacefulness = randint(1, 100)\n        country.strategy.trading = randint(1, 100)\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country + \" declares war on \" + enemy, DialogLayout.BOTTOM)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace():\n    pass\n\ndef declareTrade():\n    pass\n\ndef diplomacy(country: countryType, targetCountry: countryType):\n    choices = {\n        'war': declareWar,\n        'peace': declarePeace,\n        'trade': declareTrade\n    }\n    choice = 'war' if country.strategy.aggressiveness > 75 else 'peace' if country.strategy.peacefulness > 75 else 'trade'\n    action = choices['war'](country, targetCountry)\n","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"new testing\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1750636245309,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\ncrosshair: Sprite = None\n\ncrosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\ncontroller.move_sprite(crosshair)\n\nscene.camera_follow_sprite(crosshair)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, tradePartners: List[countryType], enemies: List[countryType], tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tiles = tiles\n\ngermany = countryType(\"Germany\", 200000, 4, None, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, None, [], [], tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n\ncountries: List[countryType] = [germany, france]\n\ndef getTileImage(country: countryType):\n    country.tileImage = tiles.get_tile_image(country.tiles[0])\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country + \" declares war on \" + enemy, DialogLayout.BOTTOM)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    war = Math.percent_chance(country.strategy.aggressiveness)\n    war and declareWar(country, targetCountry)\n    peace = Math.percent_chance(country.strategy.peacefulness)\n","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"new testing\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1750678465837,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool,tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), False, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), False, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(sprite.tilemap_location())):\n            country.isAi = True\n            \n    \n\ndef getTileImage(country: countryType):\n    country.tileImage = tiles.get_tile_image(country.tiles[0])\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100) / strategy.aggressiveness * 10\n    strategy.trading = randint(1, 100) / strategy.aggressivness * 10\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        countryIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(countryIndex)\n        enemyIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(enemyIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n        index += 1\n    return returnIndex\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    war = Math.percent_chance(country.strategy.aggressiveness / 10)\n    war and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = Math.percent_chance(country.strategy.peacefulness / 10)\n    peace and not war and isEnemy and declarePeace(country, targetCountry)\n    trade = Math.percent_chance(country.strategy.trade / 10)\n    trade and not war and not peace and not isEnemy and declareTrade(country, targetCountry)\n\ngermany.strategy = addStrategy(germany)\n\ndef Germany():\n    popGain(germany)\n    ecoGain(germany)\n    externalEvent(germany, france)\n\ngame.on_update_interval(100, Germany)\n\ndef on_forever():\n    for p in players:\n        sprite = mp.get_player_sprite(p)\n        for country in countries:\n            if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(tiles.get_tile_location(sprite.tilemap_location()))) == country.TrailFactory\n            mp.is_connected(p) and mp.is_button_pressed(p, mp.MultiplayerButton.A)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"new testing\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1750891419705,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), False, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), False, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n    \ndef getTileImage(country: countryType):\n    country.tileImage = tiles.get_tile_image(country.tiles[0])\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100) / strategy.aggressiveness * 10\n    strategy.trading = randint(1, 100) / strategy.aggressivness * 10\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        countryIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(countryIndex)\n        enemyIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(enemyIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n        index += 1\n    return returnIndex\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    war = Math.percent_chance(country.strategy.aggressiveness / 10)\n    war and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = Math.percent_chance(country.strategy.peacefulness / 10)\n    peace and not war and isEnemy and declarePeace(country, targetCountry)\n    trade = Math.percent_chance(country.strategy.trade / 10)\n    trade and not war and not peace and not isEnemy and declareTrade(country, targetCountry)\n\ngermany.strategy = addStrategy(germany)\n\ndef Germany():\n    popGain(germany)\n    ecoGain(germany)\n    externalEvent(germany, france)\n\ngame.on_update_interval(100, Germany)\n\ndef on_button_event_a_pressed(player):\n    if mp.get_player_state(player, chosenCountry) == 0:\n        chooseCountry(player)\n        mp.set_player_state(player, chosenCountry, 1)\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"new testing\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1750913966666,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n    \ndef getTileImage(country: countryType):\n    country.tileImage = tiles.get_tile_image(country.tiles[0])\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100) / strategy.aggressiveness * 10\n    strategy.trading = randint(1, 100) / strategy.aggressivness * 10\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        countryIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(countryIndex)\n        enemyIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(enemyIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n        index += 1\n    return returnIndex\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    war = Math.percent_chance(country.strategy.aggressiveness / 10)\n    war and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = Math.percent_chance(country.strategy.peacefulness / 500)\n    peace and not war and isEnemy and declarePeace(country, targetCountry)\n    trade = Math.percent_chance(country.strategy.trade / 500)\n    trade and not war and not peace and not isEnemy and declareTrade(country, targetCountry)\n\ndef battle(country: countryType, targetCountry: countryType, tile: location):\n    attack = Math.percent_chance(1)\n    if attack:\n        tiles.set_tile_at(tile, targetCountry.getTileImage())\n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_image_at_location(tile.get_neighboring_location(CollisionDirection.LEFT)) == targetCountry.getTileImage():\n            enemyTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, enemyTile)\n        if tiles.tile_image_at_location(tile.get_neighboring_location(CollisionDirection.LEFT)) == targetCountry.getTileImage():\n            enemyTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, enemyTile)\n\ngermany.strategy = addStrategy(germany)\n\ndef Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    externalEvent(germany, france)\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if len(germany.enemies) > 0:\n        targetCountry = germany.enemies[0]\n        war(germany, targetCountry)\ngame.on_update_interval(100, Germany)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"new testing\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1752535376967,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n    \ndef getTileImage(country: countryType):\n    country.tileImage = tiles.get_tile_image(country.tiles[0])\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100) / strategy.aggressiveness * 10\n    strategy.trading = randint(1, 100) / strategy.aggressivness * 10\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        countryIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(countryIndex)\n        enemyIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(enemyIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n        index += 1\n    return returnIndex\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    war = Math.percent_chance(country.strategy.aggressiveness / 10)\n    war and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = Math.percent_chance(country.strategy.peacefulness / 50000)\n    peace and not war and isEnemy and declarePeace(country, targetCountry)\n    trade = Math.percent_chance(country.strategy.trade / 50000)\n    trade and not war and not peace and not isEnemy and declareTrade(country, targetCountry)\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: location):\n    attack = Math.percent_chance(100)\n    if attack:\n        tiles.set_tile_at(enemyTile, country.getTileImage())\n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            enemyTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, enemyTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            enemyTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, enemyTile)\n\ngermany.strategy = addStrategy(germany)\n\ndef Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    externalEvent(germany, france)\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if len(germany.enemies) > 0:\n        targetCountry = germany.enemies[0]\n        war(germany, targetCountry)\n\ndef France():\n    pop = popGain(france)\n    ecoGain(france)\n    externalEvent(france, germany)\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if len(france.enemies) != 0:\n        targetCountry = france.enemies[0]\n        war(france, targetCountry)\n\n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"new testing - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1752623248554,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100) / strategy.aggressiveness * 10\n    strategy.trading = randint(1, 100) / strategy.aggressivness * 10\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef removeTile(country: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in country.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            country.tiles.remove_at(index)\n        index += 1\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    war = Math.percent_chance(country.strategy.aggressiveness / 10)\n    war and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = Math.percent_chance(country.strategy.peacefulness / 50000)\n    peace and not war and isEnemy and declarePeace(country, targetCountry)\n    trade = Math.percent_chance(country.strategy.trade / 50000)\n    trade and not war and not peace and not isEnemy and declareTrade(country, targetCountry)\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    attack = Math.percent_chance(100)\n    if attack:\n        tiles.set_tile_at(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        \n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            enemyTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\n\ndef Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    externalEvent(germany, france)\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if len(germany.enemies) > 0:\n        targetCountry = germany.enemies[0]\n        war(germany, targetCountry)\n\ndef France():\n    pop = popGain(france)\n    ecoGain(france)\n    externalEvent(france, germany)\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if len(france.enemies) != 0:\n        targetCountry = france.enemies[0]\n        war(france, targetCountry)\n\n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"new testing - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1752709070532,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"crosshair\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 10)\n    strategy.peacefulness = randint(1, 10)\n    strategy.trading = randint(1, 10)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(10)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = randint(1, 1000) + (country.strategy.aggressiveness / 2)\n    war > 994 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = randint(1, 1000) + (country.strategy.peacefulness / 2)\n    peace > 994 and not war > 994 and isEnemy and declarePeace(country, targetCountry)\n    trade = randint(1, 1000) + (country.strategy.trading / 2)\n    trade > 884 and not isTradePartner and not war > 994 and not peace > 994 and not isEnemy and declareTrade(country, targetCountry)\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    attack = Math.percent_chance((country.pop / 1000000) - (targetCountry.pop / 1000000))\n    if attack:\n        roll = randint(1, 100) + ((country.pop / 100000) - (targetCountry.pop / 100000))\n        if roll < 50:\n            country.pop -= 5000\n        else:\n            tiles.set_tile_at(enemyTile, country.getTileImage())\n            removeTile(targetCountry, enemyTile)\n            addTile(country, enemyTile)\n        \n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\n\ndef Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    if randomCountry.name != germany.name:\n        externalEvent(germany, randomCountry)\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if len(germany.enemies) > 0:\n        targetCountry = germany.enemies[0]\n        war(germany, targetCountry)\n\ndef France():\n    pop = popGain(france)\n    ecoGain(france)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    if randomCountry.name != france.name:\n        externalEvent(france, randomCountry)\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if len(france.enemies) != 0:\n        targetCountry = france.enemies[0]\n        war(france, targetCountry)\n\ndef Belgium():\n    pop = popGain(belgium)\n    ecoGain(belgium)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(belgium.enemies)\n    if not belgium.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if belgium.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if belgium.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if belgium.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != belgium.name:\n        externalEvent(belgium, randomCountry)\n        if len(belgium.enemies) != 0:\n            randomEnemyIndex = len(belgium.enemies) - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomCountry\n            war(belgium, targetCountry)\n\n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAABVAAAAAFAAAFAFAAAAVQAAAFUAUFAFAAAAUAVQVQAAAAAAVVAFAAAAAABQUFUAAAAAAFBVUAUAAAAAUAUAAAAAAABVVQAFAAAAUAVQVQAAAABVAFBVAAAAUAUAVVAFAABVAAAFAFUAAAUAAAAAUAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1752794372335,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\n\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 10)\n    strategy.peacefulness = randint(1, 10)\n    strategy.trading = randint(1, 10)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(10)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getBorderingCountries(country: countryType, targetCountry: countryType):\n    country.borderingCountries = []\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            country.borderingCountries.append(targetCountry)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            pass\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    pass\n\"\"\"\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = randint(1, 1000) + (country.strategy.aggressiveness / 2)\n    war > 994 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    peace = randint(1, 1000) + (country.strategy.peacefulness / 2)\n    peace > 994 and not war > 994 and isEnemy and declarePeace(country, targetCountry)\n    trade = randint(1, 1000) + (country.strategy.trading / 2)\n    trade > 884 and not isTradePartner and not war > 994 and not peace > 994 and not isEnemy and declareTrade(country, targetCountry)\n\"\"\"\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    attack = Math.percent_chance((country.pop / 100000) - (targetCountry.pop / 100000))\n    if attack:\n        roll = randint(1, 100) + ((country.pop / 100000) - (targetCountry.pop / 100000))\n        if roll < 80:\n            country.pop -= 5000\n        else:\n            tiles.set_tile_at(enemyTile, country.getTileImage())\n            removeTile(targetCountry, enemyTile)\n            addTile(country, enemyTile)\n        \n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ndef Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if len(germany.enemies) > 0:\n        targetCountry = germany.enemies[0]\n        war(germany, targetCountry)\n    if randomCountry.name != germany.name:\n        externalEvent(germany, randomCountry)\n        if len(germany.enemies) != 0:\n            randomEnemyIndex = len(germany.enemies) - 1\n            randomEnemy = germany.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomCountry\n            war(germany, targetCountry)\n\ndef France():\n    pop = popGain(france)\n    ecoGain(france)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != france.name:\n        externalEvent(france, randomCountry)\n        if len(france.enemies) != 0:\n            randomEnemyIndex = len(france.enemies) - 1\n            randomEnemy = france.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomCountry\n            war(france, targetCountry)\n\ndef Belgium():\n    pop = popGain(belgium)\n    ecoGain(belgium)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(belgium.enemies)\n    if not belgium.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if belgium.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if belgium.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if belgium.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != belgium.name:\n        externalEvent(belgium, randomCountry)\n        if len(belgium.enemies) != 0:\n            randomEnemyIndex = len(belgium.enemies) - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomCountry\n            war(belgium, targetCountry)\n\ndef Britain():\n    pop = popGain(britain)\n    ecoGain(britain)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(britain.enemies)\n    if not britain.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if britain.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if britain.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if britain.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != britain.name:\n        externalEvent(britain, randomCountry)\n        if len(britain.enemies) != 0:\n            randomEnemyIndex = len(britain.enemies) - 1\n            randomEnemy = britain.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomCountry\n            war(britain, targetCountry)\n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    elif not mp.is_button_pressed(player, mp.MultiplayerButton.UP) and not mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) and not mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAABVAAAAAFAAAFAFAAAAVQAAAFUAUFAFAAAAUAVQVQAAAAAAVVAFAAAAAABQUFUAAAAAAFBVUAUAAAAAUAUAAAAAAABVVQAFAAAAUAVQVQAAAABVAFBVAAAAUAUAVVAFAABVAAAFAFUAAAUAAAAAUAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1752817498727,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\nfight = SpriteKind.create()\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, influencedWar: int, tilesLost: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, isDestroyed: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n        self.strategy = strategy\n        self.isAi = isAi\n        self.peaceCooldown = peaceCooldown\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    country.influencedWar = 1\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    country.peaceCooldown = 200\n    country.tilesLost = 0\n    enemy.tilesLost = 0\n    accept = Math.percent_chance(30)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(5 * enemy.tilesLost)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getBorderingCountries(country: countryType, targetCountry: countryType):\n    country.borderingCountries = []\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            country.borderingCountries.append(targetCountry)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            pass\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef removeCountry(country: countryType):\n    index = 0\n    for existingCountry in countries:\n        if existingCountry.name == country.name:\n            countries.remove_at(index)\n        index += 1\n    game.show_long_text(country.name + \" has collapsed\", DialogLayout.BOTTOM)\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = randint(1, 10000) + (country.strategy.aggressiveness / 2) * country.influencedWar\n    war > 9990 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    if country.peaceCooldown == 0:\n        peace = randint(1, 10000) + (country.strategy.peacefulness / 2) + (country.tilesLost * 5)\n        peace > 9990 and not war > 9990 and isEnemy and declarePeace(country, targetCountry)\n    else:\n        country.peaceCooldown -= 1\n    trade = randint(1, 10000) + (country.strategy.trading / 2)\n    trade > 9980 and not isTradePartner and not war > 9990 and not peace > 9990 and not isEnemy and declareTrade(country, targetCountry)\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    attack = Math.percent_chance((country.pop / 50000) - (targetCountry.pop / 50000))\n    if attack:\n        roll = randint(1, 100) + ((country.pop / 100000) - (targetCountry.pop / 100000))\n        if roll < 80:\n            failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n            failedBattle.set_position(enemyTile.x, enemyTile.y)\n            failedBattle.destroy(effects.fire, 100)\n            country.pop -= 5000\n        else:\n            tiles.set_tile_at(enemyTile, country.getTileImage())\n            removeTile(targetCountry, enemyTile)\n            addTile(country, enemyTile)\n            targetCountry.tilesLost += 1\n        \n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ndef Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != germany.name:\n        externalEvent(germany, randomCountry)\n        if len(germany.enemies) > 0:\n            randomEnemyIndex = len(germany.enemies) - 1\n            randomEnemy = germany.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(germany, targetCountry)\n    if len(germany.tiles) <= 0:\n        removeCountry(germany)\n\ndef France():\n    pop = popGain(france)\n    ecoGain(france)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != france.name:\n        externalEvent(france, randomCountry)\n        if len(france.enemies) != 0:\n            randomEnemyIndex = len(france.enemies) - 1\n            randomEnemy = france.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(france, targetCountry)\n    if len(france.tiles) <= 0:\n        removeCountry(france)\n\ndef Belgium():\n    pop = popGain(belgium)\n    ecoGain(belgium)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(belgium.enemies)\n    if not belgium.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if belgium.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if belgium.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if belgium.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != belgium.name:\n        externalEvent(belgium, randomCountry)\n        if len(belgium.enemies) != 0:\n            randomEnemyIndex = len(belgium.enemies) - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(belgium, targetCountry)\n    if len(belgium.tiles) <= 0:\n        removeCountry(belgium)\n\ndef Britain():\n    pop = popGain(britain)\n    ecoGain(britain)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(britain.enemies)\n    if not britain.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if britain.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if britain.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if britain.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != britain.name:\n        externalEvent(britain, randomCountry)\n        if len(britain.enemies) != 0:\n            randomEnemyIndex = len(britain.enemies) - 1\n            randomEnemy = britain.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(britain, targetCountry)\n    if len(britain.tiles) <= 0:\n        removeCountry(britain)\n        \n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar != 1.1:\n            playerSprite.say_text(\"Influenced war\", 1000)\n            country.influencedWar = 5\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    else:\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAADMAAAAAMAAAMAMAAAAzAAAAMwAwMAMAAAAwAzAzAAAAAAAzMAMAAAAAADAwMwAAAAAAMDMwAwAAAAAwAwAAAAAAADMzAAMAAAAwAzAzAAAAADMAMDMAAAAwAwAzMAMAADMAAAMAMwAAAwAAAAAwAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3 - Copy - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1753051576030,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\nfight = SpriteKind.create()\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, influencedWar: int, tilesLost: int, strategy: aiStrategy, isAi: bool, peaceCooldown: int, isDestroyed: bool, tradePartners: List[countryType], enemies: List[countryType], tileName: str, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n        self.strategy = strategy\n        self.isAi = isAi\n        self.peaceCooldown = peaceCooldown\n        self.isDestroyed = isDestroyed\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.tileName = tileName\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"germanTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"franceTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"belgiumTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, 1, 0, aiStrategy(\"\", 0, 0, 0), True, 0, False, [], [], \"britainTile\", tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 10\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    country.influencedWar = 1\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    country.peaceCooldown = 200\n    country.tilesLost = 0\n    enemy.tilesLost = 0\n    accept = Math.percent_chance(30 + (enemy.peacefulness / 2) + (enemy.tilesLost * 2))\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(5 * enemy.tilesLost)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getBorderingCountries(country: countryType, targetCountry: countryType):\n    country.borderingCountries = []\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            country.borderingCountries.append(targetCountry)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            pass\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef removeCountry(country: countryType):\n    index = 0\n    for existingCountry in countries:\n        if existingCountry.name == country.name:\n            countries.remove_at(index)\n        index += 1\n    game.show_long_text(country.name + \" has collapsed\", DialogLayout.BOTTOM)\n    country.isDestroyed = True\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = randint(1, 10000) + (country.strategy.aggressiveness / 2) * country.influencedWar\n    war > 9990 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    if country.peaceCooldown == 0:\n        peace = randint(1, 10000) + (country.strategy.peacefulness / 2) + (country.tilesLost * 5)\n        peace > 9990 and not war > 9990 and isEnemy and declarePeace(country, targetCountry)\n    else:\n        country.peaceCooldown -= 1\n    trade = randint(1, 10000) + (country.strategy.trading / 2)\n    trade > 9980 and not isTradePartner and not war > 9990 and not peace > 9990 and not isEnemy and declareTrade(country, targetCountry)\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    attack = Math.percent_chance((country.pop / 50000) - (targetCountry.pop / 50000))\n    if attack:\n        roll = randint(1, 100) + ((country.pop / 100000) - (targetCountry.pop / 100000))\n        if roll < 80:\n            failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n            failedBattle.set_position(enemyTile.x, enemyTile.y)\n            failedBattle.destroy(effects.fire, 100)\n            country.pop -= 5000\n        else:\n            tiles.set_tile_at(enemyTile, country.getTileImage())\n            removeTile(targetCountry, enemyTile)\n            addTile(country, enemyTile)\n            targetCountry.tilesLost += 1\n        \n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ndef Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n    if randomCountry.name != germany.name:\n        externalEvent(germany, randomCountry)\n        if len(germany.enemies) > 0:\n            randomEnemyIndex = len(germany.enemies) - 1\n            randomEnemy = germany.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(germany, targetCountry)\n    if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n        removeCountry(germany)\n\ndef France():\n    pop = popGain(france)\n    ecoGain(france)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != france.name:\n        externalEvent(france, randomCountry)\n        if len(france.enemies) != 0:\n            randomEnemyIndex = len(france.enemies) - 1\n            randomEnemy = france.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(france, targetCountry)\n    if len(france.tiles) <= 0 and france.isDestroyed == False:\n        removeCountry(france)\n\ndef Belgium():\n    pop = popGain(belgium)\n    ecoGain(belgium)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(belgium.enemies)\n    if not belgium.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if belgium.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if belgium.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if belgium.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != belgium.name:\n        externalEvent(belgium, randomCountry)\n        if len(belgium.enemies) != 0:\n            randomEnemyIndex = len(belgium.enemies) - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(belgium, targetCountry)\n    if len(belgium.tiles) <= 0 and belgium.isDestroyed == False:\n        removeCountry(belgium)\n\n\ndef Britain():\n    pop = popGain(britain)\n    ecoGain(britain)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(britain.enemies)\n    if not britain.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if britain.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if britain.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if britain.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n    if randomCountry.name != britain.name:\n        externalEvent(britain, randomCountry)\n        if len(britain.enemies) != 0:\n            randomEnemyIndex = len(britain.enemies) - 1\n            randomEnemy = britain.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(britain, targetCountry)\n    if len(britain.tiles) <= 0 and britain.isDestroyed == False:\n        removeCountry(britain)\n        \n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar != 1.1:\n            playerSprite.say_text(\"Influenced war\", 1000)\n            country.influencedWar = 5\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_property(player, mp.PlayerProperty.INDEX) == country.playerChosen:\n            if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n                animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n            else:\n                animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAADMAAAAAMAAAMAMAAAAzAAAAMwAwMAMAAAAwAzAzAAAAAAAzMAMAAAAAADAwMwAAAAAAMDMwAwAAAAAwAwAAAAAAADMzAAMAAAAwAzAzAAAAADMAMDMAAAAwAwAzMAMAADMAAAMAMwAAAwAAAAAwAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"anim3\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim3\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"MzIwMDEwMDAxMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMTEwMTAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMTAwMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAxMDEwMDAwMDAwMDAwMDEwMTAxMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMDEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDQ0NDQwMDAwMDAwMDAwMDAwNDQ0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQwMDAwMDAwMDAwMDA0MDQ0NDQwMDAwMDAwMDAwNDAyNDQ0MDAwMDAwMDAwMDQwNDQ0NDAwMDAwMDAwMDAwMDQ0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDA1MDA1NTAwMDAwMDAwNTA0NTAwNDUwNDAwNTAwMDUwNDQ0NDQ0NDQ0NDU1MDA0MDI0NDQ0NDQ0NDI1NTAwMDAyNDIyMjIyMjQyMDQwMDAwNDQyMjIyMjI0MjAwMDAwMDQwMjQyMjIyMDQwMDAwMDA0MDIyMjIyMjA0MDAwMDUwNDQyMjIyMjI0NDAwMDA1MDQ1MjQyMjIyNDQwMDAwMDA1NTQ1MjQ0MjU0MDUwMDAwMDA0NTQ0NDQ1NDAwMDAwMDUwNTUwMDQ0NTQwMDAwMDA1NTU1MDAwMDU1MDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobImplode\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3 - Copy - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1753138891313,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\nfight = SpriteKind.create()\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass diplomacy:\n    def __init__(self, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, tradePartners: List[countryType], enemies: List[countryType]):\n        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n        self.peaceCooldown = peaceCooldown\n        self.countryTargetted = countryTargetted\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, diplomaticSituation: diplomacy, isDestroyed: bool, tiles: List[tiles.Location] = []):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.diplomaticSituation = diplomaticSituation\n        self.isDestroyed = isDestroyed\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, diplomacy(1, 0, 0, None, [], []), False, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 12\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    country.diplomacy.influencedWar = 1\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    country.peaceCooldown = 60\n    accept = Math.percent_chance(15 * enemy.tilesLost)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n        country.tilesLost = 0\n        enemy.tilesLost = 0\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getCountryByPlayer(p: player):\n    for country in countries:\n        if mp.get_player_property(p, mp.PlayerProperty.INDEX) == country.playerChosen:\n            return country\n            break\n    return None\n\ndef getBorderingCountries(country: countryType, targetCountry: countryType):\n    country.borderingCountries = []\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            country.borderingCountries.append(targetCountry)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            pass\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            pass\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef removeCountry(country: countryType):\n    index = 0\n    for existingCountry in countries:\n        if existingCountry.name == country.name:\n            countries.remove_at(index)\n        index += 1\n    game.show_long_text(country.name + \" has collapsed\", DialogLayout.BOTTOM)\n    country.isDestroyed = True\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = randint(1, 10000) + (country.strategy.aggressiveness / 2)\n    if country.countryTargetted == targetCountry.name:\n        war = war * country.influencedWar\n    war > 9990 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    if country.peaceCooldown == 0:\n        peace = randint(1, 10000) + (country.strategy.peacefulness / 2) + (country.tilesLost * 5)\n        peace > 9990 and not war > 9990 and isEnemy and declarePeace(country, targetCountry)\n    else:\n        country.peaceCooldown -= 1\n    trade = randint(1, 10000) + (country.strategy.trading / 2)\n    trade > 9980 and not isTradePartner and not war > 9990 and not peace > 9990 and not isEnemy and declareTrade(country, targetCountry)\n\ndef internalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    charge = randint(1, 10000)\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    if not country.pop > 0:\n        return\n    attack = Math.percent_chance(0.5 + ((country.pop / 10000) - (targetCountry.pop / 10000)))\n    if not attack:\n        return\n    roll = randint(1, 500) + ((country.pop / 10000) - (targetCountry.pop / 10000))\n    if roll < 480:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.fire, 100)\n        country.pop -= roll * 10\n    else:\n        tiles.set_tile_at(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        addTile(country, enemyTile)\n        targetCountry.tilesLost += 1\n        targetCountry.pop -= roll * 10\n        \n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ndef Germany():\n    pop = popGain(germany)\n    ecoGain(germany)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(germany.enemies)\n    if not germany.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if germany.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if germany.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if germany.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            germany.isDestroyed = True\n    if randomCountry.name != germany.name:\n        externalEvent(germany, randomCountry)\n        if len(germany.enemies) > 0:\n            randomEnemyIndex = len(germany.enemies) - 1\n            randomEnemy = germany.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(germany, targetCountry)\n    if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n        removeCountry(germany)\n\ndef France():\n    pop = popGain(france)\n    ecoGain(france)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            france.isDestroyed = True\n    if randomCountry.name != france.name:\n        externalEvent(france, randomCountry)\n        if len(france.enemies) != 0:\n            randomEnemyIndex = len(france.enemies) - 1\n            randomEnemy = france.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(france, targetCountry)\n    if len(france.tiles) <= 0 and france.isDestroyed == False:\n        removeCountry(france)\n\ndef Belgium():\n    pop = popGain(belgium)\n    ecoGain(belgium)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(belgium.enemies)\n    if not belgium.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if belgium.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if belgium.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if belgium.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            belgium.isDestroyed = True\n    if randomCountry.name != belgium.name:\n        externalEvent(belgium, randomCountry)\n        if len(belgium.enemies) != 0:\n            randomEnemyIndex = len(belgium.enemies) - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(belgium, targetCountry)\n    if len(belgium.tiles) <= 0 and belgium.isDestroyed == False:\n        removeCountry(belgium)\n\n\ndef Britain():\n    pop = popGain(britain)\n    ecoGain(britain)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(britain.enemies)\n    if not britain.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if britain.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if britain.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if britain.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            britain.isDestroyed = True\n    if randomCountry.name != britain.name:\n        externalEvent(britain, randomCountry)\n        if len(britain.enemies) != 0:\n            randomEnemyIndex = len(britain.enemies) - 1\n            randomEnemy = britain.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(britain, targetCountry)\n    if len(britain.tiles) <= 0 and britain.isDestroyed == False:\n        removeCountry(britain)\n        \n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar == 1:\n            for targetCountry in countries:\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name and len(country.enemies) == 0:\n                    playerSprite.say_text(\"Influenced war with \" + targetCountry.name, 5000)\n                    country.influencedWar = 5\n                    country.countryTargetted = targetCountry.name\n                    break\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    country: countryType = getCountryByPlayer(player) if getCountryByPlayer(player) != None else None\n    if country is None:\n        if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n        else:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n        return\n    if country.isDestroyed == True:\n        return\n    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    else:\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAADMAAAAAMAAAMAMAAAAzAAAAMwAwMAMAAAAwAzAzAAAAAAAzMAMAAAAAADAwMwAAAAAAMDMwAwAAAAAwAwAAAAAAADMzAAMAAAAwAzAzAAAAADMAMDMAAAAwAwAzMAMAADMAAAMAMwAAAwAAAAAwAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"anim3\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim3\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"MzIwMDEwMDAxMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMTEwMTAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMTAwMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAxMDEwMDAwMDAwMDAwMDEwMTAxMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMDEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDQ0NDQwMDAwMDAwMDAwMDAwNDQ0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQwMDAwMDAwMDAwMDA0MDQ0NDQwMDAwMDAwMDAwNDAyNDQ0MDAwMDAwMDAwMDQwNDQ0NDAwMDAwMDAwMDAwMDQ0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDA1MDA1NTAwMDAwMDAwNTA0NTAwNDUwNDAwNTAwMDUwNDQ0NDQ0NDQ0NDU1MDA0MDI0NDQ0NDQ0NDI1NTAwMDAyNDIyMjIyMjQyMDQwMDAwNDQyMjIyMjI0MjAwMDAwMDQwMjQyMjIyMDQwMDAwMDA0MDIyMjIyMjA0MDAwMDUwNDQyMjIyMjI0NDAwMDA1MDQ1MjQyMjIyNDQwMDAwMDA1NTQ1MjQ0MjU0MDUwMDAwMDA0NTQ0NDQ1NDAwMDAwMDUwNTUwMDQ0NTQwMDAwMDA1NTU1MDAwMDU1MDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobImplode\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3 - Copy - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1753224933528,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\nfight = SpriteKind.create()\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, tiles: List[tiles.Location]):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n        self.peaceCooldown = peaceCooldown\n        self.countryTargetted = countryTargetted\n        self.borderingCountries = borderingCountries\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.isDestroyed = isDestroyed\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 12\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    country.influencedWar = 1\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    country.peaceCooldown = 60\n    accept = Math.percent_chance(15 * enemy.tilesLost)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n        country.tilesLost = 0\n        enemy.tilesLost = 0\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getCountryByPlayer(p: player):\n    for country in countries:\n        if mp.get_player_property(p, mp.PlayerProperty.INDEX) == country.playerChosen:\n            return country\n            break\n    return None\n\ndef getBorderingCountries(country: countryType):\n    for tile in country.tiles:\n        for targetCountry in countries:\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef removeCountry(country: countryType):\n    index = 0\n    for existingCountry in countries:\n        if existingCountry.name == country.name:\n            countries.remove_at(index)\n        index += 1\n    game.show_long_text(country.name + \" has collapsed\", DialogLayout.BOTTOM)\n    country.isDestroyed = True\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = randint(1, 10000) + (country.strategy.aggressiveness / 2)\n    if country.countryTargetted == targetCountry.name:\n        war = war * country.influencedWar\n    war > 9990 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    if country.peaceCooldown == 0:\n        peace = randint(1, 10000) + (country.strategy.peacefulness / 2) + (country.tilesLost * 5)\n        peace > 9990 and not war > 9990 and isEnemy and declarePeace(country, targetCountry)\n    else:\n        country.peaceCooldown -= 1\n    trade = randint(1, 10000) + (country.strategy.trading / 2)\n    trade > 9980 and not isTradePartner and not war > 9990 and not peace > 9990 and not isEnemy and declareTrade(country, targetCountry)\n\ndef internalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    charge = randint(1, 10000)\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    if not country.pop > 0:\n        return\n    attack = Math.percent_chance(0.5 + ((country.pop / 10000) - (targetCountry.pop / 10000)))\n    if not attack:\n        return\n    roll = randint(1, 500) + ((country.pop / 10000) - (targetCountry.pop / 10000))\n    if roll < 480:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.fire, 100)\n        country.pop -= roll * 10\n    else:\n        tiles.set_tile_at(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        addTile(country, enemyTile)\n        targetCountry.tilesLost += 1\n        targetCountry.pop -= roll * 10\n        \n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ndef createCountry(country: countryType):\n    pass\n\ndef runCountry(country: countryType):\n    pop = popGain(country)\n    ecoGain(country)\n    getBorderingCountries(country)\n    index = len(country.borderingCountries) - 1\n    randomCountry = country.borderingCountries[randint(0, index)]\n    enemyIndex = len(country.enemies)\n    if not country.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if country.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if country.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if country.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(country.tiles) <= 0 and country.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            country.isDestroyed = True\n    if randomCountry.name != country.name:\n        externalEvent(country, randomCountry)\n        if len(country.enemies) > 0:\n            randomEnemyIndex = len(country.enemies) - 1\n            randomEnemy = country.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(country, targetCountry)\n    if len(country.tiles) <= 0 and country.isDestroyed == False:\n        removeCountry(country)\n\ndef France():\n    pop = popGain(france)\n    ecoGain(france)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(france.enemies)\n    if not france.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if france.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if france.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if france.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            france.isDestroyed = True\n    if randomCountry.name != france.name:\n        externalEvent(france, randomCountry)\n        if len(france.enemies) != 0:\n            randomEnemyIndex = len(france.enemies) - 1\n            randomEnemy = france.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(france, targetCountry)\n    if len(france.tiles) <= 0 and france.isDestroyed == False:\n        removeCountry(france)\n\ndef Belgium():\n    pop = popGain(belgium)\n    ecoGain(belgium)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(belgium.enemies)\n    if not belgium.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if belgium.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if belgium.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if belgium.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            belgium.isDestroyed = True\n    if randomCountry.name != belgium.name:\n        externalEvent(belgium, randomCountry)\n        if len(belgium.enemies) != 0:\n            randomEnemyIndex = len(belgium.enemies) - 1\n            randomEnemy = belgium.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(belgium, targetCountry)\n    if len(belgium.tiles) <= 0 and belgium.isDestroyed == False:\n        removeCountry(belgium)\n\n\ndef Britain():\n    pop = popGain(britain)\n    ecoGain(britain)\n    index = len(countries) - 1\n    randomCountry = countries[randint(0, index)]\n    enemyIndex = len(britain.enemies)\n    if not britain.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if britain.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if britain.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if britain.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, pop)\n        if len(germany.tiles) <= 0 and germany.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            britain.isDestroyed = True\n    if randomCountry.name != britain.name:\n        externalEvent(britain, randomCountry)\n        if len(britain.enemies) != 0:\n            randomEnemyIndex = len(britain.enemies) - 1\n            randomEnemy = britain.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(britain, targetCountry)\n    if len(britain.tiles) <= 0 and britain.isDestroyed == False:\n        removeCountry(britain)\n        \n\ngame.on_update_interval(100, runCountry(germany))\ngame.on_update_interval(100, runCountry(france))\ngame.on_update_interval(100, runCountry(belgium))\ngame.on_update_interval(100, runCountry(britain))\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar == 1:\n            for targetCountry in countries:\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name and len(country.enemies) == 0:\n                    playerSprite.say_text(\"Influenced war with \" + targetCountry.name, 5000)\n                    country.influencedWar = 5\n                    country.countryTargetted = targetCountry.name\n                    break\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    country: countryType = getCountryByPlayer(player) if getCountryByPlayer(player) != None else None\n    if country is None:\n        if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n        else:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n        return\n    if country.isDestroyed == True:\n        return\n    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    else:\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAADMAAAAAMAAAMAMAAAAzAAAAMwAwMAMAAAAwAzAzAAAAAAAzMAMAAAAAADAwMwAAAAAAMDMwAwAAAAAwAwAAAAAAADMzAAMAAAAwAzAzAAAAADMAMDMAAAAwAwAzMAMAADMAAAMAMwAAAwAAAAAwAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"anim3\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim3\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"MzIwMDEwMDAxMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMTEwMTAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMTAwMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAxMDEwMDAwMDAwMDAwMDEwMTAxMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMDEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDQ0NDQwMDAwMDAwMDAwMDAwNDQ0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQwMDAwMDAwMDAwMDA0MDQ0NDQwMDAwMDAwMDAwNDAyNDQ0MDAwMDAwMDAwMDQwNDQ0NDAwMDAwMDAwMDAwMDQ0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDA1MDA1NTAwMDAwMDAwNTA0NTAwNDUwNDAwNTAwMDUwNDQ0NDQ0NDQ0NDU1MDA0MDI0NDQ0NDQ0NDI1NTAwMDAyNDIyMjIyMjQyMDQwMDAwNDQyMjIyMjI0MjAwMDAwMDQwMjQyMjIyMDQwMDAwMDA0MDIyMjIyMjA0MDAwMDUwNDQyMjIyMjI0NDAwMDA1MDQ1MjQyMjIyNDQwMDAwMDA1NTQ1MjQ0MjU0MDUwMDAwMDA0NTQ0NDQ1NDAwMDAwMDUwNTUwMDQ0NTQwMDAwMDA1NTU1MDAwMDU1MDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobImplode\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3 - Copy - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1753310616581,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\nfight = SpriteKind.create()\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, influencedWar: int, tilesLost: int, peaceCooldown: int, countryTargetted: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, chargeCooldown: int, chargeTarget: str, tiles: List[tiles.Location]):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.influencedWar = influencedWar\n        self.tilesLost = tilesLost\n        self.peaceCooldown = peaceCooldown\n        self.countryTargetted = countryTargetted\n        self.borderingCountries = borderingCountries\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.isDestroyed = isDestroyed\n        self.chargeCooldown = chargeCooldown\n        self.chargeTarget = chargeTarget\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 1, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 12\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    country.influencedWar = 1\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    country.peaceCooldown = 60\n    accept = Math.percent_chance(15 * enemy.tilesLost)\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n        country.tilesLost = 0\n        enemy.tilesLost = 0\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getCountryByPlayer(p: player):\n    for country in countries:\n        if mp.get_player_property(p, mp.PlayerProperty.INDEX) == country.playerChosen:\n            return country\n            break\n    return None\n\ndef getBorderingCountries(country: countryType):\n    for tile in country.tiles:\n        for targetCountry in countries:\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef removeCountry(country: countryType):\n    index = 0\n    for existingCountry in countries:\n        if existingCountry.name == country.name:\n            countries.remove_at(index)\n        index += 1\n    game.show_long_text(country.name + \" has collapsed\", DialogLayout.BOTTOM)\n    country.isDestroyed = True\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = randint(1, 10000) + (country.strategy.aggressiveness / 2)\n    if country.countryTargetted == targetCountry.name:\n        war = war * country.influencedWar\n    war > 9990 and not isEnemy and not len(country.enemies) > 0 and declareWar(country, targetCountry)\n    if country.peaceCooldown == 0:\n        peace = randint(1, 10000) + (country.strategy.peacefulness / 2) + (country.tilesLost * 5)\n        peace > 9990 and not war > 9990 and isEnemy and declarePeace(country, targetCountry)\n    else:\n        country.peaceCooldown -= 1\n    trade = randint(1, 10000) + (country.strategy.trading / 2)\n    trade > 9980 and not isTradePartner and not war > 9990 and not peace > 9990 and not isEnemy and declareTrade(country, targetCountry)\n\ndef internalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    charge = randint(1, 10000)\n    if charge > 9990 and country.isAi == True:\n        country.chargeCooldown = 120\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    charge = 1\n    if not country.pop > 0:\n        return\n    if country.chargeTarget != None:\n        if country.chargeCooldown != 0 and country.chargeTarget == targetCountry.name:\n            charge = 20\n            country.chargeCooldown -= 1\n    attack = Math.percent_chance(1 + ((country.pop / 10000) - (targetCountry.pop / 10000)) + charge)\n    if not attack:\n        return\n    roll = randint(1, 500) + ((country.pop / 10000) - (targetCountry.pop / 10000))\n    if roll < 480:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.fire, 100)\n        country.pop -= roll * 10\n    else:\n        tiles.set_tile_at(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        addTile(country, enemyTile)\n        targetCountry.tilesLost += 1\n        targetCountry.pop -= roll * 10\n        \n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ndef runCountry(country: countryType):\n    getBorderingCountries(country)\n    popGain(country)\n    ecoGain(country)\n    getBorderingCountries(country)\n    index = len(country.borderingCountries)\n    randomCountry = country.borderingCountries[randint(0, index)]\n    enemyIndex = len(country.enemies)\n    if not country.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if country.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if country.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if country.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, country.pop)\n        if len(country.tiles) <= 0 and country.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            country.isDestroyed = True\n    if randomCountry.name != country.name:\n        externalEvent(country, randomCountry)\n        if len(country.enemies) > 0:\n            randomEnemyIndex = len(country.enemies) - 1\n            randomEnemy = country.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(country, targetCountry)\n    if len(country.tiles) <= 0 and country.isDestroyed == False:\n        removeCountry(country)\n    \n    \n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\ndef Germany():\n    runCountry(germany)\n\ndef France():\n    runCountry(france)\n\ndef Belgium():\n    runCountry(belgium)\n\ndef Britain():\n    runCountry(britain)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n        elif country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.influencedWar == 1:\n            for targetCountry in countries:\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == targetCountry.getTileImage() and targetCountry.name != country.name and len(country.enemies) == 0:\n                    playerSprite.say_text(\"Influenced war with \" + targetCountry.name, 5000)\n                    country.influencedWar = 5\n                    country.countryTargetted = targetCountry.name\n                    break\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_b_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\nmp.on_button_event(mp.MultiplayerButton.B, ControllerButtonEvent.PRESSED, on_button_event_b_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    country: countryType = getCountryByPlayer(player) if getCountryByPlayer(player) != None else None\n    if country is None:\n        if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n        else:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n        return\n    if country.isDestroyed == True:\n        return\n    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    else:\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAADMAAAAAMAAAMAMAAAAzAAAAMwAwMAMAAAAwAzAzAAAAAAAzMAMAAAAAADAwMwAAAAAAMDMwAwAAAAAwAwAAAAAAADMzAAMAAAAwAzAzAAAAADMAMDMAAAAwAwAzMAMAADMAAAMAMwAAAwAAAAAwAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"anim3\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim3\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"MzIwMDEwMDAxMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMTEwMTAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMTAwMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAxMDEwMDAwMDAwMDAwMDEwMTAxMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMDEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDQ0NDQwMDAwMDAwMDAwMDAwNDQ0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQwMDAwMDAwMDAwMDA0MDQ0NDQwMDAwMDAwMDAwNDAyNDQ0MDAwMDAwMDAwMDQwNDQ0NDAwMDAwMDAwMDAwMDQ0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDA1MDA1NTAwMDAwMDAwNTA0NTAwNDUwNDAwNTAwMDUwNDQ0NDQ0NDQ0NDU1MDA0MDI0NDQ0NDQ0NDI1NTAwMDAyNDIyMjIyMjQyMDQwMDAwNDQyMjIyMjI0MjAwMDAwMDQwMjQyMjIyMDQwMDAwMDA0MDIyMjIyMjA0MDAwMDUwNDQyMjIyMjI0NDAwMDA1MDQ1MjQyMjIyNDQwMDAwMDA1NTQ1MjQ0MjU0MDUwMDAwMDA0NTQ0NDQ1NDAwMDAwMDUwNTUwMDQ0NTQwMDAwMDA1NTU1MDAwMDU1MDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobImplode\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3 - Copy - Copy - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1753399831401,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\nfight = SpriteKind.create()\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, casualties: int, tilesLost: int, warTarget: str, warCooldown: int, peaceCooldown: int, peaceTarget: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, chargeCooldown: int, chargeTarget: str, tiles: List[tiles.Location]):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.casualties = casualties\n        self.tilesLost = tilesLost\n        self.warTarget = warTarget\n        self.warCooldown = warCooldown\n        self.peaceCooldown = peaceCooldown\n        self.peaceTarget = peaceTarget\n        self.borderingCountries = borderingCountries\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.isDestroyed = isDestroyed\n        self.chargeCooldown = chargeCooldown\n        self.chargeTarget = chargeTarget\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 12\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    country.warTarget = None\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    country.peaceTarget = None\n    accept = Math.percent_chance(15 + ( enemy.tilesLost * 5) + (enemy.casualties / 10000))\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n        country.tilesLost = 0\n        enemy.tilesLost = 0\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getCountryByPlayer(p: player):\n    for country in countries:\n        if mp.get_player_property(p, mp.PlayerProperty.INDEX) == country.playerChosen:\n            return country\n            break\n    return None\n\ndef getBorderingCountries(country: countryType):\n    for tile in country.tiles:\n        for targetCountry in countries:\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef removeCountry(country: countryType):\n    index = 0\n    for existingCountry in countries:\n        if existingCountry.name == country.name:\n            countries.remove_at(index)\n        index += 1\n    game.show_long_text(country.name + \" has collapsed\", DialogLayout.BOTTOM)\n    country.isDestroyed = True\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    warFactor = 5 if targetCountry.name == country.warTarget else 1\n    peaceFactor = 5 if targetCountry.name == country.peaceTarget else 1\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = True if (randint(1, 10000) + country.strategy.aggressiveness - (len(country.enemies) * 100)) * warFactor > 9590 and not isEnemy else False\n    war and declareWar(country, targetCountry)\n    peace = True if (randint(1, 10000) + (country.casualties / 100) + country.strategy.peacefulness) * peaceFactor > 9590  and not war and isEnemy else False\n    peace and declarePeace(country, targetCountry)\n    trade = True if randint(1, 10000) + (country.strategy.trading / 2) > 9850 and not isTradePartner and not war and not peace and not isEnemy else False\n    trade and declareTrade(country, targetCountry)\n\ndef internalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    charge = True if randint(1, 10000) > 9990 and country.isAi == True else False\n    if charge:\n        country.chargeCooldown = 120\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    charge = 1\n    if not country.pop > 0:\n        return\n    if country.chargeTarget != None:\n        if country.chargeCooldown != 0 and country.chargeTarget == targetCountry.name:\n            charge = 20\n            country.chargeCooldown -= 1\n    attack = Math.percent_chance(1 + ((country.pop / 5000) - (targetCountry.pop / 10000)) + charge + (country.strategy.aggressiveness / 10))\n    if not attack:\n        return\n    roll = randint(1, 500) + ((country.pop / 10000) - (targetCountry.pop / 10000))\n    if roll < 480:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.fire, 200)\n        country.pop -= roll * 10\n        country.casualties += roll * 10\n    else:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.ashes, 500)\n        tiles.set_tile_at(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        addTile(country, enemyTile)\n        targetCountry.tilesLost += 1\n        targetCountry.pop -= roll * 10\n        targetCountry.casualties += roll * 10\n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ndef runCountry(country: countryType):\n    getBorderingCountries(country)\n    popGain(country)\n    ecoGain(country)\n    getBorderingCountries(country)\n    index = len(country.borderingCountries) - 1\n    randomCountry = country.borderingCountries[randint(0, index)]\n    if not country.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if country.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if country.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if country.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, country.pop)\n        if len(country.tiles) <= 0 and country.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            country.isDestroyed = True\n    if randomCountry.name != country.name:\n        externalEvent(country, randomCountry)\n        if len(country.enemies) > 0:\n            randomEnemyIndex = len(country.enemies) - 1\n            randomEnemy = country.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(country, targetCountry)\n    if len(country.tiles) <= 0 and country.isDestroyed == False:\n        removeCountry(country)\n\ndef Germany():\n    runCountry(germany)\n\ndef France():\n    runCountry(france)\n\ndef Belgium():\n    runCountry(belgium)\n\ndef Britain():\n    runCountry(britain)\n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n            for warCountry in countries:\n                isEnemy = getEnemy(country, warCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == warCountry.getTileImage() and warCountry.name != country.name and not isEnemy:\n                    playerSprite.say_text(\"Influenced war with \" + warCountry.name, 2000)\n                    country.warTarget = warCountry.name\n                    country.warCooldown = 60\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi and country.peaceCooldown == 0:\n            for peaceCountry in countries:\n                isEnemy = getEnemy(country, peaceCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == peaceCountry.getTileImage() and peaceCountry.name != country.name and isEnemy and country.chargeCooldown == 0: \n                    playerSprite.say_text(\"Influenced peace with \" + peaceCountry.name, 2000)\n                    country.peaceTarget = peaceCountry.name\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_b_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n            for chargeCountry in countries:\n                isEnemy = getEnemy(country, chargeCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == chargeCountry.getTileImage() and chargeCountry.name != country.name and isEnemy:\n                    playerSprite.say_text(\"Currently charging \" + chargeCountry.name, 2000)\n                    country.chargeTarget = chargeCountry.name\n                    country.chargeCooldown = 120\nmp.on_button_event(mp.MultiplayerButton.B, ControllerButtonEvent.PRESSED, on_button_event_b_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    country: countryType = getCountryByPlayer(player) if getCountryByPlayer(player) != None else None\n    if country is None:\n        if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n        else:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n        return\n    if country.isDestroyed == True:\n        return\n    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    else:\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAADMAAAAAMAAAMAMAAAAzAAAAMwAwMAMAAAAwAzAzAAAAAAAzMAMAAAAAADAwMwAAAAAAMDMwAwAAAAAwAwAAAAAAADMzAAMAAAAwAzAzAAAAADMAMDMAAAAwAwAzMAMAADMAAAMAMwAAAwAAAAAwAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"anim3\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim3\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"MzIwMDEwMDAxMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMTEwMTAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMTAwMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAxMDEwMDAwMDAwMDAwMDEwMTAxMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMDEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDQ0NDQwMDAwMDAwMDAwMDAwNDQ0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQwMDAwMDAwMDAwMDA0MDQ0NDQwMDAwMDAwMDAwNDAyNDQ0MDAwMDAwMDAwMDQwNDQ0NDAwMDAwMDAwMDAwMDQ0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDA1MDA1NTAwMDAwMDAwNTA0NTAwNDUwNDAwNTAwMDUwNDQ0NDQ0NDQ0NDU1MDA0MDI0NDQ0NDQ0NDI1NTAwMDAyNDIyMjIyMjQyMDQwMDAwNDQyMjIyMjI0MjAwMDAwMDQwMjQyMjIyMDQwMDAwMDA0MDIyMjIyMjA0MDAwMDUwNDQyMjIyMjI0NDAwMDA1MDQ1MjQyMjIyNDQwMDAwMDA1NTQ1MjQ0MjU0MDUwMDAwMDA0NTQ0NDQ1NDAwMDAwMDUwNTUwMDQ0NTQwMDAwMDA1NTU1MDAwMDU1MDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobImplode\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3 - Copy - Copy - Copy - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1753411084278,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\nfight = SpriteKind.create()\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, casualties: int, tilesLost: int, warTarget: str, warCooldown: int, peaceCooldown: int, peaceTarget: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, chargeCooldown: int, chargeTarget: str, tiles: List[tiles.Location]):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.casualties = casualties\n        self.tilesLost = tilesLost\n        self.warTarget = warTarget\n        self.warCooldown = warCooldown\n        self.peaceCooldown = peaceCooldown\n        self.peaceTarget = peaceTarget\n        self.borderingCountries = borderingCountries\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.isDestroyed = isDestroyed\n        self.chargeCooldown = chargeCooldown\n        self.chargeTarget = chargeTarget\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 12\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    country.warTarget = None\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    country.peaceCooldown = 20\n    country.peaceTarget = None\n    accept = Math.percent_chance(15 + ( enemy.tilesLost * 5) + (enemy.casualties / 10000))\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n        country.tilesLost = 0\n        enemy.tilesLost = 0\n        country.casualties = 0\n        enemy.casualties = 0\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getCountryByPlayer(p: player):\n    for country in countries:\n        if mp.get_player_property(p, mp.PlayerProperty.INDEX) == country.playerChosen:\n            return country\n            break\n    return None\n\ndef getBorderingCountries(country: countryType):\n    for tile in country.tiles:\n        for targetCountry in countries:\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef removeCountry(country: countryType):\n    index = 0\n    for existingCountry in countries:\n        if existingCountry.name == country.name:\n            countries.remove_at(index)\n        index += 1\n    game.show_long_text(country.name + \" has collapsed\", DialogLayout.BOTTOM)\n    for enemy in country.enemies:\n        enemyIndex = getEnemyIndex(country, enemy)\n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n    country.isDestroyed = True\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    if country.peaceCooldown != 0:\n        country.peaceCooldown -= 1\n    warFactor = 5 if targetCountry.name == country.warTarget else 1\n    peaceFactor = 5 if targetCountry.name == country.peaceTarget else 1\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = True if ((randint(1, 10000) + country.strategy.aggressiveness - (len(country.enemies) * 1000))) * warFactor > 9590 and not isEnemy else False\n    war and declareWar(country, targetCountry)\n    peace = True if (randint(1, 10000) + (country.casualties / 100) + country.strategy.peacefulness + (len(country.enemies) * 100)) * peaceFactor > 9590  and not war and isEnemy and country.peaceCooldown == 0 else False\n    peace and declarePeace(country, targetCountry)\n    trade = True if randint(1, 10000) + (country.strategy.trading / 2) > 9850 and not isTradePartner and not war and not peace and not isEnemy else False\n    trade and declareTrade(country, targetCountry)\n\ndef internalEvent(country: countryType, targetCountry: countryType):\n    isEnemy = getEnemy(country, targetCountry)\n    isEnemyCharging = 2 if targetCountry.chargeCooldown != 0 and targetCountry.chargeTarget == country.name else 1\n    charge = True if randint(1, 10000) * isEnemyCharging + ((country.pop / 100000 - targetCountry.pop / 100000) * 100) > 9000 and country.isAi and isEnemy else False\n    if charge:\n        country.chargeCooldown = 80\n        country.chargeTarget = targetCountry.name\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    charge = 1\n    if not country.pop > 0:\n        return\n    if country.chargeTarget != None:\n        if country.chargeCooldown > 39 and country.chargeTarget == targetCountry.name:\n            charge = 20\n            country.chargeCooldown -= 1\n    attack = Math.percent_chance((1 + ((country.pop / 10000) - (targetCountry.pop / 10000)) + (country.strategy.aggressiveness / 10)) * charge)\n    if not attack:\n        return\n    roll = randint(1, 500) + ((country.pop / 10000) - (targetCountry.pop / 10000))\n    if roll < 480:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.fire, 200)\n        country.pop -= roll * 10\n        country.casualties += roll * 10\n    else:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.ashes, 500)\n        tiles.set_tile_at(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        addTile(country, enemyTile)\n        targetCountry.tilesLost += 1\n        targetCountry.pop -= roll * 10\n        targetCountry.casualties += roll * 10\n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ndef runCountry(country: countryType):\n    getBorderingCountries(country)\n    popGain(country)\n    ecoGain(country)\n    getBorderingCountries(country)\n    index = len(country.borderingCountries) - 1\n    randomCountry = country.borderingCountries[randint(0, index)]\n    if not country.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if country.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if country.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if country.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, country.pop)\n        if len(country.tiles) <= 0 and country.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            country.isDestroyed = True\n    if randomCountry.name != country.name:\n        externalEvent(country, randomCountry)\n        internalEvent(country, randomCountry)\n        if len(country.enemies) > 0:\n            randomEnemyIndex = len(country.enemies) - 1\n            randomEnemy = country.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(country, targetCountry)\n    if len(country.tiles) <= 0 and country.isDestroyed == False:\n        removeCountry(country)\n\ndef Germany():\n    runCountry(germany)\n\ndef France():\n    runCountry(france)\n\ndef Belgium():\n    runCountry(belgium)\n\ndef Britain():\n    runCountry(britain)\n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n            return\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n            for warCountry in countries:\n                isEnemy = getEnemy(country, warCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == warCountry.getTileImage() and warCountry.name != country.name and not isEnemy:\n                    playerSprite.say_text(\"Influenced war with \" + warCountry.name, 2000)\n                    country.warTarget = warCountry.name\n                    country.warCooldown = 60\n                    return\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n            for peaceCountry in countries:\n                isEnemy = getEnemy(country, peaceCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == peaceCountry.getTileImage() and peaceCountry.name != country.name and isEnemy and country.peaceCooldown == 0: \n                    playerSprite.say_text(\"Influenced peace with \" + peaceCountry.name, 2000)\n                    country.peaceTarget = peaceCountry.name\n                    return\n                elif country.peaceCooldown != 0:\n                    playerSprite.say_text(\"You have \" + country.peaceCooldown + \" seconds before you can peace again\", 2000)\n                    return\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_b_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n            for chargeCountry in countries:\n                isEnemy = getEnemy(country, chargeCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == chargeCountry.getTileImage() and chargeCountry.name != country.name and isEnemy and country.chargeCooldown == 0:\n                    playerSprite.say_text(\"Currently charging \" + chargeCountry.name, 2000)\n                    country.chargeTarget = chargeCountry.name\n                    country.chargeCooldown = 80\n                    return\n                elif country.chargeCooldown != 0:\n                    playerSprite.say_text(\"You must wait \" + country.chargeCooldown + \" seconds to charge again\", 2000)\n                    return\nmp.on_button_event(mp.MultiplayerButton.B, ControllerButtonEvent.PRESSED, on_button_event_b_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    country: countryType = getCountryByPlayer(player) if getCountryByPlayer(player) != None else None\n    if country is None:\n        if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n        else:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n        return\n    if country.isDestroyed == True:\n        return\n    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    else:\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAADMAAAAAMAAAMAMAAAAzAAAAMwAwMAMAAAAwAzAzAAAAAAAzMAMAAAAAADAwMwAAAAAAMDMwAwAAAAAwAwAAAAAAADMzAAMAAAAwAzAzAAAAADMAMDMAAAAwAwAzMAMAADMAAAMAMwAAAwAAAAAwAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"anim3\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim3\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"MzIwMDEwMDAxMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMTEwMTAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMTAwMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAxMDEwMDAwMDAwMDAwMDEwMTAxMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMDEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDQ0NDQwMDAwMDAwMDAwMDAwNDQ0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQwMDAwMDAwMDAwMDA0MDQ0NDQwMDAwMDAwMDAwNDAyNDQ0MDAwMDAwMDAwMDQwNDQ0NDAwMDAwMDAwMDAwMDQ0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDA1MDA1NTAwMDAwMDAwNTA0NTAwNDUwNDAwNTAwMDUwNDQ0NDQ0NDQ0NDU1MDA0MDI0NDQ0NDQ0NDI1NTAwMDAyNDIyMjIyMjQyMDQwMDAwNDQyMjIyMjI0MjAwMDAwMDQwMjQyMjIyMDQwMDAwMDA0MDIyMjIyMjA0MDAwMDUwNDQyMjIyMjI0NDAwMDA1MDQ1MjQyMjIyNDQwMDAwMDA1NTQ1MjQ0MjU0MDUwMDAwMDA0NTQ0NDQ1NDAwMDAwMDUwNTUwMDQ0NTQwMDAwMDA1NTU1MDAwMDU1MDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobImplode\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1753595787549,"editorVersion":"2.0.56","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"tiles.set_current_tilemap(tilemap(\"\"\"world\"\"\"))\n\nchosenCountry = MultiplayerState.create()\nchosenCountry = 0\n\nfight = SpriteKind.create()\n\ndef on_controller_event_connected(player):\n    crosshair: Sprite = None\n\n    crosshair = sprites.create(assets.image(\"\"\"bob\"\"\"), SpriteKind.player)\n\n    mp.set_player_sprite(player, crosshair)\n    \n    mp.move_with_buttons(player)\n\n    mp.set_player_state(player, chosenCountry, 0)\n\n    if player == mp.get_player_by_index(0):\n        scene.camera_follow_sprite(crosshair)\n    \n    mp.set_player_indicators_visible(True)\n\nmp.on_controller_event(ControllerEvent.CONNECTED, on_controller_event_connected)\n\nclass aiStrategy:\n    def __init__(self, name: str, aggressiveness: int, peacefulness: int, trading: int):\n        self.name = name\n        self.aggressiveness = aggressiveness\n        self.peacefulness = peacefulness\n        self.trading = trading\n\nclass countryType:\n    def __init__(self, name: str, pop: int, eco: int, strategy: aiStrategy, isAi: bool, casualties: int, tilesLost: int, warTarget: str, warCooldown: int, peaceCooldown: int, peaceTarget: str, borderingCountries: List[countryType], tradePartners: List[countryType], enemies: List[countryType], isDestroyed: bool, chargeCooldown: int, chargeTarget: str, tiles: List[tiles.Location]):\n        self.name = name\n        self.pop = pop\n        self.eco = eco\n        self.strategy = strategy\n        self.isAi = isAi\n        self.casualties = casualties\n        self.tilesLost = tilesLost\n        self.warTarget = warTarget\n        self.warCooldown = warCooldown\n        self.peaceCooldown = peaceCooldown\n        self.peaceTarget = peaceTarget\n        self.borderingCountries = borderingCountries\n        self.tradePartners = tradePartners\n        self.enemies = enemies\n        self.isDestroyed = isDestroyed\n        self.chargeCooldown = chargeCooldown\n        self.chargeTarget = chargeTarget\n        self.tiles = tiles\n    \n    def getTileImage(self):\n        tileImage = tiles.tile_image_at_location(self.tiles[0])\n        return tileImage\n\ngermany = countryType(\"Germany\", 200000, 4, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"germanTile\"\"\")))\nfrance = countryType(\"France\", 100000, 2, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"franceTile\"\"\")))\nbelgium = countryType(\"Belgium\", 50000, 1, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"belgiumTile\"\"\")))\nbritain = countryType(\"United Kingdom\", 150000, 3, aiStrategy(\"\", 0, 0, 0), True, 0, 0, None, 0, 0, None, [], [], [], False, 0, None, tiles.get_tiles_by_type(assets.tile(\"\"\"britainTile\"\"\")))\n\nplayers = mp.all_players()\n\ncountries: List[countryType] = [germany, france, belgium, britain]\n\ndef chooseCountry(player):\n    sprite = mp.get_player_sprite(player)\n    for country in countries:\n        if tiles.tile_at_location_equals(sprite.tilemap_location(), tiles.tile_image_at_location(country.tiles[0])):\n            game.show_long_text(\"Player \" + mp.get_player_property(player, mp.PlayerProperty.INDEX + 1) + \" has chosen \" + country.name, DialogLayout.BOTTOM)\n            country.isAi = False\n            country.playerChosen = mp.get_player_property(player, mp.PlayerProperty.INDEX)\n\ndef popGain(country: countryType):\n    country.pop += len(country.tiles) * 12\n    return country.pop\n\ndef ecoGain(country: countryType):\n    recession = Math.percent_chance(5)\n    if recession:\n        depression = Math.percent_chance(1)\n        country.eco -= len(country.tiles) / 100\n        if depression:\n            country.eco -= len(country.tiles) / 10\n    else:\n        country.eco += len(country.tiles) / 100\n\ndef addStrategy(country: countryType):\n    strategy = country.strategy\n    strategy.aggressiveness = randint(1, 100)\n    strategy.peacefulness = randint(1, 100)\n    strategy.trading = randint(1, 100)\n    strategy.name = \"aggressive\" if strategy.aggressiveness > strategy.peacefulness and strategy.aggressiveness > strategy.trading else \"peaceful\" if strategy.peacefulness > strategy.aggressiveness and strategy.peacefulness > strategy.trading else \"trading\"\n    return strategy\n\ndef declareWar(country: countryType, enemy: countryType):\n    country.warTarget = None\n    game.show_long_text(country.name + \" declares war on \" + enemy.name, DialogLayout.BOTTOM)\n    for tradeCountry in country.tradePartners:\n        if tradeCountry.name == enemy.name:\n            game.show_long_text(country.name + \" cuts trade with \" + enemy.name, DialogLayout.BOTTOM)\n            tradeIndex = getEnemyIndex(country, enemy)\n            enemyTradeIndex = getEnemyIndex(enemy, country)\n            country.tradePartners.remove_at(tradeIndex)\n            enemy.tradePartners.remove_at(enemyTradeIndex)\n    country.enemies.append(enemy)\n    enemy.enemies.append(country)\n\ndef declarePeace(country: countryType, enemy: countryType):\n    country.peaceCooldown = 20\n    country.peaceTarget = None\n    accept = Math.percent_chance(15 + ( enemy.tilesLost * 5) + (enemy.casualties / 10000))\n    if accept:\n        game.show_long_text(country.name + \" declares peace with \" + enemy.name, DialogLayout.BOTTOM)\n        enemyIndex = getEnemyIndex(country, enemy) \n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n        country.tilesLost = 0\n        enemy.tilesLost = 0\n        country.casualties = 0\n        enemy.casualties = 0\n    else:\n        game.show_long_text(enemy.name + \" refuses peace with \" + country.name, DialogLayout.BOTTOM)\n\ndef declareTrade(country: countryType, enemy: countryType):\n    accept = Math.percent_chance(50)\n    if accept:\n        game.show_long_text(country.name + \" trades with \" + enemy.name, DialogLayout.BOTTOM)\n        country.tradePartners.append(enemy)\n        enemy.tradePartners.append(country)\n\ndef getEnemy(country: countryType, targetCountry: countryType):\n    for enemy in country.enemies:\n        isEnemy = True if enemy.name == targetCountry.name else False\n        if isEnemy:\n            break\n    return isEnemy\n\ndef getTradePartner(country: countryType, targetCountry: countryType):\n    for tradePartner in country.tradePartners:\n        isTradePartner = True if tradePartner.name == targetCountry.name else False\n        if isTradePartner:\n            break\n    return isTradePartner\n\ndef getEnemyIndex(country: countryType, targetCountry: countryType):\n    index = 0\n    returnIndex = 0\n    for enemy in country.enemies:\n        if enemy.name == targetCountry.name:\n            returnIndex = index\n            return returnIndex\n            break\n        index += 1\n    return returnIndex\n\ndef getCountryByPlayer(p: player):\n    for country in countries:\n        if mp.get_player_property(p, mp.PlayerProperty.INDEX) == country.playerChosen:\n            return country\n            break\n    return None\n\ndef getBorderingCountries(country: countryType):\n    country.borderingCountries = []\n    for tile in country.tiles:\n        for targetCountry in countries:\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n            if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n                country.borderingCountries.append(targetCountry)\n\ndef removeTile(targetCountry: countryType, targetTile: tiles.Location):\n    index = 0\n    for tile in targetCountry.tiles:\n        if tile.row == targetTile.row and tile.column == targetTile.column:\n            targetCountry.tiles.remove_at(index)\n        index += 1\n\ndef addTile(country: countryType, targetTile: tiles.Location):\n    country.tiles.append(targetTile)\n\ndef removeCountry(country: countryType):\n    index = 0\n    for existingCountry in countries:\n        if existingCountry.name == country.name:\n            countries.remove_at(index)\n        index += 1\n    game.show_long_text(country.name + \" has collapsed\", DialogLayout.BOTTOM)\n    for enemy in country.enemies:\n        enemyIndex = getEnemyIndex(country, enemy)\n        country.enemies.remove_at(enemyIndex)\n        countryIndex = getEnemyIndex(enemy, country)\n        enemy.enemies.remove_at(countryIndex)\n    country.isDestroyed = True\n\ndef externalEvent(country: countryType, targetCountry: countryType):\n    if country.peaceCooldown != 0:\n        country.peaceCooldown -= 1\n    warFactor = 5 if targetCountry.name == country.warTarget else 1\n    peaceFactor = 5 if targetCountry.name == country.peaceTarget else 1\n    isEnemy = getEnemy(country, targetCountry)\n    isTradePartner = getTradePartner(country, targetCountry)\n    war = True if ((randint(1, 10000) + country.strategy.aggressiveness - (len(country.enemies) * 1000))) * warFactor > 9590 and not isEnemy else False\n    war and declareWar(country, targetCountry)\n    peace = True if (randint(1, 10000) + (country.casualties / 100) + country.strategy.peacefulness + (len(country.enemies) * 100)) * peaceFactor > 9590  and not war and isEnemy and country.peaceCooldown == 0 else False\n    peace and declarePeace(country, targetCountry)\n    trade = True if randint(1, 10000) + (country.strategy.trading / 2) > 9850 and not isTradePartner and not war and not peace and not isEnemy else False\n    trade and declareTrade(country, targetCountry)\n\ndef internalEvent(country: countryType, targetCountry: countryType):\n    if country.chargeCooldown != 0:\n        country.chargeCooldown -= 1\n    isEnemy = getEnemy(country, targetCountry)\n    isEnemyCharging = 2 if targetCountry.chargeCooldown != 0 and targetCountry.chargeTarget == country.name else 1\n    charge = True if randint(1, 10000) * isEnemyCharging + ((country.pop / 100000 - targetCountry.pop / 100000) * 100) > 9000 and country.isAi and isEnemy and country.chargeCooldown == 0 else False\n    if charge:\n        country.chargeCooldown = 80\n        country.chargeTarget = targetCountry.name\n\ndef battle(country: countryType, targetCountry: countryType, enemyTile: tiles.Location):\n    charge = 1\n    if not country.pop > 0:\n        return\n    if country.chargeTarget != None:\n        if country.chargeCooldown > 39 and country.chargeTarget == targetCountry.name:\n            charge = 20\n    attack = Math.percent_chance((1 + ((country.pop / 10000) - (targetCountry.pop / 10000)) + (country.strategy.aggressiveness / 10)) * charge)\n    if not attack:\n        return\n    roll = randint(1, 500) + ((country.pop / 10000) - (targetCountry.pop / 10000))\n    if roll < 400:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.fire, 200)\n        country.pop -= roll * 10\n        country.casualties += roll * 10\n    else:\n        failedBattle = sprites.create(assets.image(\"\"\"failedBattle\"\"\"), fight)\n        failedBattle.set_position(enemyTile.x, enemyTile.y)\n        failedBattle.destroy(effects.ashes, 500)\n        tiles.set_tile_at(enemyTile, country.getTileImage())\n        removeTile(targetCountry, enemyTile)\n        addTile(country, enemyTile)\n        targetCountry.tilesLost += 1\n        targetCountry.pop -= roll * 10\n        targetCountry.casualties += roll * 10\n\ndef war(country: countryType, targetCountry: countryType):\n    for tile in country.tiles:\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.LEFT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.LEFT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.RIGHT), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.RIGHT)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.TOP), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.TOP)\n            battle(country, targetCountry, targetTile)\n        if tiles.tile_at_location_equals(tile.get_neighboring_location(CollisionDirection.BOTTOM), targetCountry.getTileImage()):\n            targetTile = tile.get_neighboring_location(CollisionDirection.BOTTOM)\n            battle(country, targetCountry, targetTile)\n\ngermany.strategy = addStrategy(germany)\nfrance.strategy = addStrategy(france)\nbelgium.strategy = addStrategy(belgium)\nbritain.strategy = addStrategy(britain)\n\ndef runCountry(country: countryType):\n    popGain(country)\n    ecoGain(country)\n    getBorderingCountries(country)\n    if len(country.borderingCountries) == 0:\n        return\n    index = len(country.borderingCountries) - 1\n    randomCountry = country.borderingCountries[randint(0, index)]\n    if not country.isAi:\n        p = mp.player_selector(mp.PlayerNumber.ONE) if country.playerChosen == 0 else mp.player_selector(mp.PlayerNumber.TWO) if country.playerChosen == 1 else mp.player_selector(mp.PlayerNumber.THREE) if country.playerChosen == 2 else mp.player_selector(mp.PlayerNumber.FOUR)\n        sprite = mp.get_player_sprite(p)\n        mp.set_player_state(p, MultiplayerState.score, country.pop)\n        if len(country.tiles) <= 0 and country.isDestroyed == False:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobImplode\"\"\"), 50, False)\n            sprite.destroy(effects.fire)\n            country.isDestroyed = True\n    if randomCountry.name != country.name:\n        externalEvent(country, randomCountry)\n        internalEvent(country, randomCountry)\n        if len(country.enemies) > 0:\n            randomEnemyIndex = len(country.enemies) - 1\n            randomEnemy = country.enemies[randint(0, randomEnemyIndex)]\n            targetCountry = randomEnemy\n            war(country, targetCountry)\n    if len(country.tiles) <= 0 and country.isDestroyed == False:\n        removeCountry(country)\n\ndef Germany():\n    runCountry(germany)\n\ndef France():\n    runCountry(france)\n\ndef Belgium():\n    runCountry(belgium)\n\ndef Britain():\n    runCountry(britain)\n\ngame.on_update_interval(100, Germany)\ngame.on_update_interval(100, France)\ngame.on_update_interval(100, Belgium)\ngame.on_update_interval(100, Britain)\n\ndef on_button_event_a_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if mp.get_player_state(player, chosenCountry) == 0 and tiles.tile_image_at_location(playerSprite.tilemap_location()) == country.getTileImage() and country.isAi:\n            chooseCountry(player)\n            mp.set_player_state(player, chosenCountry, 1)\n            return\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n            for warCountry in countries:\n                isEnemy = getEnemy(country, warCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == warCountry.getTileImage() and warCountry.name != country.name and not isEnemy:\n                    playerSprite.say_text(\"Influenced war with \" + warCountry.name, 2000)\n                    country.warTarget = warCountry.name\n                    country.warCooldown = 60\n                    return\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n            for peaceCountry in countries:\n                isEnemy = getEnemy(country, peaceCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == peaceCountry.getTileImage() and peaceCountry.name != country.name and isEnemy and country.peaceCooldown == 0: \n                    playerSprite.say_text(\"Influenced peace with \" + peaceCountry.name, 2000)\n                    country.peaceTarget = peaceCountry.name\n                    return\n                elif country.peaceCooldown != 0:\n                    playerSprite.say_text(\"You have \" + country.peaceCooldown + \" seconds before you can peace again\", 2000)\n                    return\nmp.on_button_event(mp.MultiplayerButton.A, ControllerButtonEvent.PRESSED, on_button_event_a_pressed)\n\ndef on_button_event_b_pressed(player):\n    playerSprite = mp.get_player_sprite(player)\n    for country in countries:\n        if country.playerChosen == mp.get_player_property(player, mp.PlayerProperty.INDEX) and not country.isAi:\n            for chargeCountry in countries:\n                isEnemy = getEnemy(country, chargeCountry)\n                if tiles.tile_image_at_location(playerSprite.tilemap_location()) == chargeCountry.getTileImage() and chargeCountry.name != country.name and isEnemy and country.chargeCooldown == 0:\n                    playerSprite.say_text(\"Currently charging \" + chargeCountry.name, 2000)\n                    country.chargeTarget = chargeCountry.name\n                    country.chargeCooldown = 80\n                    return\n                elif country.chargeCooldown != 0:\n                    playerSprite.say_text(\"You must wait \" + country.chargeCooldown + \" seconds to charge again\", 2000)\n                    return\nmp.on_button_event(mp.MultiplayerButton.B, ControllerButtonEvent.PRESSED, on_button_event_b_pressed)\n\ndef on_button_event_movement_pressed(player):\n    sprite = mp.get_player_sprite(player)\n    country: countryType = getCountryByPlayer(player) if getCountryByPlayer(player) != None else None\n    if country is None:\n        if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n        else:\n            animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\n        return\n    if country.isDestroyed == True:\n        return\n    if mp.is_button_pressed(player, mp.MultiplayerButton.UP) or mp.is_button_pressed(player, mp.MultiplayerButton.DOWN) or mp.is_button_pressed(player, mp.MultiplayerButton.LEFT) or mp.is_button_pressed(player, mp.MultiplayerButton.RIGHT):\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobWalk\"\"\"), 100, True)\n    else:\n        animation.run_image_animation(sprite, assets.animation(\"\"\"bobStand\"\"\"), 100, True)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.PRESSED, on_button_event_movement_pressed)\nmp.on_button_event(mp.MultiplayerButton.UP, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.DOWN, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.LEFT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed) or mp.on_button_event(mp.MultiplayerButton.RIGHT, ControllerButtonEvent.RELEASED, on_button_event_movement_pressed)","tilemap.g.jres":"{\n    \"tile1\": {\n        \"data\": \"hwQQABAAAAAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"germanTile\"\n    },\n    \"tile2\": {\n        \"data\": \"hwQQABAAAACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"franceTile\"\n    },\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"tile3\": {\n        \"data\": \"hwQQABAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"belgiumTile\"\n    },\n    \"tile4\": {\n        \"data\": \"hwQQABAAAAB3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3dw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true,\n        \"displayName\": \"britainTile\"\n    },\n    \"world1\": {\n        \"id\": \"world1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAzMDMwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDMwMzAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMzAzMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMjAyMDIwMjAwMDAwMDAwMDAwMDAwMDAwMTAxMDEwMTAyMDIwMjAyMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDIwMjAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwNDA0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDA0MDQwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDQwNDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\",\n            \"myTiles.tile1\",\n            \"myTiles.tile2\",\n            \"myTiles.tile3\",\n            \"myTiles.tile4\"\n        ],\n        \"displayName\": \"world\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAMzMAMDMAAAAzMwAwMwMAADMzAzAzMwAAMzMDMDMzAAAzMwMAMzMDADMzMwAwMwMAMzMzAAAzAwAzMzMAADMDADMzMwAAMzMAMzMzAAAzMwAwMzMAADMzADAzMzMzMzMAADMzMzMzMwAAMDMzMzMAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"city\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAABERAAAAAAAAEREAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"crosshair\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABARAAABAAAAEAAQEQEAEB8QABAAAAAQEREREQAAABAfEAAQAAAAAAAQABARAQAAABARAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"bob\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAADMAAAAAMAAAMAMAAAAzAAAAMwAwMAMAAAAwAzAzAAAAAAAzMAMAAAAAADAwMwAAAAAAMDMwAwAAAAAwAwAAAAAAADMzAAMAAAAwAzAzAAAAADMAMDMAAAAwAwAzMAMAADMAAAMAMwAAAwAAAAAwAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"failedBattle\"\n    },\n    \"anim1\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim1\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"NjQwMDEwMDAxMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAxMDAwMDAwMDAxMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMTExMTEwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTAxMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTEwMDEwMDAwMDAwMDAwMDAwMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobWalk\"\n    },\n    \"anim2\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim2\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"YzgwMDEwMDAxMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDExMTExMTAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMTAwMTAwMTAwMDAwMDAwMDAwMDAwMDAwMDAw\",\n        \"displayName\": \"bobStand\"\n    },\n    \"anim3\": {\n        \"namespace\": \"myAnimations\",\n        \"id\": \"anim3\",\n        \"mimeType\": \"application/mkcd-animation\",\n        \"data\": \"MzIwMDEwMDAxMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMTExMTExMDEwMDAwMDAwMDAxMTAwMDAxMDAwMDAwMDAwMTEwMDAwMTAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDExMDAxMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMWYwZjAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDEwMTExMTAwMDAwMDAwMDAxMTEwMTAwMTAwMDAwMDAwMDExMDAwMDEwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMTAwMTExMDAwMDAwMDAwMDEwMDAxMDAwMDAwMDAwMDAxMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxZjBmMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAxMDExMTEwMDAwMDAwMDAwMTAxMDEwMDAwMDAwMDAwMDEwMTAxMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMDEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDFmMGYwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDAxMDEwMDAwMDAwMDAwMTAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMTAxMDAwMDAwMDAwMDAwMTEwMTAwMDAwMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwNDAwMDAwMDAwMDAwMDQ0NDQwMDAwMDAwMDAwMDAwNDQ0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQwMDAwMDAwMDAwMDA0MDQ0NDQwMDAwMDAwMDAwNDAyNDQ0MDAwMDAwMDAwMDQwNDQ0NDAwMDAwMDAwMDAwMDQ0MDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDA1MDA1NTAwMDAwMDAwNTA0NTAwNDUwNDAwNTAwMDUwNDQ0NDQ0NDQ0NDU1MDA0MDI0NDQ0NDQ0NDI1NTAwMDAyNDIyMjIyMjQyMDQwMDAwNDQyMjIyMjI0MjAwMDAwMDQwMjQyMjIyMDQwMDAwMDA0MDIyMjIyMjA0MDAwMDUwNDQyMjIyMjI0NDAwMDA1MDQ1MjQyMjIyNDQwMDAwMDA1NTQ1MjQ0MjU0MDUwMDAwMDA0NTQ0NDQ1NDAwMDAwMDUwNTUwMDQ0NTQwMDAwMDA1NTU1MDAwMDU1MDAwMDAwMDAwMDAwMDAwMDAwMDA=\",\n        \"displayName\": \"bobImplode\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Diplomacy 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"multiplayer\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}}],"shares":[{"id":"60013-22479-42134-67287","timestamp":1752706047066},{"id":"01397-25279-08141-79253","timestamp":1752713077287},{"id":"68546-33414-06089-53443","timestamp":1752713186500},{"id":"24051-21061-78711-43811","timestamp":1752713382836},{"id":"33964-71380-78281-96765","timestamp":1752713569131},{"id":"22839-54838-31096-31672","timestamp":1752713695218},{"id":"97601-44894-23451-51697","timestamp":1752714148385},{"id":"35281-68692-75099-34546","timestamp":1753070124997},{"id":"89678-03561-72008-23004","timestamp":1753401034342},{"id":"21999-47845-61501-72619","timestamp":1753595812681}],"lastSaveTime":1753596757739}